
USB_Flash_Programmer_xmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00802000  000029f0  00002a84  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027f  00802196  00802196  00002c1a  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00002cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000095a9  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bc5  00000000  00000000  0000c6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004f87  00000000  00000000  00010286  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c50  00000000  00000000  00015210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032eea  00000000  00000000  00015e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000337a  00000000  00000000  00048d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0004c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000a913  00000000  00000000  0004c500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	27 c1       	rjmp	.+590    	; 0x254 <__bad_interrupt>
       6:	00 00       	nop
       8:	25 c1       	rjmp	.+586    	; 0x254 <__bad_interrupt>
       a:	00 00       	nop
       c:	23 c1       	rjmp	.+582    	; 0x254 <__bad_interrupt>
       e:	00 00       	nop
      10:	21 c1       	rjmp	.+578    	; 0x254 <__bad_interrupt>
      12:	00 00       	nop
      14:	1f c1       	rjmp	.+574    	; 0x254 <__bad_interrupt>
      16:	00 00       	nop
      18:	1d c1       	rjmp	.+570    	; 0x254 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1b c1       	rjmp	.+566    	; 0x254 <__bad_interrupt>
      1e:	00 00       	nop
      20:	19 c1       	rjmp	.+562    	; 0x254 <__bad_interrupt>
      22:	00 00       	nop
      24:	17 c1       	rjmp	.+558    	; 0x254 <__bad_interrupt>
      26:	00 00       	nop
      28:	15 c1       	rjmp	.+554    	; 0x254 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	13 c1       	rjmp	.+550    	; 0x254 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c1       	rjmp	.+546    	; 0x254 <__bad_interrupt>
      32:	00 00       	nop
      34:	0f c1       	rjmp	.+542    	; 0x254 <__bad_interrupt>
      36:	00 00       	nop
      38:	0d c1       	rjmp	.+538    	; 0x254 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0b c1       	rjmp	.+534    	; 0x254 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c1       	rjmp	.+530    	; 0x254 <__bad_interrupt>
      42:	00 00       	nop
      44:	07 c1       	rjmp	.+526    	; 0x254 <__bad_interrupt>
      46:	00 00       	nop
      48:	05 c1       	rjmp	.+522    	; 0x254 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	03 c1       	rjmp	.+518    	; 0x254 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c1       	rjmp	.+514    	; 0x254 <__bad_interrupt>
      52:	00 00       	nop
      54:	ff c0       	rjmp	.+510    	; 0x254 <__bad_interrupt>
      56:	00 00       	nop
      58:	fd c0       	rjmp	.+506    	; 0x254 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fb c0       	rjmp	.+502    	; 0x254 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f9 c0       	rjmp	.+498    	; 0x254 <__bad_interrupt>
      62:	00 00       	nop
      64:	f7 c0       	rjmp	.+494    	; 0x254 <__bad_interrupt>
      66:	00 00       	nop
      68:	f5 c0       	rjmp	.+490    	; 0x254 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f3 c0       	rjmp	.+486    	; 0x254 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f1 c0       	rjmp	.+482    	; 0x254 <__bad_interrupt>
      72:	00 00       	nop
      74:	ef c0       	rjmp	.+478    	; 0x254 <__bad_interrupt>
      76:	00 00       	nop
      78:	ed c0       	rjmp	.+474    	; 0x254 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	eb c0       	rjmp	.+470    	; 0x254 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e9 c0       	rjmp	.+466    	; 0x254 <__bad_interrupt>
      82:	00 00       	nop
      84:	e7 c0       	rjmp	.+462    	; 0x254 <__bad_interrupt>
      86:	00 00       	nop
      88:	e5 c0       	rjmp	.+458    	; 0x254 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e3 c0       	rjmp	.+454    	; 0x254 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e1 c0       	rjmp	.+450    	; 0x254 <__bad_interrupt>
      92:	00 00       	nop
      94:	df c0       	rjmp	.+446    	; 0x254 <__bad_interrupt>
      96:	00 00       	nop
      98:	dd c0       	rjmp	.+442    	; 0x254 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c0       	rjmp	.+438    	; 0x254 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d9 c0       	rjmp	.+434    	; 0x254 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d7 c0       	rjmp	.+430    	; 0x254 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d5 c0       	rjmp	.+426    	; 0x254 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d3 c0       	rjmp	.+422    	; 0x254 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d1 c0       	rjmp	.+418    	; 0x254 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cf c0       	rjmp	.+414    	; 0x254 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	cd c0       	rjmp	.+410    	; 0x254 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cb c0       	rjmp	.+406    	; 0x254 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c9 c0       	rjmp	.+402    	; 0x254 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c7 c0       	rjmp	.+398    	; 0x254 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c5 c0       	rjmp	.+394    	; 0x254 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c3 c0       	rjmp	.+390    	; 0x254 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c1 c0       	rjmp	.+386    	; 0x254 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bf c0       	rjmp	.+382    	; 0x254 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	bd c0       	rjmp	.+378    	; 0x254 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bb c0       	rjmp	.+374    	; 0x254 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b9 c0       	rjmp	.+370    	; 0x254 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b7 c0       	rjmp	.+366    	; 0x254 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b5 c0       	rjmp	.+362    	; 0x254 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b3 c0       	rjmp	.+358    	; 0x254 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b1 c0       	rjmp	.+354    	; 0x254 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	af c0       	rjmp	.+350    	; 0x254 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ad c0       	rjmp	.+346    	; 0x254 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ab c0       	rjmp	.+342    	; 0x254 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a9 c0       	rjmp	.+338    	; 0x254 <__bad_interrupt>
     102:	00 00       	nop
     104:	a7 c0       	rjmp	.+334    	; 0x254 <__bad_interrupt>
     106:	00 00       	nop
     108:	a5 c0       	rjmp	.+330    	; 0x254 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a3 c0       	rjmp	.+326    	; 0x254 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a1 c0       	rjmp	.+322    	; 0x254 <__bad_interrupt>
     112:	00 00       	nop
     114:	9f c0       	rjmp	.+318    	; 0x254 <__bad_interrupt>
     116:	00 00       	nop
     118:	9d c0       	rjmp	.+314    	; 0x254 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9b c0       	rjmp	.+310    	; 0x254 <__bad_interrupt>
     11e:	00 00       	nop
     120:	99 c0       	rjmp	.+306    	; 0x254 <__bad_interrupt>
     122:	00 00       	nop
     124:	97 c0       	rjmp	.+302    	; 0x254 <__bad_interrupt>
     126:	00 00       	nop
     128:	95 c0       	rjmp	.+298    	; 0x254 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	93 c0       	rjmp	.+294    	; 0x254 <__bad_interrupt>
     12e:	00 00       	nop
     130:	91 c0       	rjmp	.+290    	; 0x254 <__bad_interrupt>
     132:	00 00       	nop
     134:	8f c0       	rjmp	.+286    	; 0x254 <__bad_interrupt>
     136:	00 00       	nop
     138:	8d c0       	rjmp	.+282    	; 0x254 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8b c0       	rjmp	.+278    	; 0x254 <__bad_interrupt>
     13e:	00 00       	nop
     140:	89 c0       	rjmp	.+274    	; 0x254 <__bad_interrupt>
     142:	00 00       	nop
     144:	87 c0       	rjmp	.+270    	; 0x254 <__bad_interrupt>
     146:	00 00       	nop
     148:	85 c0       	rjmp	.+266    	; 0x254 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	83 c0       	rjmp	.+262    	; 0x254 <__bad_interrupt>
     14e:	00 00       	nop
     150:	81 c0       	rjmp	.+258    	; 0x254 <__bad_interrupt>
     152:	00 00       	nop
     154:	7f c0       	rjmp	.+254    	; 0x254 <__bad_interrupt>
     156:	00 00       	nop
     158:	7d c0       	rjmp	.+250    	; 0x254 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7b c0       	rjmp	.+246    	; 0x254 <__bad_interrupt>
     15e:	00 00       	nop
     160:	79 c0       	rjmp	.+242    	; 0x254 <__bad_interrupt>
     162:	00 00       	nop
     164:	77 c0       	rjmp	.+238    	; 0x254 <__bad_interrupt>
     166:	00 00       	nop
     168:	75 c0       	rjmp	.+234    	; 0x254 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	73 c0       	rjmp	.+230    	; 0x254 <__bad_interrupt>
     16e:	00 00       	nop
     170:	71 c0       	rjmp	.+226    	; 0x254 <__bad_interrupt>
     172:	00 00       	nop
     174:	6f c0       	rjmp	.+222    	; 0x254 <__bad_interrupt>
     176:	00 00       	nop
     178:	6d c0       	rjmp	.+218    	; 0x254 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6b c0       	rjmp	.+214    	; 0x254 <__bad_interrupt>
     17e:	00 00       	nop
     180:	69 c0       	rjmp	.+210    	; 0x254 <__bad_interrupt>
     182:	00 00       	nop
     184:	67 c0       	rjmp	.+206    	; 0x254 <__bad_interrupt>
     186:	00 00       	nop
     188:	65 c0       	rjmp	.+202    	; 0x254 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	63 c0       	rjmp	.+198    	; 0x254 <__bad_interrupt>
     18e:	00 00       	nop
     190:	61 c0       	rjmp	.+194    	; 0x254 <__bad_interrupt>
     192:	00 00       	nop
     194:	5f c0       	rjmp	.+190    	; 0x254 <__bad_interrupt>
     196:	00 00       	nop
     198:	5d c0       	rjmp	.+186    	; 0x254 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5b c0       	rjmp	.+182    	; 0x254 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	59 c0       	rjmp	.+178    	; 0x254 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	57 c0       	rjmp	.+174    	; 0x254 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	55 c0       	rjmp	.+170    	; 0x254 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	53 c0       	rjmp	.+166    	; 0x254 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	51 c0       	rjmp	.+162    	; 0x254 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4f c0       	rjmp	.+158    	; 0x254 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4d c0       	rjmp	.+154    	; 0x254 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4b c0       	rjmp	.+150    	; 0x254 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	49 c0       	rjmp	.+146    	; 0x254 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	47 c0       	rjmp	.+142    	; 0x254 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	45 c0       	rjmp	.+138    	; 0x254 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	43 c0       	rjmp	.+134    	; 0x254 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	41 c0       	rjmp	.+130    	; 0x254 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3f c0       	rjmp	.+126    	; 0x254 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3d c0       	rjmp	.+122    	; 0x254 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3b c0       	rjmp	.+118    	; 0x254 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	39 c0       	rjmp	.+114    	; 0x254 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	37 c0       	rjmp	.+110    	; 0x254 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	35 c0       	rjmp	.+106    	; 0x254 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	33 c0       	rjmp	.+102    	; 0x254 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__vector_125>
     1f8:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__vector_126>
     1fc:	75 0a       	sbc	r7, r21
     1fe:	78 0a       	sbc	r7, r24
     200:	7b 0a       	sbc	r7, r27
     202:	7e 0a       	sbc	r7, r30
     204:	81 0a       	sbc	r8, r17
     206:	84 0a       	sbc	r8, r20
     208:	87 0a       	sbc	r8, r23

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	11 e2       	ldi	r17, 0x21	; 33
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	e0 ef       	ldi	r30, 0xF0	; 240
     22a:	f9 e2       	ldi	r31, 0x29	; 41
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	a6 39       	cpi	r26, 0x96	; 150
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	24 e2       	ldi	r18, 0x24	; 36
     240:	a6 e9       	ldi	r26, 0x96	; 150
     242:	b1 e2       	ldi	r27, 0x21	; 33
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a5 31       	cpi	r26, 0x15	; 21
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	61 d1       	rcall	.+706    	; 0x512 <main>
     250:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <_exit>

00000254 <__bad_interrupt>:
     254:	d5 ce       	rjmp	.-598    	; 0x0 <__vectors>

00000256 <uart_putchar>:
	
	CS_DISABLE();
	//_delay_ms(25);
	return;	
	
}
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	87 c4       	rjmp	.+2318   	; 0xb68 <udi_cdc_putc>
     25a:	08 95       	ret

0000025c <initSPI>:
     25c:	68 e0       	ldi	r22, 0x08	; 8
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	0e 94 89 11 	call	0x2312	; 0x2312 <sysclk_enable_module>
     264:	e0 e4       	ldi	r30, 0x40	; 64
     266:	f6 e0       	ldi	r31, 0x06	; 6
     268:	80 eb       	ldi	r24, 0xB0	; 176
     26a:	81 83       	std	Z+1, r24	; 0x01
     26c:	80 e4       	ldi	r24, 0x40	; 64
     26e:	82 83       	std	Z+2, r24	; 0x02
     270:	80 ed       	ldi	r24, 0xD0	; 208
     272:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     276:	08 95       	ret

00000278 <sendSPI>:
     278:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     27c:	e0 ec       	ldi	r30, 0xC0	; 192
     27e:	f8 e0       	ldi	r31, 0x08	; 8
     280:	82 81       	ldd	r24, Z+2	; 0x02
     282:	88 23       	and	r24, r24
     284:	ec f7       	brge	.-6      	; 0x280 <sendSPI+0x8>
     286:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
     28a:	08 95       	ret

0000028c <sendDummy>:
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	f4 cf       	rjmp	.-24     	; 0x278 <sendSPI>
     290:	08 95       	ret

00000292 <memSendAddress>:
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	c6 2f       	mov	r28, r22
     298:	d7 2f       	mov	r29, r23
     29a:	ee df       	rcall	.-36     	; 0x278 <sendSPI>
     29c:	8d 2f       	mov	r24, r29
     29e:	ec df       	rcall	.-40     	; 0x278 <sendSPI>
     2a0:	8c 2f       	mov	r24, r28
     2a2:	ea df       	rcall	.-44     	; 0x278 <sendSPI>
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <getMemStatus>:
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	c0 e4       	ldi	r28, 0x40	; 64
     2b2:	d6 e0       	ldi	r29, 0x06	; 6
     2b4:	10 e1       	ldi	r17, 0x10	; 16
     2b6:	1d 83       	std	Y+5, r17	; 0x05
     2b8:	1e 83       	std	Y+6, r17	; 0x06
     2ba:	85 e0       	ldi	r24, 0x05	; 5
     2bc:	dd df       	rcall	.-70     	; 0x278 <sendSPI>
     2be:	e6 df       	rcall	.-52     	; 0x28c <sendDummy>
     2c0:	1d 83       	std	Y+5, r17	; 0x05
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	08 95       	ret

000002ca <memEnableWrite>:
     2ca:	86 ed       	ldi	r24, 0xD6	; 214
     2cc:	90 e2       	ldi	r25, 0x20	; 32
     2ce:	0e 94 32 12 	call	0x2464	; 0x2464 <puts>
     2d2:	e0 e4       	ldi	r30, 0x40	; 64
     2d4:	f6 e0       	ldi	r31, 0x06	; 6
     2d6:	80 e1       	ldi	r24, 0x10	; 16
     2d8:	85 83       	std	Z+5, r24	; 0x05
     2da:	86 83       	std	Z+6, r24	; 0x06
     2dc:	86 e0       	ldi	r24, 0x06	; 6
     2de:	cc df       	rcall	.-104    	; 0x278 <sendSPI>
     2e0:	e4 df       	rcall	.-56     	; 0x2aa <getMemStatus>
     2e2:	81 ff       	sbrs	r24, 1
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <memEnableWrite+0x16>
     2e6:	80 e1       	ldi	r24, 0x10	; 16
     2e8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     2ec:	08 95       	ret

000002ee <memEraseSector>:
     2ee:	cf 92       	push	r12
     2f0:	df 92       	push	r13
     2f2:	ef 92       	push	r14
     2f4:	ff 92       	push	r15
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	6b 01       	movw	r12, r22
     2fe:	7c 01       	movw	r14, r24
     300:	d4 df       	rcall	.-88     	; 0x2aa <getMemStatus>
     302:	80 fd       	sbrc	r24, 0
     304:	fd cf       	rjmp	.-6      	; 0x300 <memEraseSector+0x12>
     306:	e1 df       	rcall	.-62     	; 0x2ca <memEnableWrite>
     308:	c0 e4       	ldi	r28, 0x40	; 64
     30a:	d6 e0       	ldi	r29, 0x06	; 6
     30c:	10 e1       	ldi	r17, 0x10	; 16
     30e:	1d 83       	std	Y+5, r17	; 0x05
     310:	1e 83       	std	Y+6, r17	; 0x06
     312:	80 e2       	ldi	r24, 0x20	; 32
     314:	b1 df       	rcall	.-158    	; 0x278 <sendSPI>
     316:	c7 01       	movw	r24, r14
     318:	b6 01       	movw	r22, r12
     31a:	bb df       	rcall	.-138    	; 0x292 <memSendAddress>
     31c:	1d 83       	std	Y+5, r17	; 0x05
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	ff 90       	pop	r15
     326:	ef 90       	pop	r14
     328:	df 90       	pop	r13
     32a:	cf 90       	pop	r12
     32c:	08 95       	ret

0000032e <memRead256ToStdOut>:
     32e:	5f 92       	push	r5
     330:	6f 92       	push	r6
     332:	7f 92       	push	r7
     334:	8f 92       	push	r8
     336:	9f 92       	push	r9
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	60 97       	sbiw	r28, 0x10	; 16
     352:	cd bf       	out	0x3d, r28	; 61
     354:	de bf       	out	0x3e, r29	; 62
     356:	6b 01       	movw	r12, r22
     358:	7c 01       	movw	r14, r24
     35a:	a7 df       	rcall	.-178    	; 0x2aa <getMemStatus>
     35c:	80 fd       	sbrc	r24, 0
     35e:	fd cf       	rjmp	.-6      	; 0x35a <memRead256ToStdOut+0x2c>
     360:	e0 e4       	ldi	r30, 0x40	; 64
     362:	f6 e0       	ldi	r31, 0x06	; 6
     364:	80 e1       	ldi	r24, 0x10	; 16
     366:	85 83       	std	Z+5, r24	; 0x05
     368:	86 83       	std	Z+6, r24	; 0x06
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	85 df       	rcall	.-246    	; 0x278 <sendSPI>
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	8f df       	rcall	.-226    	; 0x292 <memSendAddress>
     374:	68 94       	set
     376:	77 24       	eor	r7, r7
     378:	75 f8       	bld	r7, 5
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	4c 01       	movw	r8, r24
     380:	5e 01       	movw	r10, r28
     382:	91 e1       	ldi	r25, 0x11	; 17
     384:	a9 0e       	add	r10, r25
     386:	b1 1c       	adc	r11, r1
     388:	58 2c       	mov	r5, r8
     38a:	69 2c       	mov	r6, r9
     38c:	0f 2e       	mov	r0, r31
     38e:	f6 ee       	ldi	r31, 0xE6	; 230
     390:	cf 2e       	mov	r12, r31
     392:	f0 e2       	ldi	r31, 0x20	; 32
     394:	df 2e       	mov	r13, r31
     396:	f0 2d       	mov	r31, r0
     398:	25 c0       	rjmp	.+74     	; 0x3e4 <memRead256ToStdOut+0xb6>
     39a:	78 df       	rcall	.-272    	; 0x28c <sendDummy>
     39c:	f8 01       	movw	r30, r16
     39e:	81 93       	st	Z+, r24
     3a0:	8f 01       	movw	r16, r30
     3a2:	1f 92       	push	r1
     3a4:	8f 93       	push	r24
     3a6:	df 92       	push	r13
     3a8:	cf 92       	push	r12
     3aa:	0e 94 1a 12 	call	0x2434	; 0x2434 <printf>
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0a 15       	cp	r16, r10
     3b8:	1b 05       	cpc	r17, r11
     3ba:	79 f7       	brne	.-34     	; 0x39a <memRead256ToStdOut+0x6c>
     3bc:	89 e0       	ldi	r24, 0x09	; 9
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 2d 12 	call	0x245a	; 0x245a <putchar>
     3c4:	f7 01       	movw	r30, r14
     3c6:	81 91       	ld	r24, Z+
     3c8:	7f 01       	movw	r14, r30
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 2d 12 	call	0x245a	; 0x245a <putchar>
     3d0:	ea 14       	cp	r14, r10
     3d2:	fb 04       	cpc	r15, r11
     3d4:	b9 f7       	brne	.-18     	; 0x3c4 <memRead256ToStdOut+0x96>
     3d6:	86 e0       	ldi	r24, 0x06	; 6
     3d8:	91 e2       	ldi	r25, 0x21	; 33
     3da:	0e 94 32 12 	call	0x2464	; 0x2464 <puts>
     3de:	7a 94       	dec	r7
     3e0:	77 20       	and	r7, r7
     3e2:	21 f0       	breq	.+8      	; 0x3ec <memRead256ToStdOut+0xbe>
     3e4:	74 01       	movw	r14, r8
     3e6:	05 2d       	mov	r16, r5
     3e8:	16 2d       	mov	r17, r6
     3ea:	d7 cf       	rjmp	.-82     	; 0x39a <memRead256ToStdOut+0x6c>
     3ec:	80 e1       	ldi	r24, 0x10	; 16
     3ee:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     3f2:	60 96       	adiw	r28, 0x10	; 16
     3f4:	cd bf       	out	0x3d, r28	; 61
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	9f 90       	pop	r9
     40e:	8f 90       	pop	r8
     410:	7f 90       	pop	r7
     412:	6f 90       	pop	r6
     414:	5f 90       	pop	r5
     416:	08 95       	ret

00000418 <memWriteString>:

void memWriteString(uint32_t address, uint8_t *str)
{
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	6b 01       	movw	r12, r22
     426:	7c 01       	movw	r14, r24
     428:	ea 01       	movw	r28, r20
	while((getMemStatus() & MEM_STAT_BUSY)) {}
     42a:	3f df       	rcall	.-386    	; 0x2aa <getMemStatus>
     42c:	80 fd       	sbrc	r24, 0
     42e:	fd cf       	rjmp	.-6      	; 0x42a <memWriteString+0x12>
	
	memEnableWrite();
     430:	4c df       	rcall	.-360    	; 0x2ca <memEnableWrite>

	CS_DISABLE();
     432:	e0 e4       	ldi	r30, 0x40	; 64
     434:	f6 e0       	ldi	r31, 0x06	; 6
     436:	80 e1       	ldi	r24, 0x10	; 16
     438:	85 83       	std	Z+5, r24	; 0x05
	//_delay_ms(1);
	CS_ENABLE();
     43a:	86 83       	std	Z+6, r24	; 0x06
	
	sendSPI(MEM_WRITE);
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	1c df       	rcall	.-456    	; 0x278 <sendSPI>
	memSendAddress(address);
     440:	c7 01       	movw	r24, r14
     442:	b6 01       	movw	r22, r12
     444:	26 df       	rcall	.-436    	; 0x292 <memSendAddress>
	
	while(*str)
     446:	88 81       	ld	r24, Y
     448:	88 23       	and	r24, r24
     44a:	29 f0       	breq	.+10     	; 0x456 <memWriteString+0x3e>
     44c:	21 96       	adiw	r28, 0x01	; 1
	{
		sendSPI(*(str++));
     44e:	14 df       	rcall	.-472    	; 0x278 <sendSPI>
	CS_ENABLE();
	
	sendSPI(MEM_WRITE);
	memSendAddress(address);
	
	while(*str)
     450:	89 91       	ld	r24, Y+
     452:	81 11       	cpse	r24, r1
     454:	fc cf       	rjmp	.-8      	; 0x44e <memWriteString+0x36>
	{
		sendSPI(*(str++));
	}
	
	CS_DISABLE();
     456:	80 e1       	ldi	r24, 0x10	; 16
     458:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	//_delay_ms(25);
	return;
	
}
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <TESTWriteMem>:

void TESTWriteMem()
{
	uint32_t address = 0x00001000;
	uint8_t data[17] = {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00};
	printf("Testing Write\r\n");
     46a:	8c ee       	ldi	r24, 0xEC	; 236
     46c:	90 e2       	ldi	r25, 0x20	; 32
     46e:	0e 94 32 12 	call	0x2464	; 0x2464 <puts>
	printf("Status: 0x%02x\r\n", getMemStatus());
     472:	1b df       	rcall	.-458    	; 0x2aa <getMemStatus>
     474:	1f 92       	push	r1
     476:	8f 93       	push	r24
     478:	8c e7       	ldi	r24, 0x7C	; 124
     47a:	91 e2       	ldi	r25, 0x21	; 33
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	0e 94 1a 12 	call	0x2434	; 0x2434 <printf>
	printf("First Erase\r\n");
     484:	8b ef       	ldi	r24, 0xFB	; 251
     486:	90 e2       	ldi	r25, 0x20	; 32
     488:	0e 94 32 12 	call	0x2464	; 0x2464 <puts>
	memEraseSector(address);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	70 e1       	ldi	r23, 0x10	; 16
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	2c df       	rcall	.-424    	; 0x2ee <memEraseSector>

	printf("Read 256 bytes to confirm erase\r\n");
     496:	88 e0       	ldi	r24, 0x08	; 8
     498:	91 e2       	ldi	r25, 0x21	; 33
     49a:	0e 94 32 12 	call	0x2464	; 0x2464 <puts>
	memRead256ToStdOut(address);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	70 e1       	ldi	r23, 0x10	; 16
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	43 df       	rcall	.-378    	; 0x32e <memRead256ToStdOut>
	
	//printf("Write all 'U'\r\n");
	//memWrite256(address, 'U');
	
	printf("Write string\r\n");
     4a8:	89 e2       	ldi	r24, 0x29	; 41
     4aa:	91 e2       	ldi	r25, 0x21	; 33
     4ac:	0e 94 32 12 	call	0x2464	; 0x2464 <puts>
	memWriteString(address, "Eat, Sleep,     Rave, Repeat.");
     4b0:	47 e3       	ldi	r20, 0x37	; 55
     4b2:	51 e2       	ldi	r21, 0x21	; 33
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e1       	ldi	r23, 0x10	; 16
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ad df       	rcall	.-166    	; 0x418 <memWriteString>
	
	printf("Read 256 bytes to confirm write\r\n");
     4be:	85 e5       	ldi	r24, 0x55	; 85
     4c0:	91 e2       	ldi	r25, 0x21	; 33
     4c2:	0e 94 32 12 	call	0x2464	; 0x2464 <puts>
	memRead256ToStdOut(address);
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e1       	ldi	r23, 0x10	; 16
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	2f df       	rcall	.-418    	; 0x32e <memRead256ToStdOut>
	
	printf("Done. Status: 0x%02x\r\n", getMemStatus());
     4d0:	ec de       	rcall	.-552    	; 0x2aa <getMemStatus>
     4d2:	1f 92       	push	r1
     4d4:	8f 93       	push	r24
     4d6:	86 e7       	ldi	r24, 0x76	; 118
     4d8:	91 e2       	ldi	r25, 0x21	; 33
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	0e 94 1a 12 	call	0x2434	; 0x2434 <printf>
     4e2:	8d b7       	in	r24, 0x3d	; 61
     4e4:	9e b7       	in	r25, 0x3e	; 62
     4e6:	08 96       	adiw	r24, 0x08	; 8
     4e8:	8d bf       	out	0x3d, r24	; 61
     4ea:	9e bf       	out	0x3e, r25	; 62
     4ec:	08 95       	ret

000004ee <my_callback_cdc_enable>:
}

bool my_callback_cdc_enable(void)
{
	return true;
}
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	08 95       	ret

000004f2 <my_callback_cdc_disable>:

void my_callback_cdc_disable(void)
{
     4f2:	08 95       	ret

000004f4 <my_callback_rx_notify>:

}

void my_callback_rx_notify(uint8_t port)
{
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
	uint8_t data = udi_cdc_getc();
     4f8:	ae d2       	rcall	.+1372   	; 0xa56 <udi_cdc_getc>
     4fa:	ec 01       	movw	r28, r24

	udi_cdc_putc(data);
     4fc:	99 27       	eor	r25, r25
     4fe:	34 d3       	rcall	.+1640   	; 0xb68 <udi_cdc_putc>
	
	if (data == 'a')
     500:	c1 36       	cpi	r28, 0x61	; 97
     502:	19 f4       	brne	.+6      	; 0x50a <my_callback_rx_notify+0x16>
	{
		_runTest = 0xFF;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <__data_end>
	}
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <my_callback_tx_empty_notify>:

void my_callback_tx_empty_notify(uint8_t port)
{
     510:	08 95       	ret

00000512 <main>:
}

int main(void)
{

	CS_DISABLE();
     512:	80 e1       	ldi	r24, 0x10	; 16
     514:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	
	cli();
     518:	f8 94       	cli

	sysclk_init();
     51a:	0e 94 4a 11 	call	0x2294	; 0x2294 <sysclk_init>
	udc_start();
     51e:	0d d4       	rcall	.+2074   	; 0xd3a <udc_start>
	initSPI();
     520:	9d de       	rcall	.-710    	; 0x25c <initSPI>
	
	stdout = &mystdout;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e2       	ldi	r25, 0x20	; 32
     526:	80 93 11 24 	sts	0x2411, r24	; 0x802411 <__iob+0x2>
     52a:	90 93 12 24 	sts	0x2412, r25	; 0x802412 <__iob+0x3>
	
	irq_initialize_vectors();
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>


	sei();
     534:	78 94       	sei

	while(1)
	{
		if (_runTest)
     536:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <__data_end>
     53a:	88 23       	and	r24, r24
     53c:	e1 f3       	breq	.-8      	; 0x536 <main+0x24>
		{
			TESTWriteMem();
     53e:	95 df       	rcall	.-214    	; 0x46a <TESTWriteMem>
			_runTest = 0x00;
     540:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <__data_end>
     544:	f8 cf       	rjmp	.-16     	; 0x536 <main+0x24>

00000546 <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     546:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <udi_cdc_nb_comm_enabled>
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	80 93 ac 22 	sts	0x22AC, r24	; 0x8022ac <udi_cdc_nb_comm_enabled>
     550:	08 95       	ret

00000552 <udi_cdc_data_setup>:
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	08 95       	ret

00000556 <udi_cdc_getsetting>:
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	08 95       	ret

0000055a <udi_cdc_comm_setup>:
     55a:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <udd_g_ctrlreq>
     55e:	88 23       	and	r24, r24
     560:	cc f4       	brge	.+50     	; 0x594 <udi_cdc_comm_setup+0x3a>
     562:	80 76       	andi	r24, 0x60	; 96
     564:	80 32       	cpi	r24, 0x20	; 32
     566:	b9 f5       	brne	.+110    	; 0x5d6 <udi_cdc_comm_setup+0x7c>
     568:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
     56c:	81 32       	cpi	r24, 0x21	; 33
     56e:	a9 f5       	brne	.+106    	; 0x5da <udi_cdc_comm_setup+0x80>
     570:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
     574:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
     578:	07 97       	sbiw	r24, 0x07	; 7
     57a:	89 f5       	brne	.+98     	; 0x5de <udi_cdc_comm_setup+0x84>
     57c:	e9 ef       	ldi	r30, 0xF9	; 249
     57e:	f3 e2       	ldi	r31, 0x23	; 35
     580:	8a eb       	ldi	r24, 0xBA	; 186
     582:	92 e2       	ldi	r25, 0x22	; 34
     584:	80 87       	std	Z+8, r24	; 0x08
     586:	91 87       	std	Z+9, r25	; 0x09
     588:	87 e0       	ldi	r24, 0x07	; 7
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	82 87       	std	Z+10, r24	; 0x0a
     58e:	93 87       	std	Z+11, r25	; 0x0b
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	08 95       	ret
     594:	80 76       	andi	r24, 0x60	; 96
     596:	80 32       	cpi	r24, 0x20	; 32
     598:	21 f5       	brne	.+72     	; 0x5e2 <udi_cdc_comm_setup+0x88>
     59a:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
     59e:	80 32       	cpi	r24, 0x20	; 32
     5a0:	21 f0       	breq	.+8      	; 0x5aa <udi_cdc_comm_setup+0x50>
     5a2:	82 32       	cpi	r24, 0x22	; 34
     5a4:	01 f1       	breq	.+64     	; 0x5e6 <udi_cdc_comm_setup+0x8c>
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	08 95       	ret
     5aa:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
     5ae:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
     5b2:	07 97       	sbiw	r24, 0x07	; 7
     5b4:	d1 f4       	brne	.+52     	; 0x5ea <udi_cdc_comm_setup+0x90>
     5b6:	e9 ef       	ldi	r30, 0xF9	; 249
     5b8:	f3 e2       	ldi	r31, 0x23	; 35
     5ba:	87 ef       	ldi	r24, 0xF7	; 247
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	84 87       	std	Z+12, r24	; 0x0c
     5c0:	95 87       	std	Z+13, r25	; 0x0d
     5c2:	8a eb       	ldi	r24, 0xBA	; 186
     5c4:	92 e2       	ldi	r25, 0x22	; 34
     5c6:	80 87       	std	Z+8, r24	; 0x08
     5c8:	91 87       	std	Z+9, r25	; 0x09
     5ca:	87 e0       	ldi	r24, 0x07	; 7
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	82 87       	std	Z+10, r24	; 0x0a
     5d0:	93 87       	std	Z+11, r25	; 0x0b
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	08 95       	ret
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	08 95       	ret
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	08 95       	ret
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	08 95       	ret
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	08 95       	ret
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	08 95       	ret
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	08 95       	ret

000005ee <udi_cdc_line_coding_received>:
     5ee:	08 95       	ret

000005f0 <udi_cdc_comm_enable>:
     5f0:	10 92 ac 22 	sts	0x22AC, r1	; 0x8022ac <udi_cdc_nb_comm_enabled>
     5f4:	10 92 b8 22 	sts	0x22B8, r1	; 0x8022b8 <udi_cdc_state>
     5f8:	10 92 b9 22 	sts	0x22B9, r1	; 0x8022b9 <udi_cdc_state+0x1>
     5fc:	ee ea       	ldi	r30, 0xAE	; 174
     5fe:	f2 e2       	ldi	r31, 0x22	; 34
     600:	81 ea       	ldi	r24, 0xA1	; 161
     602:	80 83       	st	Z, r24
     604:	80 e2       	ldi	r24, 0x20	; 32
     606:	81 83       	std	Z+1, r24	; 0x01
     608:	12 82       	std	Z+2, r1	; 0x02
     60a:	13 82       	std	Z+3, r1	; 0x03
     60c:	14 82       	std	Z+4, r1	; 0x04
     60e:	15 82       	std	Z+5, r1	; 0x05
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	86 83       	std	Z+6, r24	; 0x06
     616:	97 83       	std	Z+7, r25	; 0x07
     618:	10 86       	std	Z+8, r1	; 0x08
     61a:	11 86       	std	Z+9, r1	; 0x09
     61c:	ea eb       	ldi	r30, 0xBA	; 186
     61e:	f2 e2       	ldi	r31, 0x22	; 34
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	92 ec       	ldi	r25, 0xC2	; 194
     624:	a1 e0       	ldi	r26, 0x01	; 1
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	80 83       	st	Z, r24
     62a:	91 83       	std	Z+1, r25	; 0x01
     62c:	a2 83       	std	Z+2, r26	; 0x02
     62e:	b3 83       	std	Z+3, r27	; 0x03
     630:	14 82       	std	Z+4, r1	; 0x04
     632:	15 82       	std	Z+5, r1	; 0x05
     634:	88 e0       	ldi	r24, 0x08	; 8
     636:	86 83       	std	Z+6, r24	; 0x06
     638:	5a df       	rcall	.-332    	; 0x4ee <my_callback_cdc_enable>
     63a:	88 23       	and	r24, r24
     63c:	29 f0       	breq	.+10     	; 0x648 <udi_cdc_comm_enable+0x58>
     63e:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <udi_cdc_nb_comm_enabled>
     642:	9f 5f       	subi	r25, 0xFF	; 255
     644:	90 93 ac 22 	sts	0x22AC, r25	; 0x8022ac <udi_cdc_nb_comm_enabled>
     648:	08 95       	ret

0000064a <udi_cdc_tx_send>:
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	1f 92       	push	r1
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <udi_cdc_tx_trans_ongoing>
     65e:	81 11       	cpse	r24, r1
     660:	9e c0       	rjmp	.+316    	; 0x79e <udi_cdc_tx_send+0x154>
     662:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <udd_is_high_speed>
     666:	88 23       	and	r24, r24
     668:	51 f0       	breq	.+20     	; 0x67e <udi_cdc_tx_send+0x34>
     66a:	00 91 9b 21 	lds	r16, 0x219B	; 0x80219b <udi_cdc_tx_sof_num>
     66e:	10 91 9c 21 	lds	r17, 0x219C	; 0x80219c <udi_cdc_tx_sof_num+0x1>
     672:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <udd_get_micro_frame_number>
     676:	08 17       	cp	r16, r24
     678:	19 07       	cpc	r17, r25
     67a:	59 f4       	brne	.+22     	; 0x692 <udi_cdc_tx_send+0x48>
     67c:	90 c0       	rjmp	.+288    	; 0x79e <udi_cdc_tx_send+0x154>
     67e:	00 91 9b 21 	lds	r16, 0x219B	; 0x80219b <udi_cdc_tx_sof_num>
     682:	10 91 9c 21 	lds	r17, 0x219C	; 0x80219c <udi_cdc_tx_sof_num+0x1>
     686:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <udd_get_frame_number>
     68a:	08 17       	cp	r16, r24
     68c:	19 07       	cpc	r17, r25
     68e:	09 f4       	brne	.+2      	; 0x692 <udi_cdc_tx_send+0x48>
     690:	86 c0       	rjmp	.+268    	; 0x79e <udi_cdc_tx_send+0x154>
     692:	8f b7       	in	r24, 0x3f	; 63
     694:	89 83       	std	Y+1, r24	; 0x01
     696:	f8 94       	cli
     698:	19 81       	ldd	r17, Y+1	; 0x01
     69a:	00 91 9d 21 	lds	r16, 0x219D	; 0x80219d <udi_cdc_tx_buf_sel>
     69e:	e0 2f       	mov	r30, r16
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	e2 56       	subi	r30, 0x62	; 98
     6a8:	fe 4d       	sbci	r31, 0xDE	; 222
     6aa:	80 81       	ld	r24, Z
     6ac:	91 81       	ldd	r25, Z+1	; 0x01
     6ae:	89 2b       	or	r24, r25
     6b0:	09 f5       	brne	.+66     	; 0x6f4 <udi_cdc_tx_send+0xaa>
     6b2:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <sof_zlp_counter.4973>
     6b6:	90 91 98 21 	lds	r25, 0x2198	; 0x802198 <sof_zlp_counter.4973+0x1>
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <sof_zlp_counter.4973>
     6c0:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <sof_zlp_counter.4973+0x1>
     6c4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <udd_is_high_speed>
     6c8:	81 11       	cpse	r24, r1
     6ca:	07 c0       	rjmp	.+14     	; 0x6da <udi_cdc_tx_send+0x90>
     6cc:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <sof_zlp_counter.4973>
     6d0:	90 91 98 21 	lds	r25, 0x2198	; 0x802198 <sof_zlp_counter.4973+0x1>
     6d4:	84 36       	cpi	r24, 0x64	; 100
     6d6:	91 05       	cpc	r25, r1
     6d8:	58 f0       	brcs	.+22     	; 0x6f0 <udi_cdc_tx_send+0xa6>
     6da:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <udd_is_high_speed>
     6de:	88 23       	and	r24, r24
     6e0:	49 f0       	breq	.+18     	; 0x6f4 <udi_cdc_tx_send+0xaa>
     6e2:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <sof_zlp_counter.4973>
     6e6:	90 91 98 21 	lds	r25, 0x2198	; 0x802198 <sof_zlp_counter.4973+0x1>
     6ea:	80 32       	cpi	r24, 0x20	; 32
     6ec:	93 40       	sbci	r25, 0x03	; 3
     6ee:	10 f4       	brcc	.+4      	; 0x6f4 <udi_cdc_tx_send+0xaa>
     6f0:	1f bf       	out	0x3f, r17	; 63
     6f2:	55 c0       	rjmp	.+170    	; 0x79e <udi_cdc_tx_send+0x154>
     6f4:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <sof_zlp_counter.4973>
     6f8:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <sof_zlp_counter.4973+0x1>
     6fc:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <udi_cdc_tx_both_buf_to_send>
     700:	81 11       	cpse	r24, r1
     702:	06 c0       	rjmp	.+12     	; 0x710 <udi_cdc_tx_send+0xc6>
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	01 11       	cpse	r16, r1
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <udi_cdc_tx_buf_sel>
     70e:	04 c0       	rjmp	.+8      	; 0x718 <udi_cdc_tx_send+0xce>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	01 11       	cpse	r16, r1
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	08 2f       	mov	r16, r24
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_cdc_tx_trans_ongoing>
     71e:	1f bf       	out	0x3f, r17	; 63
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	f8 01       	movw	r30, r16
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	e2 56       	subi	r30, 0x62	; 98
     72a:	fe 4d       	sbci	r31, 0xDE	; 222
     72c:	ff 24       	eor	r15, r15
     72e:	f3 94       	inc	r15
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	91 05       	cpc	r25, r1
     738:	09 f4       	brne	.+2      	; 0x73c <udi_cdc_tx_send+0xf2>
     73a:	f1 2c       	mov	r15, r1
     73c:	ff 20       	and	r15, r15
     73e:	91 f0       	breq	.+36     	; 0x764 <udi_cdc_tx_send+0x11a>
     740:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <udd_is_high_speed>
     744:	88 23       	and	r24, r24
     746:	39 f0       	breq	.+14     	; 0x756 <udi_cdc_tx_send+0x10c>
     748:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <udd_get_micro_frame_number>
     74c:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <udi_cdc_tx_sof_num>
     750:	90 93 9c 21 	sts	0x219C, r25	; 0x80219c <udi_cdc_tx_sof_num+0x1>
     754:	0b c0       	rjmp	.+22     	; 0x76c <udi_cdc_tx_send+0x122>
     756:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <udd_get_frame_number>
     75a:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <udi_cdc_tx_sof_num>
     75e:	90 93 9c 21 	sts	0x219C, r25	; 0x80219c <udi_cdc_tx_sof_num+0x1>
     762:	04 c0       	rjmp	.+8      	; 0x76c <udi_cdc_tx_send+0x122>
     764:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <udi_cdc_tx_sof_num>
     768:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <udi_cdc_tx_sof_num+0x1>
     76c:	f8 01       	movw	r30, r16
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	e2 56       	subi	r30, 0x62	; 98
     774:	fe 4d       	sbci	r31, 0xDE	; 222
     776:	20 81       	ld	r18, Z
     778:	31 81       	ldd	r19, Z+1	; 0x01
     77a:	a8 01       	movw	r20, r16
     77c:	00 24       	eor	r0, r0
     77e:	56 95       	lsr	r21
     780:	47 95       	ror	r20
     782:	07 94       	ror	r0
     784:	56 95       	lsr	r21
     786:	47 95       	ror	r20
     788:	07 94       	ror	r0
     78a:	54 2f       	mov	r21, r20
     78c:	40 2d       	mov	r20, r0
     78e:	4e 55       	subi	r20, 0x5E	; 94
     790:	5e 4d       	sbci	r21, 0xDE	; 222
     792:	09 ed       	ldi	r16, 0xD9	; 217
     794:	13 e0       	ldi	r17, 0x03	; 3
     796:	6f 2d       	mov	r22, r15
     798:	81 e8       	ldi	r24, 0x81	; 129
     79a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <udd_ep_run>
     79e:	0f 90       	pop	r0
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	08 95       	ret

000007ac <udi_cdc_data_sof_notify>:
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	4d cf       	rjmp	.-358    	; 0x64a <udi_cdc_tx_send>
     7b0:	08 95       	ret

000007b2 <udi_cdc_data_sent>:
     7b2:	81 11       	cpse	r24, r1
     7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <udi_cdc_data_sent+0x36>
     7b6:	20 91 9d 21 	lds	r18, 0x219D	; 0x80219d <udi_cdc_tx_buf_sel>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	22 23       	and	r18, r18
     7c0:	11 f0       	breq	.+4      	; 0x7c6 <udi_cdc_data_sent+0x14>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	fc 01       	movw	r30, r24
     7cc:	e2 56       	subi	r30, 0x62	; 98
     7ce:	fe 4d       	sbci	r31, 0xDE	; 222
     7d0:	10 82       	st	Z, r1
     7d2:	11 82       	std	Z+1, r1	; 0x01
     7d4:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <udi_cdc_tx_both_buf_to_send>
     7d8:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_cdc_tx_trans_ongoing>
     7dc:	67 2b       	or	r22, r23
     7de:	11 f0       	breq	.+4      	; 0x7e4 <udi_cdc_data_sent+0x32>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	96 de       	rcall	.-724    	; 0x510 <my_callback_tx_empty_notify>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	31 cf       	rjmp	.-414    	; 0x64a <udi_cdc_tx_send>
     7e8:	08 95       	ret

000007ea <udi_cdc_data_disable>:
     7ea:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udi_cdc_nb_data_enabled>
     7ee:	81 50       	subi	r24, 0x01	; 1
     7f0:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udi_cdc_nb_data_enabled>
     7f4:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udi_cdc_nb_data_enabled>
     7f8:	7c de       	rcall	.-776    	; 0x4f2 <my_callback_cdc_disable>
     7fa:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <udi_cdc_data_running>
     7fe:	08 95       	ret

00000800 <udi_cdc_multi_get_nb_received_data>:
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	8f b7       	in	r24, 0x3f	; 63
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	f8 94       	cli
     810:	49 81       	ldd	r20, Y+1	; 0x01
     812:	20 91 23 22 	lds	r18, 0x2223	; 0x802223 <udi_cdc_rx_pos>
     816:	30 91 24 22 	lds	r19, 0x2224	; 0x802224 <udi_cdc_rx_pos+0x1>
     81a:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <udi_cdc_rx_buf_sel>
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	ee 0f       	add	r30, r30
     822:	ff 1f       	adc	r31, r31
     824:	ea 5d       	subi	r30, 0xDA	; 218
     826:	fd 4d       	sbci	r31, 0xDD	; 221
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	4f bf       	out	0x3f, r20	; 63
     82e:	82 1b       	sub	r24, r18
     830:	93 0b       	sbc	r25, r19
     832:	0f 90       	pop	r0
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <udi_cdc_multi_is_rx_ready>:
     83a:	e2 df       	rcall	.-60     	; 0x800 <udi_cdc_multi_get_nb_received_data>
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	89 2b       	or	r24, r25
     840:	09 f4       	brne	.+2      	; 0x844 <udi_cdc_multi_is_rx_ready+0xa>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	82 2f       	mov	r24, r18
     846:	08 95       	ret

00000848 <udi_cdc_rx_start>:
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	1f 92       	push	r1
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	8f b7       	in	r24, 0x3f	; 63
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	f8 94       	cli
     85c:	99 81       	ldd	r25, Y+1	; 0x01
     85e:	20 91 25 22 	lds	r18, 0x2225	; 0x802225 <udi_cdc_rx_buf_sel>
     862:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <udi_cdc_rx_trans_ongoing>
     866:	81 11       	cpse	r24, r1
     868:	10 c0       	rjmp	.+32     	; 0x88a <udi_cdc_rx_start+0x42>
     86a:	60 91 23 22 	lds	r22, 0x2223	; 0x802223 <udi_cdc_rx_pos>
     86e:	70 91 24 22 	lds	r23, 0x2224	; 0x802224 <udi_cdc_rx_pos+0x1>
     872:	02 2f       	mov	r16, r18
     874:	10 e0       	ldi	r17, 0x00	; 0
     876:	f8 01       	movw	r30, r16
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	ea 5d       	subi	r30, 0xDA	; 218
     87e:	fd 4d       	sbci	r31, 0xDD	; 221
     880:	40 81       	ld	r20, Z
     882:	51 81       	ldd	r21, Z+1	; 0x01
     884:	64 17       	cp	r22, r20
     886:	75 07       	cpc	r23, r21
     888:	18 f4       	brcc	.+6      	; 0x890 <udi_cdc_rx_start+0x48>
     88a:	9f bf       	out	0x3f, r25	; 63
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	27 c0       	rjmp	.+78     	; 0x8de <udi_cdc_rx_start+0x96>
     890:	10 92 23 22 	sts	0x2223, r1	; 0x802223 <udi_cdc_rx_pos>
     894:	10 92 24 22 	sts	0x2224, r1	; 0x802224 <udi_cdc_rx_pos+0x1>
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	21 11       	cpse	r18, r1
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	80 93 25 22 	sts	0x2225, r24	; 0x802225 <udi_cdc_rx_buf_sel>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <udi_cdc_rx_trans_ongoing>
     8a8:	9f bf       	out	0x3f, r25	; 63
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	c6 df       	rcall	.-116    	; 0x83a <udi_cdc_multi_is_rx_ready>
     8ae:	88 23       	and	r24, r24
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <udi_cdc_rx_start+0x6e>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	1f de       	rcall	.-962    	; 0x4f4 <my_callback_rx_notify>
     8b6:	a8 01       	movw	r20, r16
     8b8:	00 24       	eor	r0, r0
     8ba:	56 95       	lsr	r21
     8bc:	47 95       	ror	r20
     8be:	07 94       	ror	r0
     8c0:	56 95       	lsr	r21
     8c2:	47 95       	ror	r20
     8c4:	07 94       	ror	r0
     8c6:	54 2f       	mov	r21, r20
     8c8:	40 2d       	mov	r20, r0
     8ca:	46 5d       	subi	r20, 0xD6	; 214
     8cc:	5d 4d       	sbci	r21, 0xDD	; 221
     8ce:	07 ea       	ldi	r16, 0xA7	; 167
     8d0:	14 e0       	ldi	r17, 0x04	; 4
     8d2:	20 e4       	ldi	r18, 0x40	; 64
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <udd_ep_run>
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	08 95       	ret

000008ea <udi_cdc_data_enable>:
     8ea:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <udi_cdc_nb_data_enabled>
     8ee:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_cdc_tx_trans_ongoing>
     8f2:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <udi_cdc_tx_both_buf_to_send>
     8f6:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <udi_cdc_tx_buf_sel>
     8fa:	ee e9       	ldi	r30, 0x9E	; 158
     8fc:	f1 e2       	ldi	r31, 0x21	; 33
     8fe:	10 82       	st	Z, r1
     900:	11 82       	std	Z+1, r1	; 0x01
     902:	12 82       	std	Z+2, r1	; 0x02
     904:	13 82       	std	Z+3, r1	; 0x03
     906:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <udi_cdc_tx_sof_num>
     90a:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <udi_cdc_tx_sof_num+0x1>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	9c de       	rcall	.-712    	; 0x64a <udi_cdc_tx_send>
     912:	10 92 22 22 	sts	0x2222, r1	; 0x802222 <udi_cdc_rx_trans_ongoing>
     916:	10 92 25 22 	sts	0x2225, r1	; 0x802225 <udi_cdc_rx_buf_sel>
     91a:	e6 e2       	ldi	r30, 0x26	; 38
     91c:	f2 e2       	ldi	r31, 0x22	; 34
     91e:	10 82       	st	Z, r1
     920:	11 82       	std	Z+1, r1	; 0x01
     922:	12 82       	std	Z+2, r1	; 0x02
     924:	13 82       	std	Z+3, r1	; 0x03
     926:	10 92 23 22 	sts	0x2223, r1	; 0x802223 <udi_cdc_rx_pos>
     92a:	10 92 24 22 	sts	0x2224, r1	; 0x802224 <udi_cdc_rx_pos+0x1>
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	8b df       	rcall	.-234    	; 0x848 <udi_cdc_rx_start>
     932:	88 23       	and	r24, r24
     934:	59 f0       	breq	.+22     	; 0x94c <udi_cdc_data_enable+0x62>
     936:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udi_cdc_nb_data_enabled>
     93a:	9f 5f       	subi	r25, 0xFF	; 255
     93c:	90 93 ab 22 	sts	0x22AB, r25	; 0x8022ab <udi_cdc_nb_data_enabled>
     940:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udi_cdc_nb_data_enabled>
     944:	91 30       	cpi	r25, 0x01	; 1
     946:	11 f4       	brne	.+4      	; 0x94c <udi_cdc_data_enable+0x62>
     948:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <udi_cdc_data_running>
     94c:	08 95       	ret

0000094e <udi_cdc_data_received>:
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	81 11       	cpse	r24, r1
     954:	29 c0       	rjmp	.+82     	; 0x9a8 <udi_cdc_data_received+0x5a>
     956:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <udi_cdc_rx_buf_sel>
     95a:	e1 e0       	ldi	r30, 0x01	; 1
     95c:	81 11       	cpse	r24, r1
     95e:	e0 e0       	ldi	r30, 0x00	; 0
     960:	84 2f       	mov	r24, r20
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	a9 f4       	brne	.+42     	; 0x992 <udi_cdc_data_received+0x44>
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	00 24       	eor	r0, r0
     96c:	f6 95       	lsr	r31
     96e:	e7 95       	ror	r30
     970:	07 94       	ror	r0
     972:	f6 95       	lsr	r31
     974:	e7 95       	ror	r30
     976:	07 94       	ror	r0
     978:	fe 2f       	mov	r31, r30
     97a:	e0 2d       	mov	r30, r0
     97c:	af 01       	movw	r20, r30
     97e:	46 5d       	subi	r20, 0xD6	; 214
     980:	5d 4d       	sbci	r21, 0xDD	; 221
     982:	07 ea       	ldi	r16, 0xA7	; 167
     984:	14 e0       	ldi	r17, 0x04	; 4
     986:	20 e4       	ldi	r18, 0x40	; 64
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <udd_ep_run>
     990:	0b c0       	rjmp	.+22     	; 0x9a8 <udi_cdc_data_received+0x5a>
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ea 5d       	subi	r30, 0xDA	; 218
     99a:	fd 4d       	sbci	r31, 0xDD	; 221
     99c:	60 83       	st	Z, r22
     99e:	71 83       	std	Z+1, r23	; 0x01
     9a0:	10 92 22 22 	sts	0x2222, r1	; 0x802222 <udi_cdc_rx_trans_ongoing>
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	50 df       	rcall	.-352    	; 0x848 <udi_cdc_rx_start>
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	08 95       	ret

000009ae <udi_cdc_multi_getc>:
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	1f 92       	push	r1
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	11 e0       	ldi	r17, 0x01	; 1
     9c0:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udi_cdc_line_coding+0x6>
     9c4:	89 30       	cpi	r24, 0x09	; 9
     9c6:	09 f0       	breq	.+2      	; 0x9ca <udi_cdc_multi_getc+0x1c>
     9c8:	10 e0       	ldi	r17, 0x00	; 0
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	8f b7       	in	r24, 0x3f	; 63
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	f8 94       	cli
     9d4:	a9 81       	ldd	r26, Y+1	; 0x01
     9d6:	20 91 23 22 	lds	r18, 0x2223	; 0x802223 <udi_cdc_rx_pos>
     9da:	30 91 24 22 	lds	r19, 0x2224	; 0x802224 <udi_cdc_rx_pos+0x1>
     9de:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <udi_cdc_rx_buf_sel>
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	fc 01       	movw	r30, r24
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	ea 5d       	subi	r30, 0xDA	; 218
     9ec:	fd 4d       	sbci	r31, 0xDD	; 221
     9ee:	60 81       	ld	r22, Z
     9f0:	71 81       	ldd	r23, Z+1	; 0x01
     9f2:	af bf       	out	0x3f, r26	; 63
     9f4:	26 17       	cp	r18, r22
     9f6:	37 07       	cpc	r19, r23
     9f8:	30 f0       	brcs	.+12     	; 0xa06 <udi_cdc_multi_getc+0x58>
     9fa:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udi_cdc_data_running>
     9fe:	81 11       	cpse	r24, r1
     a00:	e6 cf       	rjmp	.-52     	; 0x9ce <udi_cdc_multi_getc+0x20>
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	21 c0       	rjmp	.+66     	; 0xa48 <udi_cdc_multi_getc+0x9a>
     a06:	fc 01       	movw	r30, r24
     a08:	00 24       	eor	r0, r0
     a0a:	f6 95       	lsr	r31
     a0c:	e7 95       	ror	r30
     a0e:	07 94       	ror	r0
     a10:	f6 95       	lsr	r31
     a12:	e7 95       	ror	r30
     a14:	07 94       	ror	r0
     a16:	fe 2f       	mov	r31, r30
     a18:	e0 2d       	mov	r30, r0
     a1a:	e2 0f       	add	r30, r18
     a1c:	f3 1f       	adc	r31, r19
     a1e:	e6 5d       	subi	r30, 0xD6	; 214
     a20:	fd 4d       	sbci	r31, 0xDD	; 221
     a22:	80 81       	ld	r24, Z
     a24:	7a 01       	movw	r14, r20
     a26:	e8 2a       	or	r14, r24
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	20 93 23 22 	sts	0x2223, r18	; 0x802223 <udi_cdc_rx_pos>
     a30:	30 93 24 22 	sts	0x2224, r19	; 0x802224 <udi_cdc_rx_pos+0x1>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	08 df       	rcall	.-496    	; 0x848 <udi_cdc_rx_start>
     a38:	11 23       	and	r17, r17
     a3a:	21 f0       	breq	.+8      	; 0xa44 <udi_cdc_multi_getc+0x96>
     a3c:	5e 2d       	mov	r21, r14
     a3e:	44 27       	eor	r20, r20
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	c5 cf       	rjmp	.-118    	; 0x9ce <udi_cdc_multi_getc+0x20>
     a44:	8e 2d       	mov	r24, r14
     a46:	9f 2d       	mov	r25, r15
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	08 95       	ret

00000a56 <udi_cdc_getc>:
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	aa cf       	rjmp	.-172    	; 0x9ae <udi_cdc_multi_getc>
     a5a:	08 95       	ret

00000a5c <udi_cdc_multi_get_free_tx_buffer>:
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	1f 92       	push	r1
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	8f b7       	in	r24, 0x3f	; 63
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	f8 94       	cli
     a6c:	99 81       	ldd	r25, Y+1	; 0x01
     a6e:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <udi_cdc_tx_buf_sel>
     a72:	e8 2f       	mov	r30, r24
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	e2 56       	subi	r30, 0x62	; 98
     a7c:	fe 4d       	sbci	r31, 0xDE	; 222
     a7e:	20 81       	ld	r18, Z
     a80:	31 81       	ldd	r19, Z+1	; 0x01
     a82:	20 34       	cpi	r18, 0x40	; 64
     a84:	31 05       	cpc	r19, r1
     a86:	89 f4       	brne	.+34     	; 0xaaa <udi_cdc_multi_get_free_tx_buffer+0x4e>
     a88:	40 91 9a 21 	lds	r20, 0x219A	; 0x80219a <udi_cdc_tx_trans_ongoing>
     a8c:	41 11       	cpse	r20, r1
     a8e:	0d c0       	rjmp	.+26     	; 0xaaa <udi_cdc_multi_get_free_tx_buffer+0x4e>
     a90:	40 91 99 21 	lds	r20, 0x2199	; 0x802199 <udi_cdc_tx_both_buf_to_send>
     a94:	41 11       	cpse	r20, r1
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <udi_cdc_multi_get_free_tx_buffer+0x4e>
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	20 93 99 21 	sts	0x2199, r18	; 0x802199 <udi_cdc_tx_both_buf_to_send>
     a9e:	81 11       	cpse	r24, r1
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	20 93 9d 21 	sts	0x219D, r18	; 0x80219d <udi_cdc_tx_buf_sel>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	9f bf       	out	0x3f, r25	; 63
     aac:	80 e4       	ldi	r24, 0x40	; 64
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	82 1b       	sub	r24, r18
     ab2:	93 0b       	sbc	r25, r19
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <udi_cdc_multi_is_tx_ready>:
     abc:	cf df       	rcall	.-98     	; 0xa5c <udi_cdc_multi_get_free_tx_buffer>
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	89 2b       	or	r24, r25
     ac2:	09 f4       	brne	.+2      	; 0xac6 <udi_cdc_multi_is_tx_ready+0xa>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	82 2f       	mov	r24, r18
     ac8:	08 95       	ret

00000aca <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	f6 2e       	mov	r15, r22
     adc:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     ade:	01 e0       	ldi	r16, 0x01	; 1
     ae0:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udi_cdc_line_coding+0x6>
     ae4:	89 30       	cpi	r24, 0x09	; 9
     ae6:	09 f0       	breq	.+2      	; 0xaea <udi_cdc_multi_putc+0x20>
     ae8:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	e7 df       	rcall	.-50     	; 0xabc <udi_cdc_multi_is_tx_ready>
     aee:	81 11       	cpse	r24, r1
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     af2:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udi_cdc_data_running>
     af6:	81 11       	cpse	r24, r1
     af8:	f8 cf       	rjmp	.-16     	; 0xaea <udi_cdc_multi_putc+0x20>
			return false;
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	2d c0       	rjmp	.+90     	; 0xb5a <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b00:	8f b7       	in	r24, 0x3f	; 63
     b02:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b04:	f8 94       	cli
	return flags;
     b06:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     b08:	e0 91 9d 21 	lds	r30, 0x219D	; 0x80219d <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	df 01       	movw	r26, r30
     b10:	aa 0f       	add	r26, r26
     b12:	bb 1f       	adc	r27, r27
     b14:	a2 56       	subi	r26, 0x62	; 98
     b16:	be 4d       	sbci	r27, 0xDE	; 222
     b18:	8d 91       	ld	r24, X+
     b1a:	9c 91       	ld	r25, X
     b1c:	11 97       	sbiw	r26, 0x01	; 1
     b1e:	ac 01       	movw	r20, r24
     b20:	4f 5f       	subi	r20, 0xFF	; 255
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	4d 93       	st	X+, r20
     b26:	5c 93       	st	X, r21
     b28:	00 24       	eor	r0, r0
     b2a:	f6 95       	lsr	r31
     b2c:	e7 95       	ror	r30
     b2e:	07 94       	ror	r0
     b30:	f6 95       	lsr	r31
     b32:	e7 95       	ror	r30
     b34:	07 94       	ror	r0
     b36:	fe 2f       	mov	r31, r30
     b38:	e0 2d       	mov	r30, r0
     b3a:	8e 0f       	add	r24, r30
     b3c:	9f 1f       	adc	r25, r31
     b3e:	fc 01       	movw	r30, r24
     b40:	ee 55       	subi	r30, 0x5E	; 94
     b42:	fe 4d       	sbci	r31, 0xDE	; 222
     b44:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b46:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     b48:	00 23       	and	r16, r16
     b4a:	29 f0       	breq	.+10     	; 0xb56 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     b4c:	f1 2e       	mov	r15, r17
     b4e:	11 0f       	add	r17, r17
     b50:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     b52:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     b54:	ca cf       	rjmp	.-108    	; 0xaea <udi_cdc_multi_putc+0x20>
	}
	return true;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
}
     b5a:	0f 90       	pop	r0
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	08 95       	ret

00000b68 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     b68:	bc 01       	movw	r22, r24
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	ae cf       	rjmp	.-164    	; 0xaca <udi_cdc_multi_putc>
}
     b6e:	08 95       	ret

00000b70 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     b70:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     b74:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     b78:	01 90       	ld	r0, Z+
     b7a:	f0 81       	ld	r31, Z
     b7c:	e0 2d       	mov	r30, r0
     b7e:	22 81       	ldd	r18, Z+2	; 0x02
     b80:	33 81       	ldd	r19, Z+3	; 0x03
     b82:	2e 0f       	add	r18, r30
     b84:	3f 1f       	adc	r19, r31
     b86:	fc 01       	movw	r30, r24
     b88:	40 81       	ld	r20, Z
     b8a:	e4 0f       	add	r30, r20
     b8c:	f1 1d       	adc	r31, r1
     b8e:	e2 17       	cp	r30, r18
     b90:	f3 07       	cpc	r31, r19
     b92:	b8 f4       	brcc	.+46     	; 0xbc2 <udc_next_desc_in_iface+0x52>
     b94:	81 81       	ldd	r24, Z+1	; 0x01
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	b9 f0       	breq	.+46     	; 0xbc8 <udc_next_desc_in_iface+0x58>
     b9a:	86 13       	cpse	r24, r22
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <udc_next_desc_in_iface+0x40>
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <udc_next_desc_in_iface+0x3a>
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	84 30       	cpi	r24, 0x04	; 4
     ba4:	a1 f0       	breq	.+40     	; 0xbce <udc_next_desc_in_iface+0x5e>
     ba6:	86 13       	cpse	r24, r22
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <udc_next_desc_in_iface+0x40>
     baa:	8e 2f       	mov	r24, r30
     bac:	9f 2f       	mov	r25, r31
     bae:	08 95       	ret
     bb0:	80 81       	ld	r24, Z
     bb2:	e8 0f       	add	r30, r24
     bb4:	f1 1d       	adc	r31, r1
     bb6:	e2 17       	cp	r30, r18
     bb8:	f3 07       	cpc	r31, r19
     bba:	90 f3       	brcs	.-28     	; 0xba0 <udc_next_desc_in_iface+0x30>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	08 95       	ret
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	08 95       	ret
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	08 95       	ret
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	08 95       	ret

00000bd4 <udc_valid_address>:
     bd4:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x2>
     bd8:	8f 77       	andi	r24, 0x7F	; 127
     bda:	59 c7       	rjmp	.+3762   	; 0x1a8e <udd_set_address>
     bdc:	08 95       	ret

00000bde <udc_update_iface_desc>:
     bde:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <udc_num_configuration>
     be2:	99 23       	and	r25, r25
     be4:	81 f1       	breq	.+96     	; 0xc46 <udc_update_iface_desc+0x68>
     be6:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     bea:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     bee:	01 90       	ld	r0, Z+
     bf0:	f0 81       	ld	r31, Z
     bf2:	e0 2d       	mov	r30, r0
     bf4:	94 81       	ldd	r25, Z+4	; 0x04
     bf6:	89 17       	cp	r24, r25
     bf8:	40 f5       	brcc	.+80     	; 0xc4a <udc_update_iface_desc+0x6c>
     bfa:	e0 93 c4 22 	sts	0x22C4, r30	; 0x8022c4 <udc_ptr_iface>
     bfe:	f0 93 c5 22 	sts	0x22C5, r31	; 0x8022c5 <udc_ptr_iface+0x1>
     c02:	22 81       	ldd	r18, Z+2	; 0x02
     c04:	33 81       	ldd	r19, Z+3	; 0x03
     c06:	2e 0f       	add	r18, r30
     c08:	3f 1f       	adc	r19, r31
     c0a:	e2 17       	cp	r30, r18
     c0c:	f3 07       	cpc	r31, r19
     c0e:	f8 f4       	brcc	.+62     	; 0xc4e <udc_update_iface_desc+0x70>
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	94 30       	cpi	r25, 0x04	; 4
     c14:	61 f4       	brne	.+24     	; 0xc2e <udc_update_iface_desc+0x50>
     c16:	92 81       	ldd	r25, Z+2	; 0x02
     c18:	98 13       	cpse	r25, r24
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <udc_update_iface_desc+0x50>
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	96 13       	cpse	r25, r22
     c20:	06 c0       	rjmp	.+12     	; 0xc2e <udc_update_iface_desc+0x50>
     c22:	e0 93 c4 22 	sts	0x22C4, r30	; 0x8022c4 <udc_ptr_iface>
     c26:	f0 93 c5 22 	sts	0x22C5, r31	; 0x8022c5 <udc_ptr_iface+0x1>
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	08 95       	ret
     c2e:	90 81       	ld	r25, Z
     c30:	e9 0f       	add	r30, r25
     c32:	f1 1d       	adc	r31, r1
     c34:	e2 17       	cp	r30, r18
     c36:	f3 07       	cpc	r31, r19
     c38:	58 f3       	brcs	.-42     	; 0xc10 <udc_update_iface_desc+0x32>
     c3a:	e0 93 c4 22 	sts	0x22C4, r30	; 0x8022c4 <udc_ptr_iface>
     c3e:	f0 93 c5 22 	sts	0x22C5, r31	; 0x8022c5 <udc_ptr_iface+0x1>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 95       	ret
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	08 95       	ret
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret

00000c52 <udc_iface_disable>:
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	c8 2f       	mov	r28, r24
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	be df       	rcall	.-132    	; 0xbde <udc_update_iface_desc>
     c62:	18 2f       	mov	r17, r24
     c64:	88 23       	and	r24, r24
     c66:	81 f1       	breq	.+96     	; 0xcc8 <udc_iface_disable+0x76>
     c68:	a0 91 c6 22 	lds	r26, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     c6c:	b0 91 c7 22 	lds	r27, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     c70:	ec 2f       	mov	r30, r28
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	12 96       	adiw	r26, 0x02	; 2
     c7a:	8d 91       	ld	r24, X+
     c7c:	9c 91       	ld	r25, X
     c7e:	13 97       	sbiw	r26, 0x03	; 3
     c80:	e8 0f       	add	r30, r24
     c82:	f9 1f       	adc	r31, r25
     c84:	e0 80       	ld	r14, Z
     c86:	f1 80       	ldd	r15, Z+1	; 0x01
     c88:	d7 01       	movw	r26, r14
     c8a:	16 96       	adiw	r26, 0x06	; 6
     c8c:	ed 91       	ld	r30, X+
     c8e:	fc 91       	ld	r31, X
     c90:	17 97       	sbiw	r26, 0x07	; 7
     c92:	19 95       	eicall
     c94:	68 2f       	mov	r22, r24
     c96:	8c 2f       	mov	r24, r28
     c98:	a2 df       	rcall	.-188    	; 0xbde <udc_update_iface_desc>
     c9a:	18 2f       	mov	r17, r24
     c9c:	88 23       	and	r24, r24
     c9e:	a1 f0       	breq	.+40     	; 0xcc8 <udc_iface_disable+0x76>
     ca0:	c0 91 c4 22 	lds	r28, 0x22C4	; 0x8022c4 <udc_ptr_iface>
     ca4:	d0 91 c5 22 	lds	r29, 0x22C5	; 0x8022c5 <udc_ptr_iface+0x1>
     ca8:	65 e0       	ldi	r22, 0x05	; 5
     caa:	ce 01       	movw	r24, r28
     cac:	61 df       	rcall	.-318    	; 0xb70 <udc_next_desc_in_iface>
     cae:	ec 01       	movw	r28, r24
     cb0:	89 2b       	or	r24, r25
     cb2:	21 f0       	breq	.+8      	; 0xcbc <udc_iface_disable+0x6a>
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <udd_ep_free>
     cba:	f6 cf       	rjmp	.-20     	; 0xca8 <udc_iface_disable+0x56>
     cbc:	d7 01       	movw	r26, r14
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	ed 91       	ld	r30, X+
     cc2:	fc 91       	ld	r31, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
     cc6:	19 95       	eicall
     cc8:	81 2f       	mov	r24, r17
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	08 95       	ret

00000cd6 <udc_iface_enable>:
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	18 2f       	mov	r17, r24
     cde:	7f df       	rcall	.-258    	; 0xbde <udc_update_iface_desc>
     ce0:	88 23       	and	r24, r24
     ce2:	39 f1       	breq	.+78     	; 0xd32 <udc_iface_enable+0x5c>
     ce4:	c0 91 c4 22 	lds	r28, 0x22C4	; 0x8022c4 <udc_ptr_iface>
     ce8:	d0 91 c5 22 	lds	r29, 0x22C5	; 0x8022c5 <udc_ptr_iface+0x1>
     cec:	65 e0       	ldi	r22, 0x05	; 5
     cee:	ce 01       	movw	r24, r28
     cf0:	3f df       	rcall	.-386    	; 0xb70 <udc_next_desc_in_iface>
     cf2:	ec 01       	movw	r28, r24
     cf4:	89 2b       	or	r24, r25
     cf6:	41 f0       	breq	.+16     	; 0xd08 <udc_iface_enable+0x32>
     cf8:	4c 81       	ldd	r20, Y+4	; 0x04
     cfa:	5d 81       	ldd	r21, Y+5	; 0x05
     cfc:	6b 81       	ldd	r22, Y+3	; 0x03
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	db d6       	rcall	.+3510   	; 0x1ab8 <udd_ep_alloc>
     d02:	81 11       	cpse	r24, r1
     d04:	f3 cf       	rjmp	.-26     	; 0xcec <udc_iface_enable+0x16>
     d06:	15 c0       	rjmp	.+42     	; 0xd32 <udc_iface_enable+0x5c>
     d08:	a0 91 c6 22 	lds	r26, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     d0c:	b0 91 c7 22 	lds	r27, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     d10:	e1 2f       	mov	r30, r17
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ee 0f       	add	r30, r30
     d16:	ff 1f       	adc	r31, r31
     d18:	12 96       	adiw	r26, 0x02	; 2
     d1a:	8d 91       	ld	r24, X+
     d1c:	9c 91       	ld	r25, X
     d1e:	13 97       	sbiw	r26, 0x03	; 3
     d20:	e8 0f       	add	r30, r24
     d22:	f9 1f       	adc	r31, r25
     d24:	01 90       	ld	r0, Z+
     d26:	f0 81       	ld	r31, Z
     d28:	e0 2d       	mov	r30, r0
     d2a:	01 90       	ld	r0, Z+
     d2c:	f0 81       	ld	r31, Z
     d2e:	e0 2d       	mov	r30, r0
     d30:	19 95       	eicall
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	08 95       	ret

00000d3a <udc_start>:
     d3a:	25 c6       	rjmp	.+3146   	; 0x1986 <udd_enable>
     d3c:	08 95       	ret

00000d3e <udc_reset>:
     d3e:	cf 93       	push	r28
     d40:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <udc_num_configuration>
     d44:	88 23       	and	r24, r24
     d46:	c1 f0       	breq	.+48     	; 0xd78 <udc_reset+0x3a>
     d48:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     d4c:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     d50:	01 90       	ld	r0, Z+
     d52:	f0 81       	ld	r31, Z
     d54:	e0 2d       	mov	r30, r0
     d56:	84 81       	ldd	r24, Z+4	; 0x04
     d58:	88 23       	and	r24, r24
     d5a:	71 f0       	breq	.+28     	; 0xd78 <udc_reset+0x3a>
     d5c:	c0 e0       	ldi	r28, 0x00	; 0
     d5e:	8c 2f       	mov	r24, r28
     d60:	78 df       	rcall	.-272    	; 0xc52 <udc_iface_disable>
     d62:	cf 5f       	subi	r28, 0xFF	; 255
     d64:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     d68:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     d6c:	01 90       	ld	r0, Z+
     d6e:	f0 81       	ld	r31, Z
     d70:	e0 2d       	mov	r30, r0
     d72:	84 81       	ldd	r24, Z+4	; 0x04
     d74:	c8 17       	cp	r28, r24
     d76:	98 f3       	brcs	.-26     	; 0xd5e <udc_reset+0x20>
     d78:	10 92 c8 22 	sts	0x22C8, r1	; 0x8022c8 <udc_num_configuration>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	80 93 cc 22 	sts	0x22CC, r24	; 0x8022cc <udc_device_status>
     d84:	90 93 cd 22 	sts	0x22CD, r25	; 0x8022cd <udc_device_status+0x1>
     d88:	cf 91       	pop	r28
     d8a:	08 95       	ret

00000d8c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     d8c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     d8e:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <udc_num_configuration>
     d92:	88 23       	and	r24, r24
     d94:	49 f1       	breq	.+82     	; 0xde8 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d96:	a0 91 c6 22 	lds	r26, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     d9a:	b0 91 c7 22 	lds	r27, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     d9e:	ed 91       	ld	r30, X+
     da0:	fc 91       	ld	r31, X
     da2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     da4:	84 81       	ldd	r24, Z+4	; 0x04
     da6:	88 23       	and	r24, r24
     da8:	f9 f0       	breq	.+62     	; 0xde8 <udc_sof_notify+0x5c>
     daa:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     dac:	ec 2f       	mov	r30, r28
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	12 96       	adiw	r26, 0x02	; 2
     db6:	8d 91       	ld	r24, X+
     db8:	9c 91       	ld	r25, X
     dba:	13 97       	sbiw	r26, 0x03	; 3
     dbc:	e8 0f       	add	r30, r24
     dbe:	f9 1f       	adc	r31, r25
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	00 84       	ldd	r0, Z+8	; 0x08
     dc8:	f1 85       	ldd	r31, Z+9	; 0x09
     dca:	e0 2d       	mov	r30, r0
     dcc:	30 97       	sbiw	r30, 0x00	; 0
     dce:	09 f0       	breq	.+2      	; 0xdd2 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     dd0:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     dd2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dd4:	a0 91 c6 22 	lds	r26, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     dd8:	b0 91 c7 22 	lds	r27, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     ddc:	ed 91       	ld	r30, X+
     dde:	fc 91       	ld	r31, X
     de0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     de2:	84 81       	ldd	r24, Z+4	; 0x04
     de4:	c8 17       	cp	r28, r24
     de6:	10 f3       	brcs	.-60     	; 0xdac <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     df4:	e9 ef       	ldi	r30, 0xF9	; 249
     df6:	f3 e2       	ldi	r31, 0x23	; 35
     df8:	12 86       	std	Z+10, r1	; 0x0a
     dfa:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     dfc:	14 86       	std	Z+12, r1	; 0x0c
     dfe:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     e00:	16 86       	std	Z+14, r1	; 0x0e
     e02:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     e04:	80 81       	ld	r24, Z
     e06:	88 23       	and	r24, r24
     e08:	0c f0       	brlt	.+2      	; 0xe0c <udc_process_setup+0x20>
     e0a:	63 c2       	rjmp	.+1222   	; 0x12d2 <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
     e0c:	20 91 ff 23 	lds	r18, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
     e10:	30 91 00 24 	lds	r19, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
     e14:	21 15       	cp	r18, r1
     e16:	31 05       	cpc	r19, r1
     e18:	09 f0       	breq	.+2      	; 0xe1c <udc_process_setup+0x30>
     e1a:	56 c2       	rjmp	.+1196   	; 0x12c8 <udc_process_setup+0x4dc>
     e1c:	51 c2       	rjmp	.+1186   	; 0x12c0 <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e1e:	8f 71       	andi	r24, 0x1F	; 31
     e20:	09 f0       	breq	.+2      	; 0xe24 <udc_process_setup+0x38>
     e22:	a7 c0       	rjmp	.+334    	; 0xf72 <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e24:	90 91 fa 23 	lds	r25, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
     e28:	96 30       	cpi	r25, 0x06	; 6
     e2a:	79 f0       	breq	.+30     	; 0xe4a <udc_process_setup+0x5e>
     e2c:	98 30       	cpi	r25, 0x08	; 8
     e2e:	09 f4       	brne	.+2      	; 0xe32 <udc_process_setup+0x46>
     e30:	96 c0       	rjmp	.+300    	; 0xf5e <udc_process_setup+0x172>
     e32:	91 11       	cpse	r25, r1
     e34:	9e c0       	rjmp	.+316    	; 0xf72 <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	09 f0       	breq	.+2      	; 0xe3e <udc_process_setup+0x52>
     e3c:	ca c1       	rjmp	.+916    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     e3e:	62 e0       	ldi	r22, 0x02	; 2
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	8c ec       	ldi	r24, 0xCC	; 204
     e44:	92 e2       	ldi	r25, 0x22	; 34
     e46:	31 d6       	rcall	.+3170   	; 0x1aaa <udd_set_setup_payload>
     e48:	4d c2       	rjmp	.+1178   	; 0x12e4 <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     e4a:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x2>
     e4e:	90 91 fc 23 	lds	r25, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     e52:	29 2f       	mov	r18, r25
     e54:	33 27       	eor	r19, r19
     e56:	22 30       	cpi	r18, 0x02	; 2
     e58:	31 05       	cpc	r19, r1
     e5a:	a9 f0       	breq	.+42     	; 0xe86 <udc_process_setup+0x9a>
     e5c:	24 f4       	brge	.+8      	; 0xe66 <udc_process_setup+0x7a>
     e5e:	21 30       	cpi	r18, 0x01	; 1
     e60:	31 05       	cpc	r19, r1
     e62:	41 f0       	breq	.+16     	; 0xe74 <udc_process_setup+0x88>
     e64:	ad c1       	rjmp	.+858    	; 0x11c0 <udc_process_setup+0x3d4>
     e66:	23 30       	cpi	r18, 0x03	; 3
     e68:	31 05       	cpc	r19, r1
     e6a:	d9 f1       	breq	.+118    	; 0xee2 <udc_process_setup+0xf6>
     e6c:	2f 30       	cpi	r18, 0x0F	; 15
     e6e:	31 05       	cpc	r19, r1
     e70:	51 f1       	breq	.+84     	; 0xec6 <udc_process_setup+0xda>
     e72:	a6 c1       	rjmp	.+844    	; 0x11c0 <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     e74:	80 91 72 20 	lds	r24, 0x2072	; 0x802072 <udc_config>
     e78:	90 91 73 20 	lds	r25, 0x2073	; 0x802073 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     e7c:	dc 01       	movw	r26, r24
     e7e:	6c 91       	ld	r22, X
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	13 d6       	rcall	.+3110   	; 0x1aaa <udd_set_setup_payload>
     e84:	5d c0       	rjmp	.+186    	; 0xf40 <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     e86:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
     e8a:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
     e8e:	21 89       	ldd	r18, Z+17	; 0x11
     e90:	82 17       	cp	r24, r18
     e92:	08 f0       	brcs	.+2      	; 0xe96 <udc_process_setup+0xaa>
     e94:	9e c1       	rjmp	.+828    	; 0x11d2 <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     e96:	99 27       	eor	r25, r25
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
     ea4:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
     ea8:	e8 0f       	add	r30, r24
     eaa:	f9 1f       	adc	r31, r25
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     eb0:	fc 01       	movw	r30, r24
     eb2:	62 81       	ldd	r22, Z+2	; 0x02
     eb4:	73 81       	ldd	r23, Z+3	; 0x03
     eb6:	f9 d5       	rcall	.+3058   	; 0x1aaa <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     eb8:	e0 91 01 24 	lds	r30, 0x2401	; 0x802401 <udd_g_ctrlreq+0x8>
     ebc:	f0 91 02 24 	lds	r31, 0x2402	; 0x802402 <udd_g_ctrlreq+0x9>
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	81 83       	std	Z+1, r24	; 0x01
     ec4:	3d c0       	rjmp	.+122    	; 0xf40 <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     ec6:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <udc_config+0x4>
     eca:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <udc_config+0x5>
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	09 f4       	brne	.+2      	; 0xed4 <udc_process_setup+0xe8>
     ed2:	7f c1       	rjmp	.+766    	; 0x11d2 <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     ed4:	dc 01       	movw	r26, r24
     ed6:	12 96       	adiw	r26, 0x02	; 2
     ed8:	6d 91       	ld	r22, X+
     eda:	7c 91       	ld	r23, X
     edc:	13 97       	sbiw	r26, 0x03	; 3
     ede:	e5 d5       	rcall	.+3018   	; 0x1aaa <udd_set_setup_payload>
     ee0:	2f c0       	rjmp	.+94     	; 0xf40 <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     ee2:	99 27       	eor	r25, r25
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	91 f0       	breq	.+36     	; 0xf0e <udc_process_setup+0x122>
     eea:	58 f0       	brcs	.+22     	; 0xf02 <udc_process_setup+0x116>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	91 05       	cpc	r25, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <udc_process_setup+0x108>
     ef2:	f4 c1       	rjmp	.+1000   	; 0x12dc <udc_process_setup+0x4f0>
     ef4:	03 97       	sbiw	r24, 0x03	; 3
     ef6:	09 f0       	breq	.+2      	; 0xefa <udc_process_setup+0x10e>
     ef8:	6c c1       	rjmp	.+728    	; 0x11d2 <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     efa:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
     efc:	8d e8       	ldi	r24, 0x8D	; 141
     efe:	91 e2       	ldi	r25, 0x21	; 33
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     f02:	64 e0       	ldi	r22, 0x04	; 4
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	8e e6       	ldi	r24, 0x6E	; 110
     f08:	90 e2       	ldi	r25, 0x20	; 32
     f0a:	cf d5       	rcall	.+2974   	; 0x1aaa <udd_set_setup_payload>
     f0c:	19 c0       	rjmp	.+50     	; 0xf40 <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     f0e:	8b e5       	ldi	r24, 0x5B	; 91
     f10:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     f12:	22 e1       	ldi	r18, 0x12	; 18
     f14:	38 2f       	mov	r19, r24
     f16:	a4 e2       	ldi	r26, 0x24	; 36
     f18:	b0 e2       	ldi	r27, 0x20	; 32
     f1a:	e8 2f       	mov	r30, r24
     f1c:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     f1e:	81 91       	ld	r24, Z+
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	8d 93       	st	X+, r24
     f24:	9d 93       	st	X+, r25
     f26:	8e 2f       	mov	r24, r30
     f28:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     f2a:	82 17       	cp	r24, r18
     f2c:	c0 f3       	brcs	.-16     	; 0xf1e <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     f2e:	62 2f       	mov	r22, r18
     f30:	66 0f       	add	r22, r22
     f32:	6e 5f       	subi	r22, 0xFE	; 254
     f34:	60 93 22 20 	sts	0x2022, r22	; 0x802022 <udc_string_desc>
		udd_set_setup_payload(
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	82 e2       	ldi	r24, 0x22	; 34
     f3c:	90 e2       	ldi	r25, 0x20	; 32
     f3e:	b5 d5       	rcall	.+2922   	; 0x1aaa <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     f40:	e9 ef       	ldi	r30, 0xF9	; 249
     f42:	f3 e2       	ldi	r31, 0x23	; 35
     f44:	86 81       	ldd	r24, Z+6	; 0x06
     f46:	97 81       	ldd	r25, Z+7	; 0x07
     f48:	22 85       	ldd	r18, Z+10	; 0x0a
     f4a:	33 85       	ldd	r19, Z+11	; 0x0b
     f4c:	82 17       	cp	r24, r18
     f4e:	93 07       	cpc	r25, r19
     f50:	08 f0       	brcs	.+2      	; 0xf54 <udc_process_setup+0x168>
     f52:	c8 c1       	rjmp	.+912    	; 0x12e4 <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     f54:	80 93 03 24 	sts	0x2403, r24	; 0x802403 <udd_g_ctrlreq+0xa>
     f58:	90 93 04 24 	sts	0x2404, r25	; 0x802404 <udd_g_ctrlreq+0xb>
     f5c:	c3 c1       	rjmp	.+902    	; 0x12e4 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     f5e:	21 30       	cpi	r18, 0x01	; 1
     f60:	31 05       	cpc	r19, r1
     f62:	09 f0       	breq	.+2      	; 0xf66 <udc_process_setup+0x17a>
     f64:	36 c1       	rjmp	.+620    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	88 ec       	ldi	r24, 0xC8	; 200
     f6c:	92 e2       	ldi	r25, 0x22	; 34
     f6e:	9d d5       	rcall	.+2874   	; 0x1aaa <udd_set_setup_payload>
     f70:	b9 c1       	rjmp	.+882    	; 0x12e4 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	e1 f5       	brne	.+120    	; 0xfee <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     f76:	90 91 fa 23 	lds	r25, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
     f7a:	9a 30       	cpi	r25, 0x0A	; 10
     f7c:	c1 f5       	brne	.+112    	; 0xfee <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     f7e:	21 30       	cpi	r18, 0x01	; 1
     f80:	31 05       	cpc	r19, r1
     f82:	09 f0       	breq	.+2      	; 0xf86 <udc_process_setup+0x19a>
     f84:	26 c1       	rjmp	.+588    	; 0x11d2 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     f86:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <udc_num_configuration>
     f8a:	88 23       	and	r24, r24
     f8c:	09 f4       	brne	.+2      	; 0xf90 <udc_process_setup+0x1a4>
     f8e:	21 c1       	rjmp	.+578    	; 0x11d2 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     f90:	c0 91 fd 23 	lds	r28, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0x4>
     f94:	d0 91 fe 23 	lds	r29, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     f98:	00 91 c6 22 	lds	r16, 0x22C6	; 0x8022c6 <udc_ptr_conf>
     f9c:	10 91 c7 22 	lds	r17, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
     fa0:	d8 01       	movw	r26, r16
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
     fa8:	c8 17       	cp	r28, r24
     faa:	08 f0       	brcs	.+2      	; 0xfae <udc_process_setup+0x1c2>
     fac:	12 c1       	rjmp	.+548    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	8c 2f       	mov	r24, r28
     fb2:	15 de       	rcall	.-982    	; 0xbde <udc_update_iface_desc>
     fb4:	88 23       	and	r24, r24
     fb6:	09 f4       	brne	.+2      	; 0xfba <udc_process_setup+0x1ce>
     fb8:	0c c1       	rjmp	.+536    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     fba:	ce 01       	movw	r24, r28
     fbc:	99 27       	eor	r25, r25
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	d8 01       	movw	r26, r16
     fc4:	12 96       	adiw	r26, 0x02	; 2
     fc6:	ed 91       	ld	r30, X+
     fc8:	fc 91       	ld	r31, X
     fca:	13 97       	sbiw	r26, 0x03	; 3
     fcc:	e8 0f       	add	r30, r24
     fce:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     fd0:	01 90       	ld	r0, Z+
     fd2:	f0 81       	ld	r31, Z
     fd4:	e0 2d       	mov	r30, r0
     fd6:	86 81       	ldd	r24, Z+6	; 0x06
     fd8:	97 81       	ldd	r25, Z+7	; 0x07
     fda:	fc 01       	movw	r30, r24
     fdc:	19 95       	eicall
     fde:	80 93 ca 22 	sts	0x22CA, r24	; 0x8022ca <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	8a ec       	ldi	r24, 0xCA	; 202
     fe8:	92 e2       	ldi	r25, 0x22	; 34
     fea:	5f d5       	rcall	.+2750   	; 0x1aaa <udd_set_setup_payload>
     fec:	7b c1       	rjmp	.+758    	; 0x12e4 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	09 f0       	breq	.+2      	; 0xff4 <udc_process_setup+0x208>
     ff2:	ef c0       	rjmp	.+478    	; 0x11d2 <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ff4:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
     ff8:	81 11       	cpse	r24, r1
     ffa:	e4 c0       	rjmp	.+456    	; 0x11c4 <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	09 f0       	breq	.+2      	; 0x1004 <udc_process_setup+0x218>
    1002:	e7 c0       	rjmp	.+462    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1004:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0x4>
    1008:	df d5       	rcall	.+3006   	; 0x1bc8 <udd_ep_is_halted>
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	80 93 c2 22 	sts	0x22C2, r24	; 0x8022c2 <udc_ep_status.4671>
    1010:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <udc_ep_status.4671+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1014:	62 e0       	ldi	r22, 0x02	; 2
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	82 ec       	ldi	r24, 0xC2	; 194
    101a:	92 e2       	ldi	r25, 0x22	; 34
    101c:	46 d5       	rcall	.+2700   	; 0x1aaa <udd_set_setup_payload>
    101e:	62 c1       	rjmp	.+708    	; 0x12e4 <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1020:	8f 71       	andi	r24, 0x1F	; 31
    1022:	09 f0       	breq	.+2      	; 0x1026 <udc_process_setup+0x23a>
    1024:	83 c0       	rjmp	.+262    	; 0x112c <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1026:	90 91 fa 23 	lds	r25, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
    102a:	93 30       	cpi	r25, 0x03	; 3
    102c:	09 f4       	brne	.+2      	; 0x1030 <udc_process_setup+0x244>
    102e:	cc c0       	rjmp	.+408    	; 0x11c8 <udc_process_setup+0x3dc>
    1030:	18 f4       	brcc	.+6      	; 0x1038 <udc_process_setup+0x24c>
    1032:	91 30       	cpi	r25, 0x01	; 1
    1034:	a1 f0       	breq	.+40     	; 0x105e <udc_process_setup+0x272>
    1036:	7a c0       	rjmp	.+244    	; 0x112c <udc_process_setup+0x340>
    1038:	95 30       	cpi	r25, 0x05	; 5
    103a:	19 f0       	breq	.+6      	; 0x1042 <udc_process_setup+0x256>
    103c:	99 30       	cpi	r25, 0x09	; 9
    103e:	39 f1       	breq	.+78     	; 0x108e <udc_process_setup+0x2a2>
    1040:	75 c0       	rjmp	.+234    	; 0x112c <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1042:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    1046:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    104a:	89 2b       	or	r24, r25
    104c:	09 f0       	breq	.+2      	; 0x1050 <udc_process_setup+0x264>
    104e:	c1 c0       	rjmp	.+386    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1050:	8a ee       	ldi	r24, 0xEA	; 234
    1052:	95 e0       	ldi	r25, 0x05	; 5
    1054:	80 93 05 24 	sts	0x2405, r24	; 0x802405 <udd_g_ctrlreq+0xc>
    1058:	90 93 06 24 	sts	0x2406, r25	; 0x802406 <udd_g_ctrlreq+0xd>
    105c:	43 c1       	rjmp	.+646    	; 0x12e4 <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    105e:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    1062:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    1066:	89 2b       	or	r24, r25
    1068:	09 f0       	breq	.+2      	; 0x106c <udc_process_setup+0x280>
    106a:	b3 c0       	rjmp	.+358    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    106c:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x2>
    1070:	90 91 fc 23 	lds	r25, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0x3>
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	09 f0       	breq	.+2      	; 0x107a <udc_process_setup+0x28e>
    1078:	ac c0       	rjmp	.+344    	; 0x11d2 <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    107a:	80 91 cc 22 	lds	r24, 0x22CC	; 0x8022cc <udc_device_status>
    107e:	90 91 cd 22 	lds	r25, 0x22CD	; 0x8022cd <udc_device_status+0x1>
    1082:	8d 7f       	andi	r24, 0xFD	; 253
    1084:	80 93 cc 22 	sts	0x22CC, r24	; 0x8022cc <udc_device_status>
    1088:	90 93 cd 22 	sts	0x22CD, r25	; 0x8022cd <udc_device_status+0x1>
    108c:	2b c1       	rjmp	.+598    	; 0x12e4 <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    108e:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    1092:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    1096:	89 2b       	or	r24, r25
    1098:	09 f0       	breq	.+2      	; 0x109c <udc_process_setup+0x2b0>
    109a:	9b c0       	rjmp	.+310    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    109c:	fb d4       	rcall	.+2550   	; 0x1a94 <udd_getaddress>
    109e:	88 23       	and	r24, r24
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <udc_process_setup+0x2b8>
    10a2:	97 c0       	rjmp	.+302    	; 0x11d2 <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    10a4:	20 91 fb 23 	lds	r18, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x2>
    10a8:	30 91 fc 23 	lds	r19, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0x3>
    10ac:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    10ae:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <udc_config>
    10b2:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    10b6:	81 89       	ldd	r24, Z+17	; 0x11
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	82 17       	cp	r24, r18
    10bc:	93 07       	cpc	r25, r19
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <udc_process_setup+0x2d6>
    10c0:	88 c0       	rjmp	.+272    	; 0x11d2 <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    10c2:	3d de       	rcall	.-902    	; 0xd3e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    10c4:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x2>
    10c8:	90 91 fc 23 	lds	r25, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0x3>
    10cc:	80 93 c8 22 	sts	0x22C8, r24	; 0x8022c8 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    10d0:	88 23       	and	r24, r24
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <udc_process_setup+0x2ea>
    10d4:	07 c1       	rjmp	.+526    	; 0x12e4 <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    10d6:	99 27       	eor	r25, r25
    10d8:	81 50       	subi	r24, 0x01	; 1
    10da:	90 4c       	sbci	r25, 0xC0	; 192
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <udc_config+0x2>
    10e8:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <udc_config+0x3>
    10ec:	e8 0f       	add	r30, r24
    10ee:	f9 1f       	adc	r31, r25
    10f0:	e0 93 c6 22 	sts	0x22C6, r30	; 0x8022c6 <udc_ptr_conf>
    10f4:	f0 93 c7 22 	sts	0x22C7, r31	; 0x8022c7 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    10f8:	01 90       	ld	r0, Z+
    10fa:	f0 81       	ld	r31, Z
    10fc:	e0 2d       	mov	r30, r0
    10fe:	84 81       	ldd	r24, Z+4	; 0x04
    1100:	88 23       	and	r24, r24
    1102:	09 f4       	brne	.+2      	; 0x1106 <udc_process_setup+0x31a>
    1104:	ef c0       	rjmp	.+478    	; 0x12e4 <udc_process_setup+0x4f8>
    1106:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	8c 2f       	mov	r24, r28
    110c:	e4 dd       	rcall	.-1080   	; 0xcd6 <udc_iface_enable>
    110e:	88 23       	and	r24, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <udc_process_setup+0x328>
    1112:	5f c0       	rjmp	.+190    	; 0x11d2 <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1114:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1116:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <udc_ptr_conf>
    111a:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
    111e:	01 90       	ld	r0, Z+
    1120:	f0 81       	ld	r31, Z
    1122:	e0 2d       	mov	r30, r0
    1124:	84 81       	ldd	r24, Z+4	; 0x04
    1126:	c8 17       	cp	r28, r24
    1128:	78 f3       	brcs	.-34     	; 0x1108 <udc_process_setup+0x31c>
    112a:	dc c0       	rjmp	.+440    	; 0x12e4 <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	e1 f4       	brne	.+56     	; 0x1168 <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1130:	90 91 fa 23 	lds	r25, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
    1134:	9b 30       	cpi	r25, 0x0B	; 11
    1136:	c1 f4       	brne	.+48     	; 0x1168 <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1138:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    113c:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    1140:	89 2b       	or	r24, r25
    1142:	09 f0       	breq	.+2      	; 0x1146 <udc_process_setup+0x35a>
    1144:	46 c0       	rjmp	.+140    	; 0x11d2 <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1146:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <udc_num_configuration>
    114a:	88 23       	and	r24, r24
    114c:	09 f4       	brne	.+2      	; 0x1150 <udc_process_setup+0x364>
    114e:	41 c0       	rjmp	.+130    	; 0x11d2 <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1150:	e9 ef       	ldi	r30, 0xF9	; 249
    1152:	f3 e2       	ldi	r31, 0x23	; 35
    1154:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1156:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1158:	8c 2f       	mov	r24, r28
    115a:	7b dd       	rcall	.-1290   	; 0xc52 <udc_iface_disable>
    115c:	88 23       	and	r24, r24
    115e:	c9 f1       	breq	.+114    	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1160:	6d 2f       	mov	r22, r29
    1162:	8c 2f       	mov	r24, r28
    1164:	b8 dd       	rcall	.-1168   	; 0xcd6 <udc_iface_enable>
    1166:	33 c0       	rjmp	.+102    	; 0x11ce <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	99 f5       	brne	.+102    	; 0x11d2 <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    116c:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <udd_g_ctrlreq+0x1>
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	19 f0       	breq	.+6      	; 0x117a <udc_process_setup+0x38e>
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	89 f0       	breq	.+34     	; 0x119a <udc_process_setup+0x3ae>
    1178:	29 c0       	rjmp	.+82     	; 0x11cc <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    117a:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    117e:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    1182:	89 2b       	or	r24, r25
    1184:	31 f5       	brne	.+76     	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1186:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x2>
    118a:	90 91 fc 23 	lds	r25, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0x3>
    118e:	89 2b       	or	r24, r25
    1190:	01 f5       	brne	.+64     	; 0x11d2 <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1192:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0x4>
    1196:	33 d5       	rcall	.+2662   	; 0x1bfe <udd_ep_clear_halt>
    1198:	1a c0       	rjmp	.+52     	; 0x11ce <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    119a:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    119e:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    11a2:	89 2b       	or	r24, r25
    11a4:	b1 f4       	brne	.+44     	; 0x11d2 <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    11a6:	80 91 fb 23 	lds	r24, 0x23FB	; 0x8023fb <udd_g_ctrlreq+0x2>
    11aa:	90 91 fc 23 	lds	r25, 0x23FC	; 0x8023fc <udd_g_ctrlreq+0x3>
    11ae:	89 2b       	or	r24, r25
    11b0:	81 f4       	brne	.+32     	; 0x11d2 <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    11b2:	c9 ef       	ldi	r28, 0xF9	; 249
    11b4:	d3 e2       	ldi	r29, 0x23	; 35
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	20 d6       	rcall	.+3136   	; 0x1dfa <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	83 d6       	rcall	.+3334   	; 0x1ec4 <udd_ep_set_halt>
    11be:	07 c0       	rjmp	.+14     	; 0x11ce <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    11ce:	81 11       	cpse	r24, r1
    11d0:	8a c0       	rjmp	.+276    	; 0x12e6 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    11d2:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <udd_g_ctrlreq>
    11d6:	8f 71       	andi	r24, 0x1F	; 31
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	71 f5       	brne	.+92     	; 0x1238 <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    11dc:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <udc_num_configuration>
    11e0:	88 23       	and	r24, r24
    11e2:	51 f1       	breq	.+84     	; 0x1238 <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    11e4:	00 91 fd 23 	lds	r16, 0x23FD	; 0x8023fd <udd_g_ctrlreq+0x4>
    11e8:	10 91 fe 23 	lds	r17, 0x23FE	; 0x8023fe <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    11ec:	c0 91 c6 22 	lds	r28, 0x22C6	; 0x8022c6 <udc_ptr_conf>
    11f0:	d0 91 c7 22 	lds	r29, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
    11f4:	e8 81       	ld	r30, Y
    11f6:	f9 81       	ldd	r31, Y+1	; 0x01
    11f8:	84 81       	ldd	r24, Z+4	; 0x04
    11fa:	08 17       	cp	r16, r24
    11fc:	e8 f4       	brcc	.+58     	; 0x1238 <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	80 2f       	mov	r24, r16
    1202:	ed dc       	rcall	.-1574   	; 0xbde <udc_update_iface_desc>
    1204:	88 23       	and	r24, r24
    1206:	c1 f0       	breq	.+48     	; 0x1238 <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1208:	f8 01       	movw	r30, r16
    120a:	ff 27       	eor	r31, r31
    120c:	cf 01       	movw	r24, r30
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	ea 81       	ldd	r30, Y+2	; 0x02
    1214:	fb 81       	ldd	r31, Y+3	; 0x03
    1216:	e8 0f       	add	r30, r24
    1218:	f9 1f       	adc	r31, r25
    121a:	c0 81       	ld	r28, Z
    121c:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    121e:	ee 81       	ldd	r30, Y+6	; 0x06
    1220:	ff 81       	ldd	r31, Y+7	; 0x07
    1222:	19 95       	eicall
    1224:	68 2f       	mov	r22, r24
    1226:	80 2f       	mov	r24, r16
    1228:	da dc       	rcall	.-1612   	; 0xbde <udc_update_iface_desc>
    122a:	88 23       	and	r24, r24
    122c:	29 f0       	breq	.+10     	; 0x1238 <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    122e:	ec 81       	ldd	r30, Y+4	; 0x04
    1230:	fd 81       	ldd	r31, Y+5	; 0x05
    1232:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1234:	81 11       	cpse	r24, r1
    1236:	57 c0       	rjmp	.+174    	; 0x12e6 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1238:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <udd_g_ctrlreq>
    123c:	8f 71       	andi	r24, 0x1F	; 31
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	09 f0       	breq	.+2      	; 0x1244 <udc_process_setup+0x458>
    1242:	40 c0       	rjmp	.+128    	; 0x12c4 <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1244:	80 91 c8 22 	lds	r24, 0x22C8	; 0x8022c8 <udc_num_configuration>
    1248:	88 23       	and	r24, r24
    124a:	b1 f1       	breq	.+108    	; 0x12b8 <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    124c:	a0 91 c6 22 	lds	r26, 0x22C6	; 0x8022c6 <udc_ptr_conf>
    1250:	b0 91 c7 22 	lds	r27, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
    1254:	ed 91       	ld	r30, X+
    1256:	fc 91       	ld	r31, X
    1258:	11 97       	sbiw	r26, 0x01	; 1
    125a:	84 81       	ldd	r24, Z+4	; 0x04
    125c:	88 23       	and	r24, r24
    125e:	71 f1       	breq	.+92     	; 0x12bc <udc_process_setup+0x4d0>
    1260:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1262:	ec 2f       	mov	r30, r28
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	12 96       	adiw	r26, 0x02	; 2
    126c:	8d 91       	ld	r24, X+
    126e:	9c 91       	ld	r25, X
    1270:	13 97       	sbiw	r26, 0x03	; 3
    1272:	e8 0f       	add	r30, r24
    1274:	f9 1f       	adc	r31, r25
    1276:	00 81       	ld	r16, Z
    1278:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    127a:	d8 01       	movw	r26, r16
    127c:	16 96       	adiw	r26, 0x06	; 6
    127e:	ed 91       	ld	r30, X+
    1280:	fc 91       	ld	r31, X
    1282:	17 97       	sbiw	r26, 0x07	; 7
    1284:	19 95       	eicall
    1286:	68 2f       	mov	r22, r24
    1288:	8c 2f       	mov	r24, r28
    128a:	a9 dc       	rcall	.-1710   	; 0xbde <udc_update_iface_desc>
    128c:	88 23       	and	r24, r24
    128e:	59 f1       	breq	.+86     	; 0x12e6 <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1290:	d8 01       	movw	r26, r16
    1292:	14 96       	adiw	r26, 0x04	; 4
    1294:	ed 91       	ld	r30, X+
    1296:	fc 91       	ld	r31, X
    1298:	15 97       	sbiw	r26, 0x05	; 5
    129a:	19 95       	eicall
    129c:	81 11       	cpse	r24, r1
    129e:	23 c0       	rjmp	.+70     	; 0x12e6 <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    12a0:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    12a2:	a0 91 c6 22 	lds	r26, 0x22C6	; 0x8022c6 <udc_ptr_conf>
    12a6:	b0 91 c7 22 	lds	r27, 0x22C7	; 0x8022c7 <udc_ptr_conf+0x1>
    12aa:	ed 91       	ld	r30, X+
    12ac:	fc 91       	ld	r31, X
    12ae:	11 97       	sbiw	r26, 0x01	; 1
    12b0:	94 81       	ldd	r25, Z+4	; 0x04
    12b2:	c9 17       	cp	r28, r25
    12b4:	b0 f2       	brcs	.-84     	; 0x1262 <udc_process_setup+0x476>
    12b6:	17 c0       	rjmp	.+46     	; 0x12e6 <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	15 c0       	rjmp	.+42     	; 0x12e6 <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	13 c0       	rjmp	.+38     	; 0x12e6 <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	11 c0       	rjmp	.+34     	; 0x12e6 <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    12c8:	98 2f       	mov	r25, r24
    12ca:	90 76       	andi	r25, 0x60	; 96
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <udc_process_setup+0x4e4>
    12ce:	81 cf       	rjmp	.-254    	; 0x11d2 <udc_process_setup+0x3e6>
    12d0:	a6 cd       	rjmp	.-1204   	; 0xe1e <udc_process_setup+0x32>
    12d2:	98 2f       	mov	r25, r24
    12d4:	90 76       	andi	r25, 0x60	; 96
    12d6:	09 f0       	breq	.+2      	; 0x12da <udc_process_setup+0x4ee>
    12d8:	7c cf       	rjmp	.-264    	; 0x11d2 <udc_process_setup+0x3e6>
    12da:	a2 ce       	rjmp	.-700    	; 0x1020 <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    12dc:	22 e1       	ldi	r18, 0x12	; 18
		str = udc_string_product_name;
    12de:	88 e4       	ldi	r24, 0x48	; 72
    12e0:	90 e2       	ldi	r25, 0x20	; 32
    12e2:	18 ce       	rjmp	.-976    	; 0xf14 <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	1f 92       	push	r1
    12f6:	1f 92       	push	r1
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	81 11       	cpse	r24, r1
    12fe:	26 c0       	rjmp	.+76     	; 0x134c <udd_sleep_mode+0x5c>
    1300:	90 91 f8 23 	lds	r25, 0x23F8	; 0x8023f8 <udd_b_idle>
    1304:	99 23       	and	r25, r25
    1306:	f9 f0       	breq	.+62     	; 0x1346 <udd_sleep_mode+0x56>
    1308:	90 91 0a 24 	lds	r25, 0x240A	; 0x80240a <sleepmgr_locks+0x1>
    130c:	91 11       	cpse	r25, r1
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <udd_sleep_mode+0x22>
    1310:	ff cf       	rjmp	.-2      	; 0x1310 <udd_sleep_mode+0x20>
    1312:	9f b7       	in	r25, 0x3f	; 63
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	f8 94       	cli
    1318:	2a 81       	ldd	r18, Y+2	; 0x02
    131a:	e9 e0       	ldi	r30, 0x09	; 9
    131c:	f4 e2       	ldi	r31, 0x24	; 36
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	91 50       	subi	r25, 0x01	; 1
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	2f bf       	out	0x3f, r18	; 63
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <udd_sleep_mode+0x56>
    1328:	90 91 0a 24 	lds	r25, 0x240A	; 0x80240a <sleepmgr_locks+0x1>
    132c:	9f 3f       	cpi	r25, 0xFF	; 255
    132e:	09 f4       	brne	.+2      	; 0x1332 <udd_sleep_mode+0x42>
    1330:	ff cf       	rjmp	.-2      	; 0x1330 <udd_sleep_mode+0x40>
    1332:	9f b7       	in	r25, 0x3f	; 63
    1334:	99 83       	std	Y+1, r25	; 0x01
    1336:	f8 94       	cli
    1338:	29 81       	ldd	r18, Y+1	; 0x01
    133a:	e9 e0       	ldi	r30, 0x09	; 9
    133c:	f4 e2       	ldi	r31, 0x24	; 36
    133e:	91 81       	ldd	r25, Z+1	; 0x01
    1340:	9f 5f       	subi	r25, 0xFF	; 255
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	2f bf       	out	0x3f, r18	; 63
    1346:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <udd_b_idle>
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <udd_sleep_mode+0x66>
    134c:	90 91 f8 23 	lds	r25, 0x23F8	; 0x8023f8 <udd_b_idle>
    1350:	99 23       	and	r25, r25
    1352:	51 f3       	breq	.-44     	; 0x1328 <udd_sleep_mode+0x38>
    1354:	f8 cf       	rjmp	.-16     	; 0x1346 <udd_sleep_mode+0x56>
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <udd_ctrl_init>:
    1360:	0f 93       	push	r16
    1362:	e8 ec       	ldi	r30, 0xC8	; 200
    1364:	f4 e0       	ldi	r31, 0x04	; 4
    1366:	80 81       	ld	r24, Z
    1368:	8f 7d       	andi	r24, 0xDF	; 223
    136a:	80 83       	st	Z, r24
    136c:	80 81       	ld	r24, Z
    136e:	8f 7d       	andi	r24, 0xDF	; 223
    1370:	80 83       	st	Z, r24
    1372:	ec ec       	ldi	r30, 0xCC	; 204
    1374:	f3 e2       	ldi	r31, 0x23	; 35
    1376:	02 e0       	ldi	r16, 0x02	; 2
    1378:	05 93       	las	Z, r16
    137a:	10 92 ce 23 	sts	0x23CE, r1	; 0x8023ce <udd_sram+0x16>
    137e:	10 92 cf 23 	sts	0x23CF, r1	; 0x8023cf <udd_sram+0x17>
    1382:	00 e2       	ldi	r16, 0x20	; 32
    1384:	06 93       	lac	Z, r16
    1386:	00 e4       	ldi	r16, 0x40	; 64
    1388:	06 93       	lac	Z, r16
    138a:	e4 ec       	ldi	r30, 0xC4	; 196
    138c:	f3 e2       	ldi	r31, 0x23	; 35
    138e:	00 e4       	ldi	r16, 0x40	; 64
    1390:	06 93       	lac	Z, r16
    1392:	e9 ef       	ldi	r30, 0xF9	; 249
    1394:	f3 e2       	ldi	r31, 0x23	; 35
    1396:	14 86       	std	Z+12, r1	; 0x0c
    1398:	15 86       	std	Z+13, r1	; 0x0d
    139a:	16 86       	std	Z+14, r1	; 0x0e
    139c:	17 86       	std	Z+15, r1	; 0x0f
    139e:	12 86       	std	Z+10, r1	; 0x0a
    13a0:	13 86       	std	Z+11, r1	; 0x0b
    13a2:	10 92 b7 23 	sts	0x23B7, r1	; 0x8023b7 <udd_ep_control_state>
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <udd_ctrl_stall_data>:
    13aa:	0f 93       	push	r16
    13ac:	85 e0       	ldi	r24, 0x05	; 5
    13ae:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <udd_ep_control_state>
    13b2:	ed ec       	ldi	r30, 0xCD	; 205
    13b4:	f3 e2       	ldi	r31, 0x23	; 35
    13b6:	04 e0       	ldi	r16, 0x04	; 4
    13b8:	05 93       	las	Z, r16
    13ba:	e5 ec       	ldi	r30, 0xC5	; 197
    13bc:	f3 e2       	ldi	r31, 0x23	; 35
    13be:	04 e0       	ldi	r16, 0x04	; 4
    13c0:	05 93       	las	Z, r16
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <udd_ctrl_send_zlp_in>:
    13c6:	0f 93       	push	r16
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <udd_ep_control_state>
    13ce:	10 92 ce 23 	sts	0x23CE, r1	; 0x8023ce <udd_sram+0x16>
    13d2:	10 92 cf 23 	sts	0x23CF, r1	; 0x8023cf <udd_sram+0x17>
    13d6:	ec ec       	ldi	r30, 0xCC	; 204
    13d8:	f3 e2       	ldi	r31, 0x23	; 35
    13da:	02 e0       	ldi	r16, 0x02	; 2
    13dc:	06 93       	lac	Z, r16
    13de:	0f 91       	pop	r16
    13e0:	08 95       	ret

000013e2 <udd_ctrl_endofrequest>:
    13e2:	e0 91 05 24 	lds	r30, 0x2405	; 0x802405 <udd_g_ctrlreq+0xc>
    13e6:	f0 91 06 24 	lds	r31, 0x2406	; 0x802406 <udd_g_ctrlreq+0xd>
    13ea:	30 97       	sbiw	r30, 0x00	; 0
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <udd_ctrl_endofrequest+0xe>
    13ee:	19 95       	eicall
    13f0:	08 95       	ret

000013f2 <udd_ctrl_in_sent>:
    13f2:	0f 93       	push	r16
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_ep_control_state>
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	19 f4       	brne	.+6      	; 0x1406 <udd_ctrl_in_sent+0x14>
    1400:	f0 df       	rcall	.-32     	; 0x13e2 <udd_ctrl_endofrequest>
    1402:	ae df       	rcall	.-164    	; 0x1360 <udd_ctrl_init>
    1404:	5e c0       	rjmp	.+188    	; 0x14c2 <udd_ctrl_in_sent+0xd0>
    1406:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    140a:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    140e:	c0 91 03 24 	lds	r28, 0x2403	; 0x802403 <udd_g_ctrlreq+0xa>
    1412:	d0 91 04 24 	lds	r29, 0x2404	; 0x802404 <udd_g_ctrlreq+0xb>
    1416:	c8 1b       	sub	r28, r24
    1418:	d9 0b       	sbc	r29, r25
    141a:	71 f5       	brne	.+92     	; 0x1478 <udd_ctrl_in_sent+0x86>
    141c:	20 91 b5 23 	lds	r18, 0x23B5	; 0x8023b5 <udd_ctrl_prev_payload_nb_trans>
    1420:	30 91 b6 23 	lds	r19, 0x23B6	; 0x8023b6 <udd_ctrl_prev_payload_nb_trans+0x1>
    1424:	82 0f       	add	r24, r18
    1426:	93 1f       	adc	r25, r19
    1428:	80 93 b5 23 	sts	0x23B5, r24	; 0x8023b5 <udd_ctrl_prev_payload_nb_trans>
    142c:	90 93 b6 23 	sts	0x23B6, r25	; 0x8023b6 <udd_ctrl_prev_payload_nb_trans+0x1>
    1430:	20 91 ff 23 	lds	r18, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    1434:	30 91 00 24 	lds	r19, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    1438:	82 17       	cp	r24, r18
    143a:	93 07       	cpc	r25, r19
    143c:	21 f0       	breq	.+8      	; 0x1446 <udd_ctrl_in_sent+0x54>
    143e:	80 91 ce 22 	lds	r24, 0x22CE	; 0x8022ce <b_shortpacket.5383>
    1442:	88 23       	and	r24, r24
    1444:	41 f0       	breq	.+16     	; 0x1456 <udd_ctrl_in_sent+0x64>
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <udd_ep_control_state>
    144c:	e4 ec       	ldi	r30, 0xC4	; 196
    144e:	f3 e2       	ldi	r31, 0x23	; 35
    1450:	02 e0       	ldi	r16, 0x02	; 2
    1452:	06 93       	lac	Z, r16
    1454:	36 c0       	rjmp	.+108    	; 0x14c2 <udd_ctrl_in_sent+0xd0>
    1456:	e0 91 07 24 	lds	r30, 0x2407	; 0x802407 <udd_g_ctrlreq+0xe>
    145a:	f0 91 08 24 	lds	r31, 0x2408	; 0x802408 <udd_g_ctrlreq+0xf>
    145e:	30 97       	sbiw	r30, 0x00	; 0
    1460:	99 f0       	breq	.+38     	; 0x1488 <udd_ctrl_in_sent+0x96>
    1462:	19 95       	eicall
    1464:	88 23       	and	r24, r24
    1466:	81 f0       	breq	.+32     	; 0x1488 <udd_ctrl_in_sent+0x96>
    1468:	10 92 b3 23 	sts	0x23B3, r1	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    146c:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    1470:	c0 91 03 24 	lds	r28, 0x2403	; 0x802403 <udd_g_ctrlreq+0xa>
    1474:	d0 91 04 24 	lds	r29, 0x2404	; 0x802404 <udd_g_ctrlreq+0xb>
    1478:	c0 34       	cpi	r28, 0x40	; 64
    147a:	d1 05       	cpc	r29, r1
    147c:	28 f0       	brcs	.+10     	; 0x1488 <udd_ctrl_in_sent+0x96>
    147e:	10 92 ce 22 	sts	0x22CE, r1	; 0x8022ce <b_shortpacket.5383>
    1482:	c0 e4       	ldi	r28, 0x40	; 64
    1484:	d0 e0       	ldi	r29, 0x00	; 0
    1486:	03 c0       	rjmp	.+6      	; 0x148e <udd_ctrl_in_sent+0x9c>
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 93 ce 22 	sts	0x22CE, r24	; 0x8022ce <b_shortpacket.5383>
    148e:	e8 eb       	ldi	r30, 0xB8	; 184
    1490:	f3 e2       	ldi	r31, 0x23	; 35
    1492:	c6 8b       	std	Z+22, r28	; 0x16
    1494:	d7 8b       	std	Z+23, r29	; 0x17
    1496:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    149a:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    149e:	20 91 01 24 	lds	r18, 0x2401	; 0x802401 <udd_g_ctrlreq+0x8>
    14a2:	30 91 02 24 	lds	r19, 0x2402	; 0x802402 <udd_g_ctrlreq+0x9>
    14a6:	28 0f       	add	r18, r24
    14a8:	39 1f       	adc	r19, r25
    14aa:	20 8f       	std	Z+24, r18	; 0x18
    14ac:	31 8f       	std	Z+25, r19	; 0x19
    14ae:	c8 0f       	add	r28, r24
    14b0:	d9 1f       	adc	r29, r25
    14b2:	c0 93 b3 23 	sts	0x23B3, r28	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    14b6:	d0 93 b4 23 	sts	0x23B4, r29	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    14ba:	ec ec       	ldi	r30, 0xCC	; 204
    14bc:	f3 e2       	ldi	r31, 0x23	; 35
    14be:	02 e0       	ldi	r16, 0x02	; 2
    14c0:	06 93       	lac	Z, r16
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <udd_ep_get_size>:
    14ca:	fc 01       	movw	r30, r24
    14cc:	81 81       	ldd	r24, Z+1	; 0x01
    14ce:	e8 2f       	mov	r30, r24
    14d0:	e7 70       	andi	r30, 0x07	; 7
    14d2:	8e 2f       	mov	r24, r30
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	fc 01       	movw	r30, r24
    14d8:	31 97       	sbiw	r30, 0x01	; 1
    14da:	e7 30       	cpi	r30, 0x07	; 7
    14dc:	f1 05       	cpc	r31, r1
    14de:	d0 f4       	brcc	.+52     	; 0x1514 <udd_ep_get_size+0x4a>
    14e0:	88 27       	eor	r24, r24
    14e2:	e2 50       	subi	r30, 0x02	; 2
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	8f 4f       	sbci	r24, 0xFF	; 255
    14e8:	93 c7       	rjmp	.+3878   	; 0x2410 <__tablejump2__>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	08 95       	ret
    14f0:	80 e2       	ldi	r24, 0x20	; 32
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	08 95       	ret
    14f6:	80 e4       	ldi	r24, 0x40	; 64
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	08 95       	ret
    14fc:	80 e8       	ldi	r24, 0x80	; 128
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	08 95       	ret
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	08 95       	ret
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	08 95       	ret
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	93 e0       	ldi	r25, 0x03	; 3
    1512:	08 95       	ret
    1514:	88 e0       	ldi	r24, 0x08	; 8
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	08 95       	ret

0000151a <udd_ep_get_job>:
    151a:	28 2f       	mov	r18, r24
    151c:	2f 70       	andi	r18, 0x0F	; 15
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	08 2e       	mov	r0, r24
    1526:	00 0c       	add	r0, r0
    1528:	99 0b       	sbc	r25, r25
    152a:	88 27       	eor	r24, r24
    152c:	99 0f       	add	r25, r25
    152e:	88 1f       	adc	r24, r24
    1530:	99 27       	eor	r25, r25
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	02 97       	sbiw	r24, 0x02	; 2
    1538:	9c 01       	movw	r18, r24
    153a:	22 0f       	add	r18, r18
    153c:	33 1f       	adc	r19, r19
    153e:	22 0f       	add	r18, r18
    1540:	33 1f       	adc	r19, r19
    1542:	22 0f       	add	r18, r18
    1544:	33 1f       	adc	r19, r19
    1546:	82 0f       	add	r24, r18
    1548:	93 1f       	adc	r25, r19
    154a:	81 5b       	subi	r24, 0xB1	; 177
    154c:	9c 4d       	sbci	r25, 0xDC	; 220
    154e:	08 95       	ret

00001550 <udd_ctrl_interrupt_tc_setup>:
    1550:	0f 93       	push	r16
    1552:	cf 93       	push	r28
    1554:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1558:	80 ff       	sbrs	r24, 0
    155a:	64 c0       	rjmp	.+200    	; 0x1624 <udd_ctrl_interrupt_tc_setup+0xd4>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1562:	e4 ec       	ldi	r30, 0xC4	; 196
    1564:	f3 e2       	ldi	r31, 0x23	; 35
    1566:	00 e8       	ldi	r16, 0x80	; 128
    1568:	06 93       	lac	Z, r16
    156a:	ec ec       	ldi	r30, 0xCC	; 204
    156c:	f3 e2       	ldi	r31, 0x23	; 35
    156e:	00 e8       	ldi	r16, 0x80	; 128
    1570:	06 93       	lac	Z, r16
    1572:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1576:	e4 ec       	ldi	r30, 0xC4	; 196
    1578:	f3 e2       	ldi	r31, 0x23	; 35
    157a:	00 e1       	ldi	r16, 0x10	; 16
    157c:	06 93       	lac	Z, r16
    157e:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_ep_control_state>
    1582:	88 23       	and	r24, r24
    1584:	29 f0       	breq	.+10     	; 0x1590 <udd_ctrl_interrupt_tc_setup+0x40>
    1586:	83 50       	subi	r24, 0x03	; 3
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	08 f4       	brcc	.+2      	; 0x158e <udd_ctrl_interrupt_tc_setup+0x3e>
    158c:	2a df       	rcall	.-428    	; 0x13e2 <udd_ctrl_endofrequest>
    158e:	e8 de       	rcall	.-560    	; 0x1360 <udd_ctrl_init>
    1590:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <udd_sram+0xe>
    1594:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <udd_sram+0xf>
    1598:	08 97       	sbiw	r24, 0x08	; 8
    159a:	09 f0       	breq	.+2      	; 0x159e <udd_ctrl_interrupt_tc_setup+0x4e>
    159c:	45 c0       	rjmp	.+138    	; 0x1628 <udd_ctrl_interrupt_tc_setup+0xd8>
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	e3 e7       	ldi	r30, 0x73	; 115
    15a2:	f3 e2       	ldi	r31, 0x23	; 35
    15a4:	a9 ef       	ldi	r26, 0xF9	; 249
    15a6:	b3 e2       	ldi	r27, 0x23	; 35
    15a8:	01 90       	ld	r0, Z+
    15aa:	0d 92       	st	X+, r0
    15ac:	8a 95       	dec	r24
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <udd_ctrl_interrupt_tc_setup+0x58>
    15b0:	e8 ec       	ldi	r30, 0xC8	; 200
    15b2:	f4 e0       	ldi	r31, 0x04	; 4
    15b4:	80 81       	ld	r24, Z
    15b6:	80 62       	ori	r24, 0x20	; 32
    15b8:	80 83       	st	Z, r24
    15ba:	80 81       	ld	r24, Z
    15bc:	80 62       	ori	r24, 0x20	; 32
    15be:	80 83       	st	Z, r24
    15c0:	15 dc       	rcall	.-2006   	; 0xdec <udc_process_setup>
    15c2:	c8 2f       	mov	r28, r24
    15c4:	81 11       	cpse	r24, r1
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <udd_ctrl_interrupt_tc_setup+0x7e>
    15c8:	f0 de       	rcall	.-544    	; 0x13aa <udd_ctrl_stall_data>
    15ca:	c1 e0       	ldi	r28, 0x01	; 1
    15cc:	2e c0       	rjmp	.+92     	; 0x162a <udd_ctrl_interrupt_tc_setup+0xda>
    15ce:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <udd_g_ctrlreq>
    15d2:	88 23       	and	r24, r24
    15d4:	6c f4       	brge	.+26     	; 0x15f0 <udd_ctrl_interrupt_tc_setup+0xa0>
    15d6:	10 92 b5 23 	sts	0x23B5, r1	; 0x8023b5 <udd_ctrl_prev_payload_nb_trans>
    15da:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <udd_ctrl_prev_payload_nb_trans+0x1>
    15de:	10 92 b3 23 	sts	0x23B3, r1	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    15e2:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    15e6:	82 e0       	ldi	r24, 0x02	; 2
    15e8:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <udd_ep_control_state>
    15ec:	02 df       	rcall	.-508    	; 0x13f2 <udd_ctrl_in_sent>
    15ee:	1d c0       	rjmp	.+58     	; 0x162a <udd_ctrl_interrupt_tc_setup+0xda>
    15f0:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    15f4:	90 91 00 24 	lds	r25, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    15f8:	89 2b       	or	r24, r25
    15fa:	11 f4       	brne	.+4      	; 0x1600 <udd_ctrl_interrupt_tc_setup+0xb0>
    15fc:	e4 de       	rcall	.-568    	; 0x13c6 <udd_ctrl_send_zlp_in>
    15fe:	15 c0       	rjmp	.+42     	; 0x162a <udd_ctrl_interrupt_tc_setup+0xda>
    1600:	10 92 b5 23 	sts	0x23B5, r1	; 0x8023b5 <udd_ctrl_prev_payload_nb_trans>
    1604:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <udd_ctrl_prev_payload_nb_trans+0x1>
    1608:	10 92 b3 23 	sts	0x23B3, r1	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    160c:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <udd_ep_control_state>
    1616:	e4 ec       	ldi	r30, 0xC4	; 196
    1618:	f3 e2       	ldi	r31, 0x23	; 35
    161a:	02 e0       	ldi	r16, 0x02	; 2
    161c:	06 93       	lac	Z, r16
    161e:	00 e2       	ldi	r16, 0x20	; 32
    1620:	06 93       	lac	Z, r16
    1622:	03 c0       	rjmp	.+6      	; 0x162a <udd_ctrl_interrupt_tc_setup+0xda>
    1624:	c0 e0       	ldi	r28, 0x00	; 0
    1626:	01 c0       	rjmp	.+2      	; 0x162a <udd_ctrl_interrupt_tc_setup+0xda>
    1628:	c1 e0       	ldi	r28, 0x01	; 1
    162a:	8c 2f       	mov	r24, r28
    162c:	cf 91       	pop	r28
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <udd_ep_trans_complet>:
    1632:	8f 92       	push	r8
    1634:	9f 92       	push	r9
    1636:	af 92       	push	r10
    1638:	bf 92       	push	r11
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	d8 2e       	mov	r13, r24
    164a:	67 df       	rcall	.-306    	; 0x151a <udd_ep_get_job>
    164c:	8c 01       	movw	r16, r24
    164e:	bd 2c       	mov	r11, r13
    1650:	bb 1c       	adc	r11, r11
    1652:	bb 24       	eor	r11, r11
    1654:	bb 1c       	adc	r11, r11
    1656:	cd 2d       	mov	r28, r13
    1658:	cf 70       	andi	r28, 0x0F	; 15
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    165c:	cc 0f       	add	r28, r28
    165e:	dd 1f       	adc	r29, r29
    1660:	cb 0d       	add	r28, r11
    1662:	d1 1d       	adc	r29, r1
    1664:	ce 01       	movw	r24, r28
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	9c 01       	movw	r18, r24
    1674:	2c 53       	subi	r18, 0x3C	; 60
    1676:	3c 4d       	sbci	r19, 0xDC	; 220
    1678:	79 01       	movw	r14, r18
    167a:	c9 01       	movw	r24, r18
    167c:	26 df       	rcall	.-436    	; 0x14ca <udd_ep_get_size>
    167e:	4c 01       	movw	r8, r24
    1680:	bb 20       	and	r11, r11
    1682:	09 f4       	brne	.+2      	; 0x1686 <udd_ep_trans_complet+0x54>
    1684:	79 c0       	rjmp	.+242    	; 0x1778 <udd_ep_trans_complet+0x146>
    1686:	fe 01       	movw	r30, r28
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	e8 54       	subi	r30, 0x48	; 72
    1696:	fc 4d       	sbci	r31, 0xDC	; 220
    1698:	22 89       	ldd	r18, Z+18	; 0x12
    169a:	33 89       	ldd	r19, Z+19	; 0x13
    169c:	d8 01       	movw	r26, r16
    169e:	15 96       	adiw	r26, 0x05	; 5
    16a0:	8d 91       	ld	r24, X+
    16a2:	9c 91       	ld	r25, X
    16a4:	16 97       	sbiw	r26, 0x06	; 6
    16a6:	82 0f       	add	r24, r18
    16a8:	93 1f       	adc	r25, r19
    16aa:	15 96       	adiw	r26, 0x05	; 5
    16ac:	8d 93       	st	X+, r24
    16ae:	9c 93       	st	X, r25
    16b0:	16 97       	sbiw	r26, 0x06	; 6
    16b2:	13 96       	adiw	r26, 0x03	; 3
    16b4:	2d 91       	ld	r18, X+
    16b6:	3c 91       	ld	r19, X
    16b8:	14 97       	sbiw	r26, 0x04	; 4
    16ba:	82 17       	cp	r24, r18
    16bc:	93 07       	cpc	r25, r19
    16be:	09 f4       	brne	.+2      	; 0x16c2 <udd_ep_trans_complet+0x90>
    16c0:	45 c0       	rjmp	.+138    	; 0x174c <udd_ep_trans_complet+0x11a>
    16c2:	28 1b       	sub	r18, r24
    16c4:	39 0b       	sbc	r19, r25
    16c6:	21 15       	cp	r18, r1
    16c8:	b4 e0       	ldi	r27, 0x04	; 4
    16ca:	3b 07       	cpc	r19, r27
    16cc:	38 f0       	brcs	.+14     	; 0x16dc <udd_ep_trans_complet+0xaa>
    16ce:	2f ef       	ldi	r18, 0xFF	; 255
    16d0:	33 e0       	ldi	r19, 0x03	; 3
    16d2:	c9 01       	movw	r24, r18
    16d4:	b4 01       	movw	r22, r8
    16d6:	88 d6       	rcall	.+3344   	; 0x23e8 <__udivmodhi4>
    16d8:	28 1b       	sub	r18, r24
    16da:	39 0b       	sbc	r19, r25
    16dc:	f8 01       	movw	r30, r16
    16de:	80 81       	ld	r24, Z
    16e0:	81 ff       	sbrs	r24, 1
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <udd_ep_trans_complet+0xc4>
    16e4:	c9 01       	movw	r24, r18
    16e6:	b4 01       	movw	r22, r8
    16e8:	7f d6       	rcall	.+3326   	; 0x23e8 <__udivmodhi4>
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	89 2b       	or	r24, r25
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <udd_ep_trans_complet+0xc0>
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	84 2f       	mov	r24, r20
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <udd_ep_trans_complet+0xc6>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	d8 01       	movw	r26, r16
    16fa:	9c 91       	ld	r25, X
    16fc:	80 fb       	bst	r24, 0
    16fe:	91 f9       	bld	r25, 1
    1700:	9c 93       	st	X, r25
    1702:	fe 01       	movw	r30, r28
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	e8 54       	subi	r30, 0x48	; 72
    1712:	fc 4d       	sbci	r31, 0xDC	; 220
    1714:	12 8a       	std	Z+18, r1	; 0x12
    1716:	13 8a       	std	Z+19, r1	; 0x13
    1718:	26 87       	std	Z+14, r18	; 0x0e
    171a:	37 87       	std	Z+15, r19	; 0x0f
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	2d 91       	ld	r18, X+
    1720:	3c 91       	ld	r19, X
    1722:	12 97       	sbiw	r26, 0x02	; 2
    1724:	15 96       	adiw	r26, 0x05	; 5
    1726:	8d 91       	ld	r24, X+
    1728:	9c 91       	ld	r25, X
    172a:	16 97       	sbiw	r26, 0x06	; 6
    172c:	82 0f       	add	r24, r18
    172e:	93 1f       	adc	r25, r19
    1730:	cc 0f       	add	r28, r28
    1732:	dd 1f       	adc	r29, r29
    1734:	cc 0f       	add	r28, r28
    1736:	dd 1f       	adc	r29, r29
    1738:	cc 0f       	add	r28, r28
    173a:	dd 1f       	adc	r29, r29
    173c:	c8 53       	subi	r28, 0x38	; 56
    173e:	dc 4d       	sbci	r29, 0xDC	; 220
    1740:	88 83       	st	Y, r24
    1742:	99 83       	std	Y+1, r25	; 0x01
    1744:	f7 01       	movw	r30, r14
    1746:	02 e0       	ldi	r16, 0x02	; 2
    1748:	06 93       	lac	Z, r16
    174a:	e4 c0       	rjmp	.+456    	; 0x1914 <udd_ep_trans_complet+0x2e2>
    174c:	d8 01       	movw	r26, r16
    174e:	8c 91       	ld	r24, X
    1750:	81 ff       	sbrs	r24, 1
    1752:	cd c0       	rjmp	.+410    	; 0x18ee <udd_ep_trans_complet+0x2bc>
    1754:	8d 7f       	andi	r24, 0xFD	; 253
    1756:	8c 93       	st	X, r24
    1758:	cc 0f       	add	r28, r28
    175a:	dd 1f       	adc	r29, r29
    175c:	cc 0f       	add	r28, r28
    175e:	dd 1f       	adc	r29, r29
    1760:	cc 0f       	add	r28, r28
    1762:	dd 1f       	adc	r29, r29
    1764:	c8 54       	subi	r28, 0x48	; 72
    1766:	dc 4d       	sbci	r29, 0xDC	; 220
    1768:	1a 8a       	std	Y+18, r1	; 0x12
    176a:	1b 8a       	std	Y+19, r1	; 0x13
    176c:	1e 86       	std	Y+14, r1	; 0x0e
    176e:	1f 86       	std	Y+15, r1	; 0x0f
    1770:	f7 01       	movw	r30, r14
    1772:	02 e0       	ldi	r16, 0x02	; 2
    1774:	06 93       	lac	Z, r16
    1776:	ce c0       	rjmp	.+412    	; 0x1914 <udd_ep_trans_complet+0x2e2>
    1778:	fe 01       	movw	r30, r28
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	e8 54       	subi	r30, 0x48	; 72
    1788:	fc 4d       	sbci	r31, 0xDC	; 220
    178a:	a6 84       	ldd	r10, Z+14	; 0x0e
    178c:	b7 84       	ldd	r11, Z+15	; 0x0f
    178e:	d8 01       	movw	r26, r16
    1790:	8c 91       	ld	r24, X
    1792:	82 ff       	sbrs	r24, 2
    1794:	19 c0       	rjmp	.+50     	; 0x17c8 <udd_ep_trans_complet+0x196>
    1796:	11 96       	adiw	r26, 0x01	; 1
    1798:	ed 91       	ld	r30, X+
    179a:	fc 91       	ld	r31, X
    179c:	12 97       	sbiw	r26, 0x02	; 2
    179e:	15 96       	adiw	r26, 0x05	; 5
    17a0:	2d 91       	ld	r18, X+
    17a2:	3c 91       	ld	r19, X
    17a4:	16 97       	sbiw	r26, 0x06	; 6
    17a6:	13 96       	adiw	r26, 0x03	; 3
    17a8:	8d 91       	ld	r24, X+
    17aa:	9c 91       	ld	r25, X
    17ac:	14 97       	sbiw	r26, 0x04	; 4
    17ae:	b4 01       	movw	r22, r8
    17b0:	1b d6       	rcall	.+3126   	; 0x23e8 <__udivmodhi4>
    17b2:	b0 e4       	ldi	r27, 0x40	; 64
    17b4:	db 9e       	mul	r13, r27
    17b6:	b0 01       	movw	r22, r0
    17b8:	11 24       	eor	r1, r1
    17ba:	61 57       	subi	r22, 0x71	; 113
    17bc:	7d 4d       	sbci	r23, 0xDD	; 221
    17be:	ac 01       	movw	r20, r24
    17c0:	cf 01       	movw	r24, r30
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	2d d6       	rcall	.+3162   	; 0x2422 <memcpy>
    17c8:	f8 01       	movw	r30, r16
    17ca:	25 81       	ldd	r18, Z+5	; 0x05
    17cc:	36 81       	ldd	r19, Z+6	; 0x06
    17ce:	2a 0d       	add	r18, r10
    17d0:	3b 1d       	adc	r19, r11
    17d2:	25 83       	std	Z+5, r18	; 0x05
    17d4:	36 83       	std	Z+6, r19	; 0x06
    17d6:	83 81       	ldd	r24, Z+3	; 0x03
    17d8:	94 81       	ldd	r25, Z+4	; 0x04
    17da:	82 17       	cp	r24, r18
    17dc:	93 07       	cpc	r25, r19
    17de:	68 f4       	brcc	.+26     	; 0x17fa <udd_ep_trans_complet+0x1c8>
    17e0:	85 83       	std	Z+5, r24	; 0x05
    17e2:	96 83       	std	Z+6, r25	; 0x06
    17e4:	cc 0f       	add	r28, r28
    17e6:	dd 1f       	adc	r29, r29
    17e8:	cc 0f       	add	r28, r28
    17ea:	dd 1f       	adc	r29, r29
    17ec:	cc 0f       	add	r28, r28
    17ee:	dd 1f       	adc	r29, r29
    17f0:	c8 54       	subi	r28, 0x48	; 72
    17f2:	dc 4d       	sbci	r29, 0xDC	; 220
    17f4:	8a 89       	ldd	r24, Y+18	; 0x12
    17f6:	9b 89       	ldd	r25, Y+19	; 0x13
    17f8:	7a c0       	rjmp	.+244    	; 0x18ee <udd_ep_trans_complet+0x2bc>
    17fa:	fe 01       	movw	r30, r28
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	e8 54       	subi	r30, 0x48	; 72
    180a:	fc 4d       	sbci	r31, 0xDC	; 220
    180c:	42 89       	ldd	r20, Z+18	; 0x12
    180e:	53 89       	ldd	r21, Z+19	; 0x13
    1810:	4a 15       	cp	r20, r10
    1812:	5b 05       	cpc	r21, r11
    1814:	09 f0       	breq	.+2      	; 0x1818 <udd_ep_trans_complet+0x1e6>
    1816:	6b c0       	rjmp	.+214    	; 0x18ee <udd_ep_trans_complet+0x2bc>
    1818:	28 17       	cp	r18, r24
    181a:	39 07       	cpc	r19, r25
    181c:	09 f4       	brne	.+2      	; 0x1820 <udd_ep_trans_complet+0x1ee>
    181e:	67 c0       	rjmp	.+206    	; 0x18ee <udd_ep_trans_complet+0x2bc>
    1820:	ac 01       	movw	r20, r24
    1822:	42 1b       	sub	r20, r18
    1824:	53 0b       	sbc	r21, r19
    1826:	9a 01       	movw	r18, r20
    1828:	21 15       	cp	r18, r1
    182a:	54 e0       	ldi	r21, 0x04	; 4
    182c:	35 07       	cpc	r19, r21
    182e:	50 f0       	brcs	.+20     	; 0x1844 <udd_ep_trans_complet+0x212>
    1830:	2f ef       	ldi	r18, 0xFF	; 255
    1832:	33 e0       	ldi	r19, 0x03	; 3
    1834:	c9 01       	movw	r24, r18
    1836:	b4 01       	movw	r22, r8
    1838:	d7 d5       	rcall	.+2990   	; 0x23e8 <__udivmodhi4>
    183a:	d9 01       	movw	r26, r18
    183c:	a8 1b       	sub	r26, r24
    183e:	b9 0b       	sbc	r27, r25
    1840:	cd 01       	movw	r24, r26
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <udd_ep_trans_complet+0x220>
    1844:	c9 01       	movw	r24, r18
    1846:	b4 01       	movw	r22, r8
    1848:	cf d5       	rcall	.+2974   	; 0x23e8 <__udivmodhi4>
    184a:	f9 01       	movw	r30, r18
    184c:	e8 1b       	sub	r30, r24
    184e:	f9 0b       	sbc	r31, r25
    1850:	cf 01       	movw	r24, r30
    1852:	fe 01       	movw	r30, r28
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	e8 54       	subi	r30, 0x48	; 72
    1862:	fc 4d       	sbci	r31, 0xDC	; 220
    1864:	16 86       	std	Z+14, r1	; 0x0e
    1866:	17 86       	std	Z+15, r1	; 0x0f
    1868:	88 15       	cp	r24, r8
    186a:	99 05       	cpc	r25, r9
    186c:	00 f5       	brcc	.+64     	; 0x18ae <udd_ep_trans_complet+0x27c>
    186e:	d8 01       	movw	r26, r16
    1870:	8c 91       	ld	r24, X
    1872:	84 60       	ori	r24, 0x04	; 4
    1874:	8c 93       	st	X, r24
    1876:	b0 e4       	ldi	r27, 0x40	; 64
    1878:	db 9e       	mul	r13, r27
    187a:	c0 01       	movw	r24, r0
    187c:	11 24       	eor	r1, r1
    187e:	81 57       	subi	r24, 0x71	; 113
    1880:	9d 4d       	sbci	r25, 0xDD	; 221
    1882:	fe 01       	movw	r30, r28
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	e8 53       	subi	r30, 0x38	; 56
    1892:	fc 4d       	sbci	r31, 0xDC	; 220
    1894:	80 83       	st	Z, r24
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	cc 0f       	add	r28, r28
    189a:	dd 1f       	adc	r29, r29
    189c:	cc 0f       	add	r28, r28
    189e:	dd 1f       	adc	r29, r29
    18a0:	cc 0f       	add	r28, r28
    18a2:	dd 1f       	adc	r29, r29
    18a4:	c8 54       	subi	r28, 0x48	; 72
    18a6:	dc 4d       	sbci	r29, 0xDC	; 220
    18a8:	8a 8a       	std	Y+18, r8	; 0x12
    18aa:	9b 8a       	std	Y+19, r9	; 0x13
    18ac:	1c c0       	rjmp	.+56     	; 0x18e6 <udd_ep_trans_complet+0x2b4>
    18ae:	f8 01       	movw	r30, r16
    18b0:	41 81       	ldd	r20, Z+1	; 0x01
    18b2:	52 81       	ldd	r21, Z+2	; 0x02
    18b4:	25 81       	ldd	r18, Z+5	; 0x05
    18b6:	36 81       	ldd	r19, Z+6	; 0x06
    18b8:	24 0f       	add	r18, r20
    18ba:	35 1f       	adc	r19, r21
    18bc:	fe 01       	movw	r30, r28
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	e8 53       	subi	r30, 0x38	; 56
    18cc:	fc 4d       	sbci	r31, 0xDC	; 220
    18ce:	20 83       	st	Z, r18
    18d0:	31 83       	std	Z+1, r19	; 0x01
    18d2:	cc 0f       	add	r28, r28
    18d4:	dd 1f       	adc	r29, r29
    18d6:	cc 0f       	add	r28, r28
    18d8:	dd 1f       	adc	r29, r29
    18da:	cc 0f       	add	r28, r28
    18dc:	dd 1f       	adc	r29, r29
    18de:	c8 54       	subi	r28, 0x48	; 72
    18e0:	dc 4d       	sbci	r29, 0xDC	; 220
    18e2:	8a 8b       	std	Y+18, r24	; 0x12
    18e4:	9b 8b       	std	Y+19, r25	; 0x13
    18e6:	f7 01       	movw	r30, r14
    18e8:	02 e0       	ldi	r16, 0x02	; 2
    18ea:	06 93       	lac	Z, r16
    18ec:	13 c0       	rjmp	.+38     	; 0x1914 <udd_ep_trans_complet+0x2e2>
    18ee:	d8 01       	movw	r26, r16
    18f0:	8c 91       	ld	r24, X
    18f2:	80 ff       	sbrs	r24, 0
    18f4:	0f c0       	rjmp	.+30     	; 0x1914 <udd_ep_trans_complet+0x2e2>
    18f6:	8e 7f       	andi	r24, 0xFE	; 254
    18f8:	8c 93       	st	X, r24
    18fa:	17 96       	adiw	r26, 0x07	; 7
    18fc:	ed 91       	ld	r30, X+
    18fe:	fc 91       	ld	r31, X
    1900:	18 97       	sbiw	r26, 0x08	; 8
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	39 f0       	breq	.+14     	; 0x1914 <udd_ep_trans_complet+0x2e2>
    1906:	15 96       	adiw	r26, 0x05	; 5
    1908:	6d 91       	ld	r22, X+
    190a:	7c 91       	ld	r23, X
    190c:	16 97       	sbiw	r26, 0x06	; 6
    190e:	4d 2d       	mov	r20, r13
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	19 95       	eicall
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	bf 90       	pop	r11
    1924:	af 90       	pop	r10
    1926:	9f 90       	pop	r9
    1928:	8f 90       	pop	r8
    192a:	08 95       	ret

0000192c <udd_attach>:
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	1f 92       	push	r1
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8f b7       	in	r24, 0x3f	; 63
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	f8 94       	cli
    193e:	19 81       	ldd	r17, Y+1	; 0x01
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	d6 dc       	rcall	.-1620   	; 0x12f0 <udd_sleep_mode>
    1944:	ea ec       	ldi	r30, 0xCA	; 202
    1946:	f4 e0       	ldi	r31, 0x04	; 4
    1948:	80 e4       	ldi	r24, 0x40	; 64
    194a:	80 83       	st	Z, r24
    194c:	80 e2       	ldi	r24, 0x20	; 32
    194e:	80 83       	st	Z, r24
    1950:	e1 ec       	ldi	r30, 0xC1	; 193
    1952:	f4 e0       	ldi	r31, 0x04	; 4
    1954:	80 81       	ld	r24, Z
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	80 83       	st	Z, r24
    195a:	a9 ec       	ldi	r26, 0xC9	; 201
    195c:	b4 e0       	ldi	r27, 0x04	; 4
    195e:	8c 91       	ld	r24, X
    1960:	82 60       	ori	r24, 0x02	; 2
    1962:	8c 93       	st	X, r24
    1964:	e8 ec       	ldi	r30, 0xC8	; 200
    1966:	f4 e0       	ldi	r31, 0x04	; 4
    1968:	80 81       	ld	r24, Z
    196a:	80 64       	ori	r24, 0x40	; 64
    196c:	80 83       	st	Z, r24
    196e:	8c 91       	ld	r24, X
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	8c 93       	st	X, r24
    1974:	80 81       	ld	r24, Z
    1976:	80 68       	ori	r24, 0x80	; 128
    1978:	80 83       	st	Z, r24
    197a:	1f bf       	out	0x3f, r17	; 63
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	08 95       	ret

00001986 <udd_enable>:
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	1f 92       	push	r1
    1990:	1f 92       	push	r1
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	00 e6       	ldi	r16, 0x60	; 96
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	f8 01       	movw	r30, r16
    199c:	10 82       	st	Z, r1
    199e:	80 e3       	ldi	r24, 0x30	; 48
    19a0:	ce d4       	rcall	.+2460   	; 0x233e <sysclk_enable_usb>
    19a2:	e0 ec       	ldi	r30, 0xC0	; 192
    19a4:	f4 e0       	ldi	r31, 0x04	; 4
    19a6:	80 81       	ld	r24, Z
    19a8:	80 64       	ori	r24, 0x40	; 64
    19aa:	80 83       	st	Z, r24
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	f8 01       	movw	r30, r16
    19b0:	80 83       	st	Z, r24
    19b2:	8f b7       	in	r24, 0x3f	; 63
    19b4:	8a 83       	std	Y+2, r24	; 0x02
    19b6:	f8 94       	cli
    19b8:	1a 81       	ldd	r17, Y+2	; 0x02
    19ba:	e8 eb       	ldi	r30, 0xB8	; 184
    19bc:	f3 e2       	ldi	r31, 0x23	; 35
    19be:	15 86       	std	Z+13, r1	; 0x0d
    19c0:	15 8a       	std	Z+21, r1	; 0x15
    19c2:	15 8e       	std	Z+29, r1	; 0x1d
    19c4:	15 a2       	std	Z+37, r1	; 0x25
    19c6:	15 a6       	std	Z+45, r1	; 0x2d
    19c8:	15 aa       	std	Z+53, r1	; 0x35
    19ca:	ef e4       	ldi	r30, 0x4F	; 79
    19cc:	f3 e2       	ldi	r31, 0x23	; 35
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	80 83       	st	Z, r24
    19d4:	e8 e5       	ldi	r30, 0x58	; 88
    19d6:	f3 e2       	ldi	r31, 0x23	; 35
    19d8:	80 81       	ld	r24, Z
    19da:	8e 7f       	andi	r24, 0xFE	; 254
    19dc:	80 83       	st	Z, r24
    19de:	e1 e6       	ldi	r30, 0x61	; 97
    19e0:	f3 e2       	ldi	r31, 0x23	; 35
    19e2:	80 81       	ld	r24, Z
    19e4:	8e 7f       	andi	r24, 0xFE	; 254
    19e6:	80 83       	st	Z, r24
    19e8:	ea e6       	ldi	r30, 0x6A	; 106
    19ea:	f3 e2       	ldi	r31, 0x23	; 35
    19ec:	80 81       	ld	r24, Z
    19ee:	8e 7f       	andi	r24, 0xFE	; 254
    19f0:	80 83       	st	Z, r24
    19f2:	6a e1       	ldi	r22, 0x1A	; 26
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	e7 d4       	rcall	.+2510   	; 0x23c8 <nvm_read_byte>
    19fa:	8f 3f       	cpi	r24, 0xFF	; 255
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <udd_enable+0x7e>
    19fe:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <udd_enable+0x84>
    1a04:	8f e1       	ldi	r24, 0x1F	; 31
    1a06:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1a0a:	6b e1       	ldi	r22, 0x1B	; 27
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	db d4       	rcall	.+2486   	; 0x23c8 <nvm_read_byte>
    1a12:	8f 3f       	cpi	r24, 0xFF	; 255
    1a14:	19 f0       	breq	.+6      	; 0x1a1c <udd_enable+0x96>
    1a16:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1a1a:	03 c0       	rjmp	.+6      	; 0x1a22 <udd_enable+0x9c>
    1a1c:	8f e1       	ldi	r24, 0x1F	; 31
    1a1e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1a22:	e0 ec       	ldi	r30, 0xC0	; 192
    1a24:	f4 e0       	ldi	r31, 0x04	; 4
    1a26:	80 81       	ld	r24, Z
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	80 83       	st	Z, r24
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	80 83       	st	Z, r24
    1a32:	80 81       	ld	r24, Z
    1a34:	80 61       	ori	r24, 0x10	; 16
    1a36:	80 83       	st	Z, r24
    1a38:	84 ec       	ldi	r24, 0xC4	; 196
    1a3a:	93 e2       	ldi	r25, 0x23	; 35
    1a3c:	86 83       	std	Z+6, r24	; 0x06
    1a3e:	97 83       	std	Z+7, r25	; 0x07
    1a40:	80 81       	ld	r24, Z
    1a42:	80 62       	ori	r24, 0x20	; 32
    1a44:	80 83       	st	Z, r24
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    1a4c:	e8 ec       	ldi	r30, 0xC8	; 200
    1a4e:	f4 e0       	ldi	r31, 0x04	; 4
    1a50:	80 81       	ld	r24, Z
    1a52:	81 60       	ori	r24, 0x01	; 1
    1a54:	80 83       	st	Z, r24
    1a56:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <udd_b_idle>
    1a5a:	80 91 0e 24 	lds	r24, 0x240E	; 0x80240e <sleepmgr_locks+0x5>
    1a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <udd_enable+0xde>
    1a62:	ff cf       	rjmp	.-2      	; 0x1a62 <udd_enable+0xdc>
    1a64:	8f b7       	in	r24, 0x3f	; 63
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	f8 94       	cli
    1a6a:	99 81       	ldd	r25, Y+1	; 0x01
    1a6c:	e9 e0       	ldi	r30, 0x09	; 9
    1a6e:	f4 e2       	ldi	r31, 0x24	; 36
    1a70:	85 81       	ldd	r24, Z+5	; 0x05
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	85 83       	std	Z+5, r24	; 0x05
    1a76:	9f bf       	out	0x3f, r25	; 63
    1a78:	59 df       	rcall	.-334    	; 0x192c <udd_attach>
    1a7a:	1f bf       	out	0x3f, r17	; 63
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <udd_is_high_speed>:
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	08 95       	ret

00001a8e <udd_set_address>:
    1a8e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1a92:	08 95       	ret

00001a94 <udd_getaddress>:
    1a94:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1a98:	08 95       	ret

00001a9a <udd_get_frame_number>:
    1a9a:	80 91 f4 23 	lds	r24, 0x23F4	; 0x8023f4 <udd_sram+0x3c>
    1a9e:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <udd_sram+0x3d>
    1aa2:	08 95       	ret

00001aa4 <udd_get_micro_frame_number>:
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	08 95       	ret

00001aaa <udd_set_setup_payload>:
    1aaa:	e9 ef       	ldi	r30, 0xF9	; 249
    1aac:	f3 e2       	ldi	r31, 0x23	; 35
    1aae:	80 87       	std	Z+8, r24	; 0x08
    1ab0:	91 87       	std	Z+9, r25	; 0x09
    1ab2:	62 87       	std	Z+10, r22	; 0x0a
    1ab4:	73 87       	std	Z+11, r23	; 0x0b
    1ab6:	08 95       	ret

00001ab8 <udd_ep_alloc>:
    1ab8:	28 2f       	mov	r18, r24
    1aba:	2f 70       	andi	r18, 0x0F	; 15
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	22 0f       	add	r18, r18
    1ac0:	33 1f       	adc	r19, r19
    1ac2:	08 2e       	mov	r0, r24
    1ac4:	00 0c       	add	r0, r0
    1ac6:	99 0b       	sbc	r25, r25
    1ac8:	88 27       	eor	r24, r24
    1aca:	99 0f       	add	r25, r25
    1acc:	88 1f       	adc	r24, r24
    1ace:	99 27       	eor	r25, r25
    1ad0:	82 0f       	add	r24, r18
    1ad2:	93 1f       	adc	r25, r19
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	e8 54       	subi	r30, 0x48	; 72
    1ae4:	fc 4d       	sbci	r31, 0xDC	; 220
    1ae6:	25 85       	ldd	r18, Z+13	; 0x0d
    1ae8:	20 7c       	andi	r18, 0xC0	; 192
    1aea:	09 f0       	breq	.+2      	; 0x1aee <udd_ep_alloc+0x36>
    1aec:	69 c0       	rjmp	.+210    	; 0x1bc0 <udd_ep_alloc+0x108>
    1aee:	63 70       	andi	r22, 0x03	; 3
    1af0:	61 30       	cpi	r22, 0x01	; 1
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <udd_ep_alloc+0x40>
    1af4:	18 f4       	brcc	.+6      	; 0x1afc <udd_ep_alloc+0x44>
    1af6:	04 c0       	rjmp	.+8      	; 0x1b00 <udd_ep_alloc+0x48>
    1af8:	20 ec       	ldi	r18, 0xC0	; 192
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <udd_ep_alloc+0x4a>
    1afc:	20 e8       	ldi	r18, 0x80	; 128
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <udd_ep_alloc+0x4a>
    1b00:	20 e4       	ldi	r18, 0x40	; 64
    1b02:	40 38       	cpi	r20, 0x80	; 128
    1b04:	51 05       	cpc	r21, r1
    1b06:	e9 f0       	breq	.+58     	; 0x1b42 <udd_ep_alloc+0x8a>
    1b08:	50 f4       	brcc	.+20     	; 0x1b1e <udd_ep_alloc+0x66>
    1b0a:	40 32       	cpi	r20, 0x20	; 32
    1b0c:	51 05       	cpc	r21, r1
    1b0e:	a9 f0       	breq	.+42     	; 0x1b3a <udd_ep_alloc+0x82>
    1b10:	40 34       	cpi	r20, 0x40	; 64
    1b12:	51 05       	cpc	r21, r1
    1b14:	a1 f0       	breq	.+40     	; 0x1b3e <udd_ep_alloc+0x86>
    1b16:	40 31       	cpi	r20, 0x10	; 16
    1b18:	51 05       	cpc	r21, r1
    1b1a:	d9 f4       	brne	.+54     	; 0x1b52 <udd_ep_alloc+0x9a>
    1b1c:	0c c0       	rjmp	.+24     	; 0x1b36 <udd_ep_alloc+0x7e>
    1b1e:	41 15       	cp	r20, r1
    1b20:	32 e0       	ldi	r19, 0x02	; 2
    1b22:	53 07       	cpc	r21, r19
    1b24:	91 f0       	breq	.+36     	; 0x1b4a <udd_ep_alloc+0x92>
    1b26:	4f 3f       	cpi	r20, 0xFF	; 255
    1b28:	33 e0       	ldi	r19, 0x03	; 3
    1b2a:	53 07       	cpc	r21, r19
    1b2c:	81 f0       	breq	.+32     	; 0x1b4e <udd_ep_alloc+0x96>
    1b2e:	41 15       	cp	r20, r1
    1b30:	51 40       	sbci	r21, 0x01	; 1
    1b32:	79 f4       	brne	.+30     	; 0x1b52 <udd_ep_alloc+0x9a>
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <udd_ep_alloc+0x8e>
    1b36:	41 e0       	ldi	r20, 0x01	; 1
    1b38:	0d c0       	rjmp	.+26     	; 0x1b54 <udd_ep_alloc+0x9c>
    1b3a:	42 e0       	ldi	r20, 0x02	; 2
    1b3c:	0b c0       	rjmp	.+22     	; 0x1b54 <udd_ep_alloc+0x9c>
    1b3e:	43 e0       	ldi	r20, 0x03	; 3
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <udd_ep_alloc+0x9c>
    1b42:	44 e0       	ldi	r20, 0x04	; 4
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <udd_ep_alloc+0x9c>
    1b46:	45 e0       	ldi	r20, 0x05	; 5
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <udd_ep_alloc+0x9c>
    1b4a:	46 e0       	ldi	r20, 0x06	; 6
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <udd_ep_alloc+0x9c>
    1b4e:	47 e0       	ldi	r20, 0x07	; 7
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <udd_ep_alloc+0x9c>
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	fc 01       	movw	r30, r24
    1b56:	ee 0f       	add	r30, r30
    1b58:	ff 1f       	adc	r31, r31
    1b5a:	ee 0f       	add	r30, r30
    1b5c:	ff 1f       	adc	r31, r31
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	e8 54       	subi	r30, 0x48	; 72
    1b64:	fc 4d       	sbci	r31, 0xDC	; 220
    1b66:	15 86       	std	Z+13, r1	; 0x0d
    1b68:	36 e0       	ldi	r19, 0x06	; 6
    1b6a:	34 87       	std	Z+12, r19	; 0x0c
    1b6c:	24 2b       	or	r18, r20
    1b6e:	25 87       	std	Z+13, r18	; 0x0d
    1b70:	fc 01       	movw	r30, r24
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	e8 54       	subi	r30, 0x48	; 72
    1b80:	fc 4d       	sbci	r31, 0xDC	; 220
    1b82:	25 85       	ldd	r18, Z+13	; 0x0d
    1b84:	20 7c       	andi	r18, 0xC0	; 192
    1b86:	20 3c       	cpi	r18, 0xC0	; 192
    1b88:	69 f4       	brne	.+26     	; 0x1ba4 <udd_ep_alloc+0xec>
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	ee 0f       	add	r30, r30
    1b96:	ff 1f       	adc	r31, r31
    1b98:	e8 54       	subi	r30, 0x48	; 72
    1b9a:	fc 4d       	sbci	r31, 0xDC	; 220
    1b9c:	25 85       	ldd	r18, Z+13	; 0x0d
    1b9e:	27 70       	andi	r18, 0x07	; 7
    1ba0:	27 30       	cpi	r18, 0x07	; 7
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <udd_ep_alloc+0x10c>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e8 54       	subi	r30, 0x48	; 72
    1bb4:	fc 4d       	sbci	r31, 0xDC	; 220
    1bb6:	85 85       	ldd	r24, Z+13	; 0x0d
    1bb8:	80 62       	ori	r24, 0x20	; 32
    1bba:	85 87       	std	Z+13, r24	; 0x0d
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	08 95       	ret
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	08 95       	ret
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	08 95       	ret

00001bc8 <udd_ep_is_halted>:
    1bc8:	e8 2f       	mov	r30, r24
    1bca:	ef 70       	andi	r30, 0x0F	; 15
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	08 2e       	mov	r0, r24
    1bd4:	00 0c       	add	r0, r0
    1bd6:	99 0b       	sbc	r25, r25
    1bd8:	88 27       	eor	r24, r24
    1bda:	99 0f       	add	r25, r25
    1bdc:	88 1f       	adc	r24, r24
    1bde:	99 27       	eor	r25, r25
    1be0:	e8 0f       	add	r30, r24
    1be2:	f9 1f       	adc	r31, r25
    1be4:	ee 0f       	add	r30, r30
    1be6:	ff 1f       	adc	r31, r31
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	ee 0f       	add	r30, r30
    1bee:	ff 1f       	adc	r31, r31
    1bf0:	e8 54       	subi	r30, 0x48	; 72
    1bf2:	fc 4d       	sbci	r31, 0xDC	; 220
    1bf4:	85 85       	ldd	r24, Z+13	; 0x0d
    1bf6:	82 fb       	bst	r24, 2
    1bf8:	88 27       	eor	r24, r24
    1bfa:	80 f9       	bld	r24, 0
    1bfc:	08 95       	ret

00001bfe <udd_ep_clear_halt>:
    1bfe:	0f 93       	push	r16
    1c00:	28 2f       	mov	r18, r24
    1c02:	2f 70       	andi	r18, 0x0F	; 15
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	a9 01       	movw	r20, r18
    1c08:	44 0f       	add	r20, r20
    1c0a:	55 1f       	adc	r21, r21
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	08 2e       	mov	r0, r24
    1c10:	00 0c       	add	r0, r0
    1c12:	33 0b       	sbc	r19, r19
    1c14:	22 27       	eor	r18, r18
    1c16:	33 0f       	add	r19, r19
    1c18:	22 1f       	adc	r18, r18
    1c1a:	33 27       	eor	r19, r19
    1c1c:	24 0f       	add	r18, r20
    1c1e:	35 1f       	adc	r19, r21
    1c20:	a9 01       	movw	r20, r18
    1c22:	44 0f       	add	r20, r20
    1c24:	55 1f       	adc	r21, r21
    1c26:	44 0f       	add	r20, r20
    1c28:	55 1f       	adc	r21, r21
    1c2a:	44 0f       	add	r20, r20
    1c2c:	55 1f       	adc	r21, r21
    1c2e:	fa 01       	movw	r30, r20
    1c30:	ec 53       	subi	r30, 0x3C	; 60
    1c32:	fc 4d       	sbci	r31, 0xDC	; 220
    1c34:	01 e0       	ldi	r16, 0x01	; 1
    1c36:	06 93       	lac	Z, r16
    1c38:	fa 01       	movw	r30, r20
    1c3a:	e8 54       	subi	r30, 0x48	; 72
    1c3c:	fc 4d       	sbci	r31, 0xDC	; 220
    1c3e:	95 85       	ldd	r25, Z+13	; 0x0d
    1c40:	92 ff       	sbrs	r25, 2
    1c42:	11 c0       	rjmp	.+34     	; 0x1c66 <udd_ep_clear_halt+0x68>
    1c44:	fa 01       	movw	r30, r20
    1c46:	e8 54       	subi	r30, 0x48	; 72
    1c48:	fc 4d       	sbci	r31, 0xDC	; 220
    1c4a:	95 85       	ldd	r25, Z+13	; 0x0d
    1c4c:	9b 7f       	andi	r25, 0xFB	; 251
    1c4e:	95 87       	std	Z+13, r25	; 0x0d
    1c50:	64 dc       	rcall	.-1848   	; 0x151a <udd_ep_get_job>
    1c52:	fc 01       	movw	r30, r24
    1c54:	80 81       	ld	r24, Z
    1c56:	80 ff       	sbrs	r24, 0
    1c58:	06 c0       	rjmp	.+12     	; 0x1c66 <udd_ep_clear_halt+0x68>
    1c5a:	8e 7f       	andi	r24, 0xFE	; 254
    1c5c:	80 83       	st	Z, r24
    1c5e:	07 80       	ldd	r0, Z+7	; 0x07
    1c60:	f0 85       	ldd	r31, Z+8	; 0x08
    1c62:	e0 2d       	mov	r30, r0
    1c64:	19 95       	eicall
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	0f 91       	pop	r16
    1c6a:	08 95       	ret

00001c6c <udd_ep_run>:
    1c6c:	5f 92       	push	r5
    1c6e:	6f 92       	push	r6
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	1f 92       	push	r1
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	78 2e       	mov	r7, r24
    1c92:	66 2e       	mov	r6, r22
    1c94:	4a 01       	movw	r8, r20
    1c96:	59 01       	movw	r10, r18
    1c98:	40 dc       	rcall	.-1920   	; 0x151a <udd_ep_get_job>
    1c9a:	6c 01       	movw	r12, r24
    1c9c:	57 2c       	mov	r5, r7
    1c9e:	55 1c       	adc	r5, r5
    1ca0:	55 24       	eor	r5, r5
    1ca2:	55 1c       	adc	r5, r5
    1ca4:	87 2d       	mov	r24, r7
    1ca6:	8f 70       	andi	r24, 0x0F	; 15
    1ca8:	e8 2e       	mov	r14, r24
    1caa:	f1 2c       	mov	r15, r1
    1cac:	ee 0c       	add	r14, r14
    1cae:	ff 1c       	adc	r15, r15
    1cb0:	e5 0c       	add	r14, r5
    1cb2:	f1 1c       	adc	r15, r1
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	ee 0f       	add	r30, r30
    1cbc:	ff 1f       	adc	r31, r31
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	e8 54       	subi	r30, 0x48	; 72
    1cc4:	fc 4d       	sbci	r31, 0xDC	; 220
    1cc6:	85 85       	ldd	r24, Z+13	; 0x0d
    1cc8:	80 7c       	andi	r24, 0xC0	; 192
    1cca:	09 f4       	brne	.+2      	; 0x1cce <udd_ep_run+0x62>
    1ccc:	81 c0       	rjmp	.+258    	; 0x1dd0 <udd_ep_run+0x164>
    1cce:	f7 01       	movw	r30, r14
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	e8 54       	subi	r30, 0x48	; 72
    1cde:	fc 4d       	sbci	r31, 0xDC	; 220
    1ce0:	85 85       	ldd	r24, Z+13	; 0x0d
    1ce2:	80 7c       	andi	r24, 0xC0	; 192
    1ce4:	80 3c       	cpi	r24, 0xC0	; 192
    1ce6:	61 f0       	breq	.+24     	; 0x1d00 <udd_ep_run+0x94>
    1ce8:	f7 01       	movw	r30, r14
    1cea:	ee 0f       	add	r30, r30
    1cec:	ff 1f       	adc	r31, r31
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	ee 0f       	add	r30, r30
    1cf4:	ff 1f       	adc	r31, r31
    1cf6:	e8 54       	subi	r30, 0x48	; 72
    1cf8:	fc 4d       	sbci	r31, 0xDC	; 220
    1cfa:	85 85       	ldd	r24, Z+13	; 0x0d
    1cfc:	82 fd       	sbrc	r24, 2
    1cfe:	6a c0       	rjmp	.+212    	; 0x1dd4 <udd_ep_run+0x168>
    1d00:	8f b7       	in	r24, 0x3f	; 63
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	f8 94       	cli
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	f6 01       	movw	r30, r12
    1d0a:	90 81       	ld	r25, Z
    1d0c:	90 ff       	sbrs	r25, 0
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <udd_ep_run+0xaa>
    1d10:	8f bf       	out	0x3f, r24	; 63
    1d12:	51 2c       	mov	r5, r1
    1d14:	60 c0       	rjmp	.+192    	; 0x1dd6 <udd_ep_run+0x16a>
    1d16:	f6 01       	movw	r30, r12
    1d18:	90 81       	ld	r25, Z
    1d1a:	91 60       	ori	r25, 0x01	; 1
    1d1c:	90 83       	st	Z, r25
    1d1e:	8f bf       	out	0x3f, r24	; 63
    1d20:	81 82       	std	Z+1, r8	; 0x01
    1d22:	92 82       	std	Z+2, r9	; 0x02
    1d24:	a3 82       	std	Z+3, r10	; 0x03
    1d26:	b4 82       	std	Z+4, r11	; 0x04
    1d28:	15 82       	std	Z+5, r1	; 0x05
    1d2a:	16 82       	std	Z+6, r1	; 0x06
    1d2c:	07 83       	std	Z+7, r16	; 0x07
    1d2e:	10 87       	std	Z+8, r17	; 0x08
    1d30:	61 10       	cpse	r6, r1
    1d32:	06 c0       	rjmp	.+12     	; 0x1d40 <udd_ep_run+0xd4>
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	a1 14       	cp	r10, r1
    1d38:	b1 04       	cpc	r11, r1
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <udd_ep_run+0xd6>
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <udd_ep_run+0xd6>
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	f6 01       	movw	r30, r12
    1d44:	80 81       	ld	r24, Z
    1d46:	90 fb       	bst	r25, 0
    1d48:	81 f9       	bld	r24, 1
    1d4a:	8b 7f       	andi	r24, 0xFB	; 251
    1d4c:	80 83       	st	Z, r24
    1d4e:	55 20       	and	r5, r5
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <udd_ep_run+0xfe>
    1d52:	f7 01       	movw	r30, r14
    1d54:	ee 0f       	add	r30, r30
    1d56:	ff 1f       	adc	r31, r31
    1d58:	ee 0f       	add	r30, r30
    1d5a:	ff 1f       	adc	r31, r31
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	e8 54       	subi	r30, 0x48	; 72
    1d62:	fc 4d       	sbci	r31, 0xDC	; 220
    1d64:	12 8a       	std	Z+18, r1	; 0x12
    1d66:	13 8a       	std	Z+19, r1	; 0x13
    1d68:	2e c0       	rjmp	.+92     	; 0x1dc6 <udd_ep_run+0x15a>
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	ee 0f       	add	r30, r30
    1d72:	ff 1f       	adc	r31, r31
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	e8 54       	subi	r30, 0x48	; 72
    1d7a:	fc 4d       	sbci	r31, 0xDC	; 220
    1d7c:	85 85       	ldd	r24, Z+13	; 0x0d
    1d7e:	80 7c       	andi	r24, 0xC0	; 192
    1d80:	80 3c       	cpi	r24, 0xC0	; 192
    1d82:	a1 f4       	brne	.+40     	; 0x1dac <udd_ep_run+0x140>
    1d84:	c7 01       	movw	r24, r14
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	8c 53       	subi	r24, 0x3C	; 60
    1d94:	9c 4d       	sbci	r25, 0xDC	; 220
    1d96:	99 db       	rcall	.-2254   	; 0x14ca <udd_ep_get_size>
    1d98:	bc 01       	movw	r22, r24
    1d9a:	c5 01       	movw	r24, r10
    1d9c:	25 d3       	rcall	.+1610   	; 0x23e8 <__udivmodhi4>
    1d9e:	89 2b       	or	r24, r25
    1da0:	29 f0       	breq	.+10     	; 0x1dac <udd_ep_run+0x140>
    1da2:	f6 01       	movw	r30, r12
    1da4:	80 81       	ld	r24, Z
    1da6:	8e 7f       	andi	r24, 0xFE	; 254
    1da8:	80 83       	st	Z, r24
    1daa:	15 c0       	rjmp	.+42     	; 0x1dd6 <udd_ep_run+0x16a>
    1dac:	f7 01       	movw	r30, r14
    1dae:	ee 0f       	add	r30, r30
    1db0:	ff 1f       	adc	r31, r31
    1db2:	ee 0f       	add	r30, r30
    1db4:	ff 1f       	adc	r31, r31
    1db6:	ee 0f       	add	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	e8 54       	subi	r30, 0x48	; 72
    1dbc:	fc 4d       	sbci	r31, 0xDC	; 220
    1dbe:	16 86       	std	Z+14, r1	; 0x0e
    1dc0:	17 86       	std	Z+15, r1	; 0x0f
    1dc2:	12 8a       	std	Z+18, r1	; 0x12
    1dc4:	13 8a       	std	Z+19, r1	; 0x13
    1dc6:	87 2d       	mov	r24, r7
    1dc8:	34 dc       	rcall	.-1944   	; 0x1632 <udd_ep_trans_complet>
    1dca:	55 24       	eor	r5, r5
    1dcc:	53 94       	inc	r5
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <udd_ep_run+0x16a>
    1dd0:	51 2c       	mov	r5, r1
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <udd_ep_run+0x16a>
    1dd4:	51 2c       	mov	r5, r1
    1dd6:	85 2d       	mov	r24, r5
    1dd8:	0f 90       	pop	r0
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	bf 90       	pop	r11
    1dec:	af 90       	pop	r10
    1dee:	9f 90       	pop	r9
    1df0:	8f 90       	pop	r8
    1df2:	7f 90       	pop	r7
    1df4:	6f 90       	pop	r6
    1df6:	5f 90       	pop	r5
    1df8:	08 95       	ret

00001dfa <udd_ep_abort>:
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	18 2f       	mov	r17, r24
    1e06:	f8 2e       	mov	r15, r24
    1e08:	ff 1c       	adc	r15, r15
    1e0a:	ff 24       	eor	r15, r15
    1e0c:	ff 1c       	adc	r15, r15
    1e0e:	c8 2f       	mov	r28, r24
    1e10:	cf 70       	andi	r28, 0x0F	; 15
    1e12:	d0 e0       	ldi	r29, 0x00	; 0
    1e14:	cc 0f       	add	r28, r28
    1e16:	dd 1f       	adc	r29, r29
    1e18:	cf 0d       	add	r28, r15
    1e1a:	d1 1d       	adc	r29, r1
    1e1c:	7e db       	rcall	.-2308   	; 0x151a <udd_ep_get_job>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	fe 01       	movw	r30, r28
    1e22:	ee 0f       	add	r30, r30
    1e24:	ff 1f       	adc	r31, r31
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	ec 53       	subi	r30, 0x3C	; 60
    1e30:	fc 4d       	sbci	r31, 0xDC	; 220
    1e32:	02 e0       	ldi	r16, 0x02	; 2
    1e34:	05 93       	las	Z, r16
    1e36:	8c 91       	ld	r24, X
    1e38:	80 ff       	sbrs	r24, 0
    1e3a:	22 c0       	rjmp	.+68     	; 0x1e80 <udd_ep_abort+0x86>
    1e3c:	8e 7f       	andi	r24, 0xFE	; 254
    1e3e:	8c 93       	st	X, r24
    1e40:	17 96       	adiw	r26, 0x07	; 7
    1e42:	ed 91       	ld	r30, X+
    1e44:	fc 91       	ld	r31, X
    1e46:	18 97       	sbiw	r26, 0x08	; 8
    1e48:	30 97       	sbiw	r30, 0x00	; 0
    1e4a:	d1 f0       	breq	.+52     	; 0x1e80 <udd_ep_abort+0x86>
    1e4c:	ff 20       	and	r15, r15
    1e4e:	59 f0       	breq	.+22     	; 0x1e66 <udd_ep_abort+0x6c>
    1e50:	cc 0f       	add	r28, r28
    1e52:	dd 1f       	adc	r29, r29
    1e54:	cc 0f       	add	r28, r28
    1e56:	dd 1f       	adc	r29, r29
    1e58:	cc 0f       	add	r28, r28
    1e5a:	dd 1f       	adc	r29, r29
    1e5c:	c8 54       	subi	r28, 0x48	; 72
    1e5e:	dc 4d       	sbci	r29, 0xDC	; 220
    1e60:	6a 89       	ldd	r22, Y+18	; 0x12
    1e62:	7b 89       	ldd	r23, Y+19	; 0x13
    1e64:	0a c0       	rjmp	.+20     	; 0x1e7a <udd_ep_abort+0x80>
    1e66:	cc 0f       	add	r28, r28
    1e68:	dd 1f       	adc	r29, r29
    1e6a:	cc 0f       	add	r28, r28
    1e6c:	dd 1f       	adc	r29, r29
    1e6e:	cc 0f       	add	r28, r28
    1e70:	dd 1f       	adc	r29, r29
    1e72:	c8 54       	subi	r28, 0x48	; 72
    1e74:	dc 4d       	sbci	r29, 0xDC	; 220
    1e76:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e78:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e7a:	41 2f       	mov	r20, r17
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	19 95       	eicall
    1e80:	df 91       	pop	r29
    1e82:	cf 91       	pop	r28
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	ff 90       	pop	r15
    1e8a:	08 95       	ret

00001e8c <udd_ep_free>:
    1e8c:	cf 93       	push	r28
    1e8e:	c8 2f       	mov	r28, r24
    1e90:	b4 df       	rcall	.-152    	; 0x1dfa <udd_ep_abort>
    1e92:	ec 2f       	mov	r30, r28
    1e94:	ef 70       	andi	r30, 0x0F	; 15
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	8c 2f       	mov	r24, r28
    1e9e:	cc 0f       	add	r28, r28
    1ea0:	99 0b       	sbc	r25, r25
    1ea2:	88 27       	eor	r24, r24
    1ea4:	99 0f       	add	r25, r25
    1ea6:	88 1f       	adc	r24, r24
    1ea8:	99 27       	eor	r25, r25
    1eaa:	e8 0f       	add	r30, r24
    1eac:	f9 1f       	adc	r31, r25
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e8 54       	subi	r30, 0x48	; 72
    1ebc:	fc 4d       	sbci	r31, 0xDC	; 220
    1ebe:	15 86       	std	Z+13, r1	; 0x0d
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <udd_ep_set_halt>:
    1ec4:	e8 2f       	mov	r30, r24
    1ec6:	ef 70       	andi	r30, 0x0F	; 15
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	28 2f       	mov	r18, r24
    1ed0:	08 2e       	mov	r0, r24
    1ed2:	00 0c       	add	r0, r0
    1ed4:	33 0b       	sbc	r19, r19
    1ed6:	22 27       	eor	r18, r18
    1ed8:	33 0f       	add	r19, r19
    1eda:	22 1f       	adc	r18, r18
    1edc:	33 27       	eor	r19, r19
    1ede:	e2 0f       	add	r30, r18
    1ee0:	f3 1f       	adc	r31, r19
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	e8 54       	subi	r30, 0x48	; 72
    1ef0:	fc 4d       	sbci	r31, 0xDC	; 220
    1ef2:	95 85       	ldd	r25, Z+13	; 0x0d
    1ef4:	94 60       	ori	r25, 0x04	; 4
    1ef6:	95 87       	std	Z+13, r25	; 0x0d
    1ef8:	80 df       	rcall	.-256    	; 0x1dfa <udd_ep_abort>
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	08 95       	ret

00001efe <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1efe:	1f 92       	push	r1
    1f00:	0f 92       	push	r0
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	0f 92       	push	r0
    1f06:	11 24       	eor	r1, r1
    1f08:	08 b6       	in	r0, 0x38	; 56
    1f0a:	0f 92       	push	r0
    1f0c:	18 be       	out	0x38, r1	; 56
    1f0e:	09 b6       	in	r0, 0x39	; 57
    1f10:	0f 92       	push	r0
    1f12:	19 be       	out	0x39, r1	; 57
    1f14:	0b b6       	in	r0, 0x3b	; 59
    1f16:	0f 92       	push	r0
    1f18:	1b be       	out	0x3b, r1	; 59
    1f1a:	0f 93       	push	r16
    1f1c:	2f 93       	push	r18
    1f1e:	3f 93       	push	r19
    1f20:	4f 93       	push	r20
    1f22:	5f 93       	push	r21
    1f24:	6f 93       	push	r22
    1f26:	7f 93       	push	r23
    1f28:	8f 93       	push	r24
    1f2a:	9f 93       	push	r25
    1f2c:	af 93       	push	r26
    1f2e:	bf 93       	push	r27
    1f30:	ef 93       	push	r30
    1f32:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1f34:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1f38:	88 23       	and	r24, r24
    1f3a:	34 f4       	brge	.+12     	; 0x1f48 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    1f3c:	80 e8       	ldi	r24, 0x80	; 128
    1f3e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    1f42:	0e 94 c6 06 	call	0xd8c	; 0xd8c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1f46:	86 c0       	rjmp	.+268    	; 0x2054 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1f48:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1f4c:	82 ff       	sbrs	r24, 2
    1f4e:	20 c0       	rjmp	.+64     	; 0x1f90 <__vector_125+0x92>
		udd_ack_underflow_event();
    1f50:	84 e0       	ldi	r24, 0x04	; 4
    1f52:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    1f56:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <udd_sram+0x14>
    1f5a:	86 ff       	sbrs	r24, 6
    1f5c:	7b c0       	rjmp	.+246    	; 0x2054 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1f5e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1f62:	81 fd       	sbrc	r24, 1
    1f64:	77 c0       	rjmp	.+238    	; 0x2054 <__vector_125+0x156>
    1f66:	f4 da       	rcall	.-2584   	; 0x1550 <udd_ctrl_interrupt_tc_setup>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	74 c0       	rjmp	.+232    	; 0x2054 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1f6c:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_ep_control_state>
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1f74:	28 da       	rcall	.-2992   	; 0x13c6 <udd_ctrl_send_zlp_in>
    1f76:	6e c0       	rjmp	.+220    	; 0x2054 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1f78:	84 30       	cpi	r24, 0x04	; 4
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <__vector_125+0x80>
    1f7c:	6b c0       	rjmp	.+214    	; 0x2054 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    1f7e:	ed ec       	ldi	r30, 0xCD	; 205
    1f80:	f3 e2       	ldi	r31, 0x23	; 35
    1f82:	04 e0       	ldi	r16, 0x04	; 4
    1f84:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1f86:	e5 ec       	ldi	r30, 0xC5	; 197
    1f88:	f3 e2       	ldi	r31, 0x23	; 35
    1f8a:	04 e0       	ldi	r16, 0x04	; 4
    1f8c:	05 93       	las	Z, r16
    1f8e:	62 c0       	rjmp	.+196    	; 0x2054 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1f90:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    1f94:	81 ff       	sbrs	r24, 1
    1f96:	59 c0       	rjmp	.+178    	; 0x204a <__vector_125+0x14c>
		udd_ack_overflow_event();
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    1f9e:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <udd_sram+0xc>
    1fa2:	86 ff       	sbrs	r24, 6
    1fa4:	57 c0       	rjmp	.+174    	; 0x2054 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1fa6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    1faa:	81 fd       	sbrc	r24, 1
    1fac:	53 c0       	rjmp	.+166    	; 0x2054 <__vector_125+0x156>
    1fae:	d0 da       	rcall	.-2656   	; 0x1550 <udd_ctrl_interrupt_tc_setup>
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	50 c0       	rjmp	.+160    	; 0x2054 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1fb4:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_ep_control_state>
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	41 f4       	brne	.+16     	; 0x1fcc <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1fbc:	84 e0       	ldi	r24, 0x04	; 4
    1fbe:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1fc2:	e4 ec       	ldi	r30, 0xC4	; 196
    1fc4:	f3 e2       	ldi	r31, 0x23	; 35
    1fc6:	02 e0       	ldi	r16, 0x02	; 2
    1fc8:	06 93       	lac	Z, r16
    1fca:	44 c0       	rjmp	.+136    	; 0x2054 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1fcc:	83 30       	cpi	r24, 0x03	; 3
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <__vector_125+0xd4>
    1fd0:	41 c0       	rjmp	.+130    	; 0x2054 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1fd2:	ed ec       	ldi	r30, 0xCD	; 205
    1fd4:	f3 e2       	ldi	r31, 0x23	; 35
    1fd6:	04 e0       	ldi	r16, 0x04	; 4
    1fd8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1fda:	e5 ec       	ldi	r30, 0xC5	; 197
    1fdc:	f3 e2       	ldi	r31, 0x23	; 35
    1fde:	04 e0       	ldi	r16, 0x04	; 4
    1fe0:	05 93       	las	Z, r16
    1fe2:	38 c0       	rjmp	.+112    	; 0x2054 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1fe4:	80 e1       	ldi	r24, 0x10	; 16
    1fe6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	06 df       	rcall	.-500    	; 0x1dfa <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1fee:	81 e8       	ldi	r24, 0x81	; 129
    1ff0:	04 df       	rcall	.-504    	; 0x1dfa <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1ff2:	82 e0       	ldi	r24, 0x02	; 2
    1ff4:	02 df       	rcall	.-508    	; 0x1dfa <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1ff6:	82 e8       	ldi	r24, 0x82	; 130
    1ff8:	00 df       	rcall	.-512    	; 0x1dfa <udd_ep_abort>
		}
#endif
		udc_reset();
    1ffa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    1ffe:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2002:	e8 eb       	ldi	r30, 0xB8	; 184
    2004:	f3 e2       	ldi	r31, 0x23	; 35
    2006:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2008:	96 e0       	ldi	r25, 0x06	; 6
    200a:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    200c:	83 e4       	ldi	r24, 0x43	; 67
    200e:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2010:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2012:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2014:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2016:	83 e7       	ldi	r24, 0x73	; 115
    2018:	93 e2       	ldi	r25, 0x23	; 35
    201a:	80 8b       	std	Z+16, r24	; 0x10
    201c:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    201e:	a0 d9       	rcall	.-3264   	; 0x1360 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2020:	19 c0       	rjmp	.+50     	; 0x2054 <__vector_125+0x156>
	}

	if (udd_is_suspend_event()) {
    2022:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2026:	86 ff       	sbrs	r24, 6
    2028:	06 c0       	rjmp	.+12     	; 0x2036 <__vector_125+0x138>
		udd_ack_suspend_event();
    202a:	80 e4       	ldi	r24, 0x40	; 64
    202c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	5e d9       	rcall	.-3396   	; 0x12f0 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <__vector_125+0x156>
	}

	if (udd_is_resume_event()) {
    2036:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    203a:	85 ff       	sbrs	r24, 5
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <__vector_125+0x156>
		udd_ack_resume_event();
    203e:	80 e2       	ldi	r24, 0x20	; 32
    2040:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	54 d9       	rcall	.-3416   	; 0x12f0 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <__vector_125+0x156>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    204a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    204e:	84 fd       	sbrc	r24, 4
    2050:	c9 cf       	rjmp	.-110    	; 0x1fe4 <__vector_125+0xe6>
    2052:	e7 cf       	rjmp	.-50     	; 0x2022 <__vector_125+0x124>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2054:	ff 91       	pop	r31
    2056:	ef 91       	pop	r30
    2058:	bf 91       	pop	r27
    205a:	af 91       	pop	r26
    205c:	9f 91       	pop	r25
    205e:	8f 91       	pop	r24
    2060:	7f 91       	pop	r23
    2062:	6f 91       	pop	r22
    2064:	5f 91       	pop	r21
    2066:	4f 91       	pop	r20
    2068:	3f 91       	pop	r19
    206a:	2f 91       	pop	r18
    206c:	0f 91       	pop	r16
    206e:	0f 90       	pop	r0
    2070:	0b be       	out	0x3b, r0	; 59
    2072:	0f 90       	pop	r0
    2074:	09 be       	out	0x39, r0	; 57
    2076:	0f 90       	pop	r0
    2078:	08 be       	out	0x38, r0	; 56
    207a:	0f 90       	pop	r0
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	0f 90       	pop	r0
    2080:	1f 90       	pop	r1
    2082:	18 95       	reti

00002084 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2084:	1f 92       	push	r1
    2086:	0f 92       	push	r0
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	0f 92       	push	r0
    208c:	11 24       	eor	r1, r1
    208e:	08 b6       	in	r0, 0x38	; 56
    2090:	0f 92       	push	r0
    2092:	18 be       	out	0x38, r1	; 56
    2094:	09 b6       	in	r0, 0x39	; 57
    2096:	0f 92       	push	r0
    2098:	19 be       	out	0x39, r1	; 57
    209a:	0a b6       	in	r0, 0x3a	; 58
    209c:	0f 92       	push	r0
    209e:	1a be       	out	0x3a, r1	; 58
    20a0:	0b b6       	in	r0, 0x3b	; 59
    20a2:	0f 92       	push	r0
    20a4:	1b be       	out	0x3b, r1	; 59
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	2f 93       	push	r18
    20ac:	3f 93       	push	r19
    20ae:	4f 93       	push	r20
    20b0:	5f 93       	push	r21
    20b2:	6f 93       	push	r22
    20b4:	7f 93       	push	r23
    20b6:	8f 93       	push	r24
    20b8:	9f 93       	push	r25
    20ba:	af 93       	push	r26
    20bc:	bf 93       	push	r27
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	ef 93       	push	r30
    20c4:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    20c6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20ca:	81 fd       	sbrc	r24, 1
    20cc:	03 c0       	rjmp	.+6      	; 0x20d4 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    20ce:	40 da       	rcall	.-2944   	; 0x1550 <udd_ctrl_interrupt_tc_setup>
    20d0:	81 11       	cpse	r24, r1
    20d2:	c3 c0       	rjmp	.+390    	; 0x225a <__vector_126+0x1d6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    20da:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    20de:	81 95       	neg	r24
    20e0:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    20e2:	e4 ec       	ldi	r30, 0xC4	; 196
    20e4:	f3 e2       	ldi	r31, 0x23	; 35
    20e6:	e8 1b       	sub	r30, r24
    20e8:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    20ea:	20 81       	ld	r18, Z
    20ec:	31 81       	ldd	r19, Z+1	; 0x01
    20ee:	24 5c       	subi	r18, 0xC4	; 196
    20f0:	33 42       	sbci	r19, 0x23	; 35
    20f2:	36 95       	lsr	r19
    20f4:	27 95       	ror	r18
    20f6:	36 95       	lsr	r19
    20f8:	27 95       	ror	r18
    20fa:	36 95       	lsr	r19
    20fc:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    20fe:	82 2f       	mov	r24, r18
    2100:	86 95       	lsr	r24
    2102:	20 fd       	sbrc	r18, 0
    2104:	02 c0       	rjmp	.+4      	; 0x210a <__vector_126+0x86>
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	01 c0       	rjmp	.+2      	; 0x210c <__vector_126+0x88>
    210a:	90 e8       	ldi	r25, 0x80	; 128
    210c:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    210e:	e8 2f       	mov	r30, r24
    2110:	ef 70       	andi	r30, 0x0F	; 15
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2118:	28 2f       	mov	r18, r24
    211a:	08 2e       	mov	r0, r24
    211c:	00 0c       	add	r0, r0
    211e:	33 0b       	sbc	r19, r19
    2120:	22 27       	eor	r18, r18
    2122:	33 0f       	add	r19, r19
    2124:	22 1f       	adc	r18, r18
    2126:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2128:	e2 0f       	add	r30, r18
    212a:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    212c:	df 01       	movw	r26, r30
    212e:	aa 0f       	add	r26, r26
    2130:	bb 1f       	adc	r27, r27
    2132:	aa 0f       	add	r26, r26
    2134:	bb 1f       	adc	r27, r27
    2136:	aa 0f       	add	r26, r26
    2138:	bb 1f       	adc	r27, r27
    213a:	a8 54       	subi	r26, 0x48	; 72
    213c:	bc 4d       	sbci	r27, 0xDC	; 220
    213e:	1c 96       	adiw	r26, 0x0c	; 12
    2140:	9c 91       	ld	r25, X
    2142:	95 ff       	sbrs	r25, 5
    2144:	8a c0       	rjmp	.+276    	; 0x225a <__vector_126+0x1d6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	ee 0f       	add	r30, r30
    2150:	ff 1f       	adc	r31, r31
    2152:	ec 53       	subi	r30, 0x3C	; 60
    2154:	fc 4d       	sbci	r31, 0xDC	; 220
    2156:	00 e2       	ldi	r16, 0x20	; 32
    2158:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    215a:	81 11       	cpse	r24, r1
    215c:	79 c0       	rjmp	.+242    	; 0x2250 <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    215e:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_ep_control_state>
    2162:	84 30       	cpi	r24, 0x04	; 4
    2164:	19 f4       	brne	.+6      	; 0x216c <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2166:	3d d9       	rcall	.-3462   	; 0x13e2 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2168:	fb d8       	rcall	.-3594   	; 0x1360 <udd_ctrl_init>
    216a:	77 c0       	rjmp	.+238    	; 0x225a <__vector_126+0x1d6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    216c:	00 91 c6 23 	lds	r16, 0x23C6	; 0x8023c6 <udd_sram+0xe>
    2170:	10 91 c7 23 	lds	r17, 0x23C7	; 0x8023c7 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2174:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0xa>
    2178:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0xb>
    217c:	c0 91 b3 23 	lds	r28, 0x23B3	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    2180:	d0 91 b4 23 	lds	r29, 0x23B4	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    2184:	9e 01       	movw	r18, r28
    2186:	20 0f       	add	r18, r16
    2188:	31 1f       	adc	r19, r17
    218a:	82 17       	cp	r24, r18
    218c:	93 07       	cpc	r25, r19
    218e:	18 f4       	brcc	.+6      	; 0x2196 <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2190:	8c 01       	movw	r16, r24
    2192:	0c 1b       	sub	r16, r28
    2194:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2196:	80 91 01 24 	lds	r24, 0x2401	; 0x802401 <udd_g_ctrlreq+0x8>
    219a:	90 91 02 24 	lds	r25, 0x2402	; 0x802402 <udd_g_ctrlreq+0x9>
    219e:	a8 01       	movw	r20, r16
    21a0:	63 e7       	ldi	r22, 0x73	; 115
    21a2:	73 e2       	ldi	r23, 0x23	; 35
    21a4:	8c 0f       	add	r24, r28
    21a6:	9d 1f       	adc	r25, r29
    21a8:	3c d1       	rcall	.+632    	; 0x2422 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    21aa:	c0 0f       	add	r28, r16
    21ac:	d1 1f       	adc	r29, r17
    21ae:	c0 93 b3 23 	sts	0x23B3, r28	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    21b2:	d0 93 b4 23 	sts	0x23B4, r29	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    21b6:	00 34       	cpi	r16, 0x40	; 64
    21b8:	11 05       	cpc	r17, r1
    21ba:	69 f4       	brne	.+26     	; 0x21d6 <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    21bc:	80 91 b5 23 	lds	r24, 0x23B5	; 0x8023b5 <udd_ctrl_prev_payload_nb_trans>
    21c0:	90 91 b6 23 	lds	r25, 0x23B6	; 0x8023b6 <udd_ctrl_prev_payload_nb_trans+0x1>
    21c4:	8c 0f       	add	r24, r28
    21c6:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    21c8:	20 91 ff 23 	lds	r18, 0x23FF	; 0x8023ff <udd_g_ctrlreq+0x6>
    21cc:	30 91 00 24 	lds	r19, 0x2400	; 0x802400 <udd_g_ctrlreq+0x7>
    21d0:	82 17       	cp	r24, r18
    21d2:	93 07       	cpc	r25, r19
    21d4:	80 f0       	brcs	.+32     	; 0x21f6 <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    21d6:	e9 ef       	ldi	r30, 0xF9	; 249
    21d8:	f3 e2       	ldi	r31, 0x23	; 35
    21da:	c2 87       	std	Z+10, r28	; 0x0a
    21dc:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    21de:	06 84       	ldd	r0, Z+14	; 0x0e
    21e0:	f7 85       	ldd	r31, Z+15	; 0x0f
    21e2:	e0 2d       	mov	r30, r0
    21e4:	30 97       	sbiw	r30, 0x00	; 0
    21e6:	29 f0       	breq	.+10     	; 0x21f2 <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    21e8:	19 95       	eicall
    21ea:	81 11       	cpse	r24, r1
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    21ee:	dd d8       	rcall	.-3654   	; 0x13aa <udd_ctrl_stall_data>
    21f0:	34 c0       	rjmp	.+104    	; 0x225a <__vector_126+0x1d6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    21f2:	e9 d8       	rcall	.-3630   	; 0x13c6 <udd_ctrl_send_zlp_in>
    21f4:	32 c0       	rjmp	.+100    	; 0x225a <__vector_126+0x1d6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    21f6:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udd_g_ctrlreq+0xa>
    21fa:	90 91 04 24 	lds	r25, 0x2404	; 0x802404 <udd_g_ctrlreq+0xb>
    21fe:	c8 17       	cp	r28, r24
    2200:	d9 07       	cpc	r29, r25
    2202:	f9 f4       	brne	.+62     	; 0x2242 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2204:	e0 91 07 24 	lds	r30, 0x2407	; 0x802407 <udd_g_ctrlreq+0xe>
    2208:	f0 91 08 24 	lds	r31, 0x2408	; 0x802408 <udd_g_ctrlreq+0xf>
    220c:	30 97       	sbiw	r30, 0x00	; 0
    220e:	11 f4       	brne	.+4      	; 0x2214 <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2210:	cc d8       	rcall	.-3688   	; 0x13aa <udd_ctrl_stall_data>
    2212:	23 c0       	rjmp	.+70     	; 0x225a <__vector_126+0x1d6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2214:	19 95       	eicall
    2216:	81 11       	cpse	r24, r1
    2218:	02 c0       	rjmp	.+4      	; 0x221e <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    221a:	c7 d8       	rcall	.-3698   	; 0x13aa <udd_ctrl_stall_data>
    221c:	1e c0       	rjmp	.+60     	; 0x225a <__vector_126+0x1d6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    221e:	20 91 b5 23 	lds	r18, 0x23B5	; 0x8023b5 <udd_ctrl_prev_payload_nb_trans>
    2222:	30 91 b6 23 	lds	r19, 0x23B6	; 0x8023b6 <udd_ctrl_prev_payload_nb_trans+0x1>
    2226:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    222a:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
    222e:	82 0f       	add	r24, r18
    2230:	93 1f       	adc	r25, r19
    2232:	80 93 b5 23 	sts	0x23B5, r24	; 0x8023b5 <udd_ctrl_prev_payload_nb_trans>
    2236:	90 93 b6 23 	sts	0x23B6, r25	; 0x8023b6 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    223a:	10 92 b3 23 	sts	0x23B3, r1	; 0x8023b3 <udd_ctrl_payload_nb_trans>
    223e:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2242:	e4 ec       	ldi	r30, 0xC4	; 196
    2244:	f3 e2       	ldi	r31, 0x23	; 35
    2246:	02 e0       	ldi	r16, 0x02	; 2
    2248:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    224a:	00 e2       	ldi	r16, 0x20	; 32
    224c:	06 93       	lac	Z, r16
    224e:	05 c0       	rjmp	.+10     	; 0x225a <__vector_126+0x1d6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2250:	80 38       	cpi	r24, 0x80	; 128
    2252:	11 f4       	brne	.+4      	; 0x2258 <__vector_126+0x1d4>
		udd_ctrl_in_sent();
    2254:	ce d8       	rcall	.-3684   	; 0x13f2 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2256:	01 c0       	rjmp	.+2      	; 0x225a <__vector_126+0x1d6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2258:	ec d9       	rcall	.-3112   	; 0x1632 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    225a:	ff 91       	pop	r31
    225c:	ef 91       	pop	r30
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	bf 91       	pop	r27
    2264:	af 91       	pop	r26
    2266:	9f 91       	pop	r25
    2268:	8f 91       	pop	r24
    226a:	7f 91       	pop	r23
    226c:	6f 91       	pop	r22
    226e:	5f 91       	pop	r21
    2270:	4f 91       	pop	r20
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	0f 90       	pop	r0
    227c:	0b be       	out	0x3b, r0	; 59
    227e:	0f 90       	pop	r0
    2280:	0a be       	out	0x3a, r0	; 58
    2282:	0f 90       	pop	r0
    2284:	09 be       	out	0x39, r0	; 57
    2286:	0f 90       	pop	r0
    2288:	08 be       	out	0x38, r0	; 56
    228a:	0f 90       	pop	r0
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	0f 90       	pop	r0
    2290:	1f 90       	pop	r1
    2292:	18 95       	reti

00002294 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	25 97       	sbiw	r28, 0x05	; 5
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	6c e1       	ldi	r22, 0x1C	; 28
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	8f d0       	rcall	.+286    	; 0x23c8 <nvm_read_byte>
    22aa:	8a 83       	std	Y+2, r24	; 0x02
    22ac:	6d e1       	ldi	r22, 0x1D	; 29
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	8a d0       	rcall	.+276    	; 0x23c8 <nvm_read_byte>
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	21 f4       	brne	.+8      	; 0x22c6 <sysclk_init+0x32>
    22be:	80 e4       	ldi	r24, 0x40	; 64
    22c0:	93 e2       	ldi	r25, 0x23	; 35
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	e0 e6       	ldi	r30, 0x60	; 96
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	82 83       	std	Z+2, r24	; 0x02
    22d4:	8c 81       	ldd	r24, Y+4	; 0x04
    22d6:	83 83       	std	Z+3, r24	; 0x03
    22d8:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
    22dc:	84 fd       	sbrc	r24, 4
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <sysclk_init+0x6a>
    22e0:	8f b7       	in	r24, 0x3f	; 63
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	f8 94       	cli
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	e0 e5       	ldi	r30, 0x50	; 80
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 e1       	ldi	r24, 0x10	; 16
    22ee:	85 83       	std	Z+5, r24	; 0x05
    22f0:	80 81       	ld	r24, Z
    22f2:	80 61       	ori	r24, 0x10	; 16
    22f4:	80 83       	st	Z, r24
    22f6:	9f bf       	out	0x3f, r25	; 63
    22f8:	81 81       	ldd	r24, Z+1	; 0x01
    22fa:	84 ff       	sbrs	r24, 4
    22fc:	fd cf       	rjmp	.-6      	; 0x22f8 <sysclk_init+0x64>
    22fe:	64 e0       	ldi	r22, 0x04	; 4
    2300:	80 e4       	ldi	r24, 0x40	; 64
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	6b d0       	rcall	.+214    	; 0x23dc <ccp_write_io>
    2306:	25 96       	adiw	r28, 0x05	; 5
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	08 95       	ret

00002312 <sysclk_enable_module>:
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	1f 92       	push	r1
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	9f b7       	in	r25, 0x3f	; 63
    231e:	99 83       	std	Y+1, r25	; 0x01
    2320:	f8 94       	cli
    2322:	99 81       	ldd	r25, Y+1	; 0x01
    2324:	e8 2f       	mov	r30, r24
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	e0 59       	subi	r30, 0x90	; 144
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	60 95       	com	r22
    232e:	80 81       	ld	r24, Z
    2330:	68 23       	and	r22, r24
    2332:	60 83       	st	Z, r22
    2334:	9f bf       	out	0x3f, r25	; 63
    2336:	0f 90       	pop	r0
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	08 95       	ret

0000233e <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	1f 92       	push	r1
    2344:	1f 92       	push	r1
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    234a:	86 30       	cpi	r24, 0x06	; 6
    234c:	11 f0       	breq	.+4      	; 0x2352 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    2352:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2354:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    2358:	81 fd       	sbrc	r24, 1
    235a:	2a c0       	rjmp	.+84     	; 0x23b0 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    235c:	8f b7       	in	r24, 0x3f	; 63
    235e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2360:	f8 94       	cli
	return flags;
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2364:	e0 e5       	ldi	r30, 0x50	; 80
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	82 60       	ori	r24, 0x02	; 2
    236c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    236e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2370:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2372:	81 ff       	sbrs	r24, 1
    2374:	fd cf       	rjmp	.-6      	; 0x2370 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2376:	8f b7       	in	r24, 0x3f	; 63
    2378:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    237a:	f8 94       	cli
	return flags;
    237c:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    237e:	a0 e5       	ldi	r26, 0x50	; 80
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	16 96       	adiw	r26, 0x06	; 6
    2384:	8c 91       	ld	r24, X
    2386:	16 97       	sbiw	r26, 0x06	; 6
    2388:	89 7f       	andi	r24, 0xF9	; 249
    238a:	16 96       	adiw	r26, 0x06	; 6
    238c:	8c 93       	st	X, r24
    238e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    2390:	e0 e6       	ldi	r30, 0x60	; 96
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 e8       	ldi	r24, 0x80	; 128
    2396:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    2398:	8b eb       	ldi	r24, 0xBB	; 187
    239a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    239c:	16 96       	adiw	r26, 0x06	; 6
    239e:	8c 91       	ld	r24, X
    23a0:	16 97       	sbiw	r26, 0x06	; 6
    23a2:	84 60       	ori	r24, 0x04	; 4
    23a4:	16 96       	adiw	r26, 0x06	; 6
    23a6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    23a8:	80 81       	ld	r24, Z
    23aa:	81 60       	ori	r24, 0x01	; 1
    23ac:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    23ae:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    23b0:	63 60       	ori	r22, 0x03	; 3
    23b2:	84 e4       	ldi	r24, 0x44	; 68
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	12 d0       	rcall	.+36     	; 0x23dc <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    23b8:	60 e4       	ldi	r22, 0x40	; 64
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	aa df       	rcall	.-172    	; 0x2312 <sysclk_enable_module>
}
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	08 95       	ret

000023c8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    23c8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    23cc:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    23ce:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    23d0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    23d4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    23d6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    23da:	08 95       	ret

000023dc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    23dc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    23de:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    23e0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    23e2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    23e4:	60 83       	st	Z, r22
	ret                             // Return to caller
    23e6:	08 95       	ret

000023e8 <__udivmodhi4>:
    23e8:	aa 1b       	sub	r26, r26
    23ea:	bb 1b       	sub	r27, r27
    23ec:	51 e1       	ldi	r21, 0x11	; 17
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <__udivmodhi4_ep>

000023f0 <__udivmodhi4_loop>:
    23f0:	aa 1f       	adc	r26, r26
    23f2:	bb 1f       	adc	r27, r27
    23f4:	a6 17       	cp	r26, r22
    23f6:	b7 07       	cpc	r27, r23
    23f8:	10 f0       	brcs	.+4      	; 0x23fe <__udivmodhi4_ep>
    23fa:	a6 1b       	sub	r26, r22
    23fc:	b7 0b       	sbc	r27, r23

000023fe <__udivmodhi4_ep>:
    23fe:	88 1f       	adc	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	5a 95       	dec	r21
    2404:	a9 f7       	brne	.-22     	; 0x23f0 <__udivmodhi4_loop>
    2406:	80 95       	com	r24
    2408:	90 95       	com	r25
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	08 95       	ret

00002410 <__tablejump2__>:
    2410:	ee 0f       	add	r30, r30
    2412:	ff 1f       	adc	r31, r31
    2414:	88 1f       	adc	r24, r24
    2416:	8b bf       	out	0x3b, r24	; 59
    2418:	07 90       	elpm	r0, Z+
    241a:	f6 91       	elpm	r31, Z
    241c:	e0 2d       	mov	r30, r0
    241e:	1b be       	out	0x3b, r1	; 59
    2420:	19 94       	eijmp

00002422 <memcpy>:
    2422:	fb 01       	movw	r30, r22
    2424:	dc 01       	movw	r26, r24
    2426:	02 c0       	rjmp	.+4      	; 0x242c <memcpy+0xa>
    2428:	01 90       	ld	r0, Z+
    242a:	0d 92       	st	X+, r0
    242c:	41 50       	subi	r20, 0x01	; 1
    242e:	50 40       	sbci	r21, 0x00	; 0
    2430:	d8 f7       	brcc	.-10     	; 0x2428 <memcpy+0x6>
    2432:	08 95       	ret

00002434 <printf>:
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	ae 01       	movw	r20, r28
    243e:	4a 5f       	subi	r20, 0xFA	; 250
    2440:	5f 4f       	sbci	r21, 0xFF	; 255
    2442:	fa 01       	movw	r30, r20
    2444:	61 91       	ld	r22, Z+
    2446:	71 91       	ld	r23, Z+
    2448:	af 01       	movw	r20, r30
    244a:	80 91 11 24 	lds	r24, 0x2411	; 0x802411 <__iob+0x2>
    244e:	90 91 12 24 	lds	r25, 0x2412	; 0x802412 <__iob+0x3>
    2452:	38 d0       	rcall	.+112    	; 0x24c4 <vfprintf>
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <putchar>:
    245a:	60 91 11 24 	lds	r22, 0x2411	; 0x802411 <__iob+0x2>
    245e:	70 91 12 24 	lds	r23, 0x2412	; 0x802412 <__iob+0x3>
    2462:	2e c2       	rjmp	.+1116   	; 0x28c0 <fputc>

00002464 <puts>:
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	e0 91 11 24 	lds	r30, 0x2411	; 0x802411 <__iob+0x2>
    2470:	f0 91 12 24 	lds	r31, 0x2412	; 0x802412 <__iob+0x3>
    2474:	23 81       	ldd	r18, Z+3	; 0x03
    2476:	21 ff       	sbrs	r18, 1
    2478:	1b c0       	rjmp	.+54     	; 0x24b0 <puts+0x4c>
    247a:	8c 01       	movw	r16, r24
    247c:	d0 e0       	ldi	r29, 0x00	; 0
    247e:	c0 e0       	ldi	r28, 0x00	; 0
    2480:	f8 01       	movw	r30, r16
    2482:	81 91       	ld	r24, Z+
    2484:	8f 01       	movw	r16, r30
    2486:	60 91 11 24 	lds	r22, 0x2411	; 0x802411 <__iob+0x2>
    248a:	70 91 12 24 	lds	r23, 0x2412	; 0x802412 <__iob+0x3>
    248e:	db 01       	movw	r26, r22
    2490:	18 96       	adiw	r26, 0x08	; 8
    2492:	ed 91       	ld	r30, X+
    2494:	fc 91       	ld	r31, X
    2496:	19 97       	sbiw	r26, 0x09	; 9
    2498:	88 23       	and	r24, r24
    249a:	31 f0       	breq	.+12     	; 0x24a8 <puts+0x44>
    249c:	19 95       	eicall
    249e:	89 2b       	or	r24, r25
    24a0:	79 f3       	breq	.-34     	; 0x2480 <puts+0x1c>
    24a2:	df ef       	ldi	r29, 0xFF	; 255
    24a4:	cf ef       	ldi	r28, 0xFF	; 255
    24a6:	ec cf       	rjmp	.-40     	; 0x2480 <puts+0x1c>
    24a8:	8a e0       	ldi	r24, 0x0A	; 10
    24aa:	19 95       	eicall
    24ac:	89 2b       	or	r24, r25
    24ae:	19 f0       	breq	.+6      	; 0x24b6 <puts+0x52>
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	9f ef       	ldi	r25, 0xFF	; 255
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <puts+0x56>
    24b6:	8d 2f       	mov	r24, r29
    24b8:	9c 2f       	mov	r25, r28
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	08 95       	ret

000024c4 <vfprintf>:
    24c4:	2f 92       	push	r2
    24c6:	3f 92       	push	r3
    24c8:	4f 92       	push	r4
    24ca:	5f 92       	push	r5
    24cc:	6f 92       	push	r6
    24ce:	7f 92       	push	r7
    24d0:	8f 92       	push	r8
    24d2:	9f 92       	push	r9
    24d4:	af 92       	push	r10
    24d6:	bf 92       	push	r11
    24d8:	cf 92       	push	r12
    24da:	df 92       	push	r13
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	2c 97       	sbiw	r28, 0x0c	; 12
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	7c 01       	movw	r14, r24
    24f4:	6b 01       	movw	r12, r22
    24f6:	8a 01       	movw	r16, r20
    24f8:	fc 01       	movw	r30, r24
    24fa:	16 82       	std	Z+6, r1	; 0x06
    24fc:	17 82       	std	Z+7, r1	; 0x07
    24fe:	83 81       	ldd	r24, Z+3	; 0x03
    2500:	81 ff       	sbrs	r24, 1
    2502:	b0 c1       	rjmp	.+864    	; 0x2864 <vfprintf+0x3a0>
    2504:	ce 01       	movw	r24, r28
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	4c 01       	movw	r8, r24
    250a:	f7 01       	movw	r30, r14
    250c:	93 81       	ldd	r25, Z+3	; 0x03
    250e:	f6 01       	movw	r30, r12
    2510:	93 fd       	sbrc	r25, 3
    2512:	85 91       	lpm	r24, Z+
    2514:	93 ff       	sbrs	r25, 3
    2516:	81 91       	ld	r24, Z+
    2518:	6f 01       	movw	r12, r30
    251a:	88 23       	and	r24, r24
    251c:	09 f4       	brne	.+2      	; 0x2520 <vfprintf+0x5c>
    251e:	9e c1       	rjmp	.+828    	; 0x285c <vfprintf+0x398>
    2520:	85 32       	cpi	r24, 0x25	; 37
    2522:	39 f4       	brne	.+14     	; 0x2532 <vfprintf+0x6e>
    2524:	93 fd       	sbrc	r25, 3
    2526:	85 91       	lpm	r24, Z+
    2528:	93 ff       	sbrs	r25, 3
    252a:	81 91       	ld	r24, Z+
    252c:	6f 01       	movw	r12, r30
    252e:	85 32       	cpi	r24, 0x25	; 37
    2530:	21 f4       	brne	.+8      	; 0x253a <vfprintf+0x76>
    2532:	b7 01       	movw	r22, r14
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	c4 d1       	rcall	.+904    	; 0x28c0 <fputc>
    2538:	e8 cf       	rjmp	.-48     	; 0x250a <vfprintf+0x46>
    253a:	51 2c       	mov	r5, r1
    253c:	31 2c       	mov	r3, r1
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	20 32       	cpi	r18, 0x20	; 32
    2542:	a0 f4       	brcc	.+40     	; 0x256c <vfprintf+0xa8>
    2544:	8b 32       	cpi	r24, 0x2B	; 43
    2546:	69 f0       	breq	.+26     	; 0x2562 <vfprintf+0x9e>
    2548:	30 f4       	brcc	.+12     	; 0x2556 <vfprintf+0x92>
    254a:	80 32       	cpi	r24, 0x20	; 32
    254c:	59 f0       	breq	.+22     	; 0x2564 <vfprintf+0xa0>
    254e:	83 32       	cpi	r24, 0x23	; 35
    2550:	69 f4       	brne	.+26     	; 0x256c <vfprintf+0xa8>
    2552:	20 61       	ori	r18, 0x10	; 16
    2554:	2c c0       	rjmp	.+88     	; 0x25ae <vfprintf+0xea>
    2556:	8d 32       	cpi	r24, 0x2D	; 45
    2558:	39 f0       	breq	.+14     	; 0x2568 <vfprintf+0xa4>
    255a:	80 33       	cpi	r24, 0x30	; 48
    255c:	39 f4       	brne	.+14     	; 0x256c <vfprintf+0xa8>
    255e:	21 60       	ori	r18, 0x01	; 1
    2560:	26 c0       	rjmp	.+76     	; 0x25ae <vfprintf+0xea>
    2562:	22 60       	ori	r18, 0x02	; 2
    2564:	24 60       	ori	r18, 0x04	; 4
    2566:	23 c0       	rjmp	.+70     	; 0x25ae <vfprintf+0xea>
    2568:	28 60       	ori	r18, 0x08	; 8
    256a:	21 c0       	rjmp	.+66     	; 0x25ae <vfprintf+0xea>
    256c:	27 fd       	sbrc	r18, 7
    256e:	27 c0       	rjmp	.+78     	; 0x25be <vfprintf+0xfa>
    2570:	30 ed       	ldi	r19, 0xD0	; 208
    2572:	38 0f       	add	r19, r24
    2574:	3a 30       	cpi	r19, 0x0A	; 10
    2576:	78 f4       	brcc	.+30     	; 0x2596 <vfprintf+0xd2>
    2578:	26 ff       	sbrs	r18, 6
    257a:	06 c0       	rjmp	.+12     	; 0x2588 <vfprintf+0xc4>
    257c:	fa e0       	ldi	r31, 0x0A	; 10
    257e:	5f 9e       	mul	r5, r31
    2580:	30 0d       	add	r19, r0
    2582:	11 24       	eor	r1, r1
    2584:	53 2e       	mov	r5, r19
    2586:	13 c0       	rjmp	.+38     	; 0x25ae <vfprintf+0xea>
    2588:	8a e0       	ldi	r24, 0x0A	; 10
    258a:	38 9e       	mul	r3, r24
    258c:	30 0d       	add	r19, r0
    258e:	11 24       	eor	r1, r1
    2590:	33 2e       	mov	r3, r19
    2592:	20 62       	ori	r18, 0x20	; 32
    2594:	0c c0       	rjmp	.+24     	; 0x25ae <vfprintf+0xea>
    2596:	8e 32       	cpi	r24, 0x2E	; 46
    2598:	21 f4       	brne	.+8      	; 0x25a2 <vfprintf+0xde>
    259a:	26 fd       	sbrc	r18, 6
    259c:	5f c1       	rjmp	.+702    	; 0x285c <vfprintf+0x398>
    259e:	20 64       	ori	r18, 0x40	; 64
    25a0:	06 c0       	rjmp	.+12     	; 0x25ae <vfprintf+0xea>
    25a2:	8c 36       	cpi	r24, 0x6C	; 108
    25a4:	11 f4       	brne	.+4      	; 0x25aa <vfprintf+0xe6>
    25a6:	20 68       	ori	r18, 0x80	; 128
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <vfprintf+0xea>
    25aa:	88 36       	cpi	r24, 0x68	; 104
    25ac:	41 f4       	brne	.+16     	; 0x25be <vfprintf+0xfa>
    25ae:	f6 01       	movw	r30, r12
    25b0:	93 fd       	sbrc	r25, 3
    25b2:	85 91       	lpm	r24, Z+
    25b4:	93 ff       	sbrs	r25, 3
    25b6:	81 91       	ld	r24, Z+
    25b8:	6f 01       	movw	r12, r30
    25ba:	81 11       	cpse	r24, r1
    25bc:	c1 cf       	rjmp	.-126    	; 0x2540 <vfprintf+0x7c>
    25be:	98 2f       	mov	r25, r24
    25c0:	9f 7d       	andi	r25, 0xDF	; 223
    25c2:	95 54       	subi	r25, 0x45	; 69
    25c4:	93 30       	cpi	r25, 0x03	; 3
    25c6:	28 f4       	brcc	.+10     	; 0x25d2 <vfprintf+0x10e>
    25c8:	0c 5f       	subi	r16, 0xFC	; 252
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	ff e3       	ldi	r31, 0x3F	; 63
    25ce:	f9 83       	std	Y+1, r31	; 0x01
    25d0:	0d c0       	rjmp	.+26     	; 0x25ec <vfprintf+0x128>
    25d2:	83 36       	cpi	r24, 0x63	; 99
    25d4:	31 f0       	breq	.+12     	; 0x25e2 <vfprintf+0x11e>
    25d6:	83 37       	cpi	r24, 0x73	; 115
    25d8:	71 f0       	breq	.+28     	; 0x25f6 <vfprintf+0x132>
    25da:	83 35       	cpi	r24, 0x53	; 83
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <vfprintf+0x11c>
    25de:	57 c0       	rjmp	.+174    	; 0x268e <vfprintf+0x1ca>
    25e0:	21 c0       	rjmp	.+66     	; 0x2624 <vfprintf+0x160>
    25e2:	f8 01       	movw	r30, r16
    25e4:	80 81       	ld	r24, Z
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	0e 5f       	subi	r16, 0xFE	; 254
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	44 24       	eor	r4, r4
    25ee:	43 94       	inc	r4
    25f0:	51 2c       	mov	r5, r1
    25f2:	54 01       	movw	r10, r8
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <vfprintf+0x15a>
    25f6:	38 01       	movw	r6, r16
    25f8:	f2 e0       	ldi	r31, 0x02	; 2
    25fa:	6f 0e       	add	r6, r31
    25fc:	71 1c       	adc	r7, r1
    25fe:	f8 01       	movw	r30, r16
    2600:	a0 80       	ld	r10, Z
    2602:	b1 80       	ldd	r11, Z+1	; 0x01
    2604:	26 ff       	sbrs	r18, 6
    2606:	03 c0       	rjmp	.+6      	; 0x260e <vfprintf+0x14a>
    2608:	65 2d       	mov	r22, r5
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <vfprintf+0x14e>
    260e:	6f ef       	ldi	r22, 0xFF	; 255
    2610:	7f ef       	ldi	r23, 0xFF	; 255
    2612:	c5 01       	movw	r24, r10
    2614:	2c 87       	std	Y+12, r18	; 0x0c
    2616:	49 d1       	rcall	.+658    	; 0x28aa <strnlen>
    2618:	2c 01       	movw	r4, r24
    261a:	83 01       	movw	r16, r6
    261c:	2c 85       	ldd	r18, Y+12	; 0x0c
    261e:	2f 77       	andi	r18, 0x7F	; 127
    2620:	22 2e       	mov	r2, r18
    2622:	16 c0       	rjmp	.+44     	; 0x2650 <vfprintf+0x18c>
    2624:	38 01       	movw	r6, r16
    2626:	f2 e0       	ldi	r31, 0x02	; 2
    2628:	6f 0e       	add	r6, r31
    262a:	71 1c       	adc	r7, r1
    262c:	f8 01       	movw	r30, r16
    262e:	a0 80       	ld	r10, Z
    2630:	b1 80       	ldd	r11, Z+1	; 0x01
    2632:	26 ff       	sbrs	r18, 6
    2634:	03 c0       	rjmp	.+6      	; 0x263c <vfprintf+0x178>
    2636:	65 2d       	mov	r22, r5
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <vfprintf+0x17c>
    263c:	6f ef       	ldi	r22, 0xFF	; 255
    263e:	7f ef       	ldi	r23, 0xFF	; 255
    2640:	c5 01       	movw	r24, r10
    2642:	2c 87       	std	Y+12, r18	; 0x0c
    2644:	27 d1       	rcall	.+590    	; 0x2894 <strnlen_P>
    2646:	2c 01       	movw	r4, r24
    2648:	2c 85       	ldd	r18, Y+12	; 0x0c
    264a:	20 68       	ori	r18, 0x80	; 128
    264c:	22 2e       	mov	r2, r18
    264e:	83 01       	movw	r16, r6
    2650:	23 fc       	sbrc	r2, 3
    2652:	19 c0       	rjmp	.+50     	; 0x2686 <vfprintf+0x1c2>
    2654:	83 2d       	mov	r24, r3
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	48 16       	cp	r4, r24
    265a:	59 06       	cpc	r5, r25
    265c:	a0 f4       	brcc	.+40     	; 0x2686 <vfprintf+0x1c2>
    265e:	b7 01       	movw	r22, r14
    2660:	80 e2       	ldi	r24, 0x20	; 32
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	2d d1       	rcall	.+602    	; 0x28c0 <fputc>
    2666:	3a 94       	dec	r3
    2668:	f5 cf       	rjmp	.-22     	; 0x2654 <vfprintf+0x190>
    266a:	f5 01       	movw	r30, r10
    266c:	27 fc       	sbrc	r2, 7
    266e:	85 91       	lpm	r24, Z+
    2670:	27 fe       	sbrs	r2, 7
    2672:	81 91       	ld	r24, Z+
    2674:	5f 01       	movw	r10, r30
    2676:	b7 01       	movw	r22, r14
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	22 d1       	rcall	.+580    	; 0x28c0 <fputc>
    267c:	31 10       	cpse	r3, r1
    267e:	3a 94       	dec	r3
    2680:	f1 e0       	ldi	r31, 0x01	; 1
    2682:	4f 1a       	sub	r4, r31
    2684:	51 08       	sbc	r5, r1
    2686:	41 14       	cp	r4, r1
    2688:	51 04       	cpc	r5, r1
    268a:	79 f7       	brne	.-34     	; 0x266a <vfprintf+0x1a6>
    268c:	de c0       	rjmp	.+444    	; 0x284a <vfprintf+0x386>
    268e:	84 36       	cpi	r24, 0x64	; 100
    2690:	11 f0       	breq	.+4      	; 0x2696 <vfprintf+0x1d2>
    2692:	89 36       	cpi	r24, 0x69	; 105
    2694:	31 f5       	brne	.+76     	; 0x26e2 <vfprintf+0x21e>
    2696:	f8 01       	movw	r30, r16
    2698:	27 ff       	sbrs	r18, 7
    269a:	07 c0       	rjmp	.+14     	; 0x26aa <vfprintf+0x1e6>
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	0c 5f       	subi	r16, 0xFC	; 252
    26a6:	1f 4f       	sbci	r17, 0xFF	; 255
    26a8:	08 c0       	rjmp	.+16     	; 0x26ba <vfprintf+0x1f6>
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	07 2e       	mov	r0, r23
    26b0:	00 0c       	add	r0, r0
    26b2:	88 0b       	sbc	r24, r24
    26b4:	99 0b       	sbc	r25, r25
    26b6:	0e 5f       	subi	r16, 0xFE	; 254
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	2f 76       	andi	r18, 0x6F	; 111
    26bc:	72 2e       	mov	r7, r18
    26be:	97 ff       	sbrs	r25, 7
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <vfprintf+0x210>
    26c2:	90 95       	com	r25
    26c4:	80 95       	com	r24
    26c6:	70 95       	com	r23
    26c8:	61 95       	neg	r22
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8f 4f       	sbci	r24, 0xFF	; 255
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	20 68       	ori	r18, 0x80	; 128
    26d2:	72 2e       	mov	r7, r18
    26d4:	2a e0       	ldi	r18, 0x0A	; 10
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	a4 01       	movw	r20, r8
    26da:	2a d1       	rcall	.+596    	; 0x2930 <__ultoa_invert>
    26dc:	a8 2e       	mov	r10, r24
    26de:	a8 18       	sub	r10, r8
    26e0:	43 c0       	rjmp	.+134    	; 0x2768 <vfprintf+0x2a4>
    26e2:	85 37       	cpi	r24, 0x75	; 117
    26e4:	29 f4       	brne	.+10     	; 0x26f0 <vfprintf+0x22c>
    26e6:	2f 7e       	andi	r18, 0xEF	; 239
    26e8:	b2 2e       	mov	r11, r18
    26ea:	2a e0       	ldi	r18, 0x0A	; 10
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	25 c0       	rjmp	.+74     	; 0x273a <vfprintf+0x276>
    26f0:	f2 2f       	mov	r31, r18
    26f2:	f9 7f       	andi	r31, 0xF9	; 249
    26f4:	bf 2e       	mov	r11, r31
    26f6:	8f 36       	cpi	r24, 0x6F	; 111
    26f8:	c1 f0       	breq	.+48     	; 0x272a <vfprintf+0x266>
    26fa:	18 f4       	brcc	.+6      	; 0x2702 <vfprintf+0x23e>
    26fc:	88 35       	cpi	r24, 0x58	; 88
    26fe:	79 f0       	breq	.+30     	; 0x271e <vfprintf+0x25a>
    2700:	ad c0       	rjmp	.+346    	; 0x285c <vfprintf+0x398>
    2702:	80 37       	cpi	r24, 0x70	; 112
    2704:	19 f0       	breq	.+6      	; 0x270c <vfprintf+0x248>
    2706:	88 37       	cpi	r24, 0x78	; 120
    2708:	21 f0       	breq	.+8      	; 0x2712 <vfprintf+0x24e>
    270a:	a8 c0       	rjmp	.+336    	; 0x285c <vfprintf+0x398>
    270c:	2f 2f       	mov	r18, r31
    270e:	20 61       	ori	r18, 0x10	; 16
    2710:	b2 2e       	mov	r11, r18
    2712:	b4 fe       	sbrs	r11, 4
    2714:	0d c0       	rjmp	.+26     	; 0x2730 <vfprintf+0x26c>
    2716:	8b 2d       	mov	r24, r11
    2718:	84 60       	ori	r24, 0x04	; 4
    271a:	b8 2e       	mov	r11, r24
    271c:	09 c0       	rjmp	.+18     	; 0x2730 <vfprintf+0x26c>
    271e:	24 ff       	sbrs	r18, 4
    2720:	0a c0       	rjmp	.+20     	; 0x2736 <vfprintf+0x272>
    2722:	9f 2f       	mov	r25, r31
    2724:	96 60       	ori	r25, 0x06	; 6
    2726:	b9 2e       	mov	r11, r25
    2728:	06 c0       	rjmp	.+12     	; 0x2736 <vfprintf+0x272>
    272a:	28 e0       	ldi	r18, 0x08	; 8
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	05 c0       	rjmp	.+10     	; 0x273a <vfprintf+0x276>
    2730:	20 e1       	ldi	r18, 0x10	; 16
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	02 c0       	rjmp	.+4      	; 0x273a <vfprintf+0x276>
    2736:	20 e1       	ldi	r18, 0x10	; 16
    2738:	32 e0       	ldi	r19, 0x02	; 2
    273a:	f8 01       	movw	r30, r16
    273c:	b7 fe       	sbrs	r11, 7
    273e:	07 c0       	rjmp	.+14     	; 0x274e <vfprintf+0x28a>
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	0c 5f       	subi	r16, 0xFC	; 252
    274a:	1f 4f       	sbci	r17, 0xFF	; 255
    274c:	06 c0       	rjmp	.+12     	; 0x275a <vfprintf+0x296>
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 5f       	subi	r16, 0xFE	; 254
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	a4 01       	movw	r20, r8
    275c:	e9 d0       	rcall	.+466    	; 0x2930 <__ultoa_invert>
    275e:	a8 2e       	mov	r10, r24
    2760:	a8 18       	sub	r10, r8
    2762:	fb 2d       	mov	r31, r11
    2764:	ff 77       	andi	r31, 0x7F	; 127
    2766:	7f 2e       	mov	r7, r31
    2768:	76 fe       	sbrs	r7, 6
    276a:	0b c0       	rjmp	.+22     	; 0x2782 <vfprintf+0x2be>
    276c:	37 2d       	mov	r19, r7
    276e:	3e 7f       	andi	r19, 0xFE	; 254
    2770:	a5 14       	cp	r10, r5
    2772:	50 f4       	brcc	.+20     	; 0x2788 <vfprintf+0x2c4>
    2774:	74 fe       	sbrs	r7, 4
    2776:	0a c0       	rjmp	.+20     	; 0x278c <vfprintf+0x2c8>
    2778:	72 fc       	sbrc	r7, 2
    277a:	08 c0       	rjmp	.+16     	; 0x278c <vfprintf+0x2c8>
    277c:	37 2d       	mov	r19, r7
    277e:	3e 7e       	andi	r19, 0xEE	; 238
    2780:	05 c0       	rjmp	.+10     	; 0x278c <vfprintf+0x2c8>
    2782:	ba 2c       	mov	r11, r10
    2784:	37 2d       	mov	r19, r7
    2786:	03 c0       	rjmp	.+6      	; 0x278e <vfprintf+0x2ca>
    2788:	ba 2c       	mov	r11, r10
    278a:	01 c0       	rjmp	.+2      	; 0x278e <vfprintf+0x2ca>
    278c:	b5 2c       	mov	r11, r5
    278e:	34 ff       	sbrs	r19, 4
    2790:	0d c0       	rjmp	.+26     	; 0x27ac <vfprintf+0x2e8>
    2792:	fe 01       	movw	r30, r28
    2794:	ea 0d       	add	r30, r10
    2796:	f1 1d       	adc	r31, r1
    2798:	80 81       	ld	r24, Z
    279a:	80 33       	cpi	r24, 0x30	; 48
    279c:	11 f4       	brne	.+4      	; 0x27a2 <vfprintf+0x2de>
    279e:	39 7e       	andi	r19, 0xE9	; 233
    27a0:	09 c0       	rjmp	.+18     	; 0x27b4 <vfprintf+0x2f0>
    27a2:	32 ff       	sbrs	r19, 2
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <vfprintf+0x2ee>
    27a6:	b3 94       	inc	r11
    27a8:	b3 94       	inc	r11
    27aa:	04 c0       	rjmp	.+8      	; 0x27b4 <vfprintf+0x2f0>
    27ac:	83 2f       	mov	r24, r19
    27ae:	86 78       	andi	r24, 0x86	; 134
    27b0:	09 f0       	breq	.+2      	; 0x27b4 <vfprintf+0x2f0>
    27b2:	b3 94       	inc	r11
    27b4:	33 fd       	sbrc	r19, 3
    27b6:	12 c0       	rjmp	.+36     	; 0x27dc <vfprintf+0x318>
    27b8:	30 ff       	sbrs	r19, 0
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <vfprintf+0x304>
    27bc:	5a 2c       	mov	r5, r10
    27be:	b3 14       	cp	r11, r3
    27c0:	18 f4       	brcc	.+6      	; 0x27c8 <vfprintf+0x304>
    27c2:	53 0c       	add	r5, r3
    27c4:	5b 18       	sub	r5, r11
    27c6:	b3 2c       	mov	r11, r3
    27c8:	b3 14       	cp	r11, r3
    27ca:	60 f4       	brcc	.+24     	; 0x27e4 <vfprintf+0x320>
    27cc:	b7 01       	movw	r22, r14
    27ce:	80 e2       	ldi	r24, 0x20	; 32
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	3c 87       	std	Y+12, r19	; 0x0c
    27d4:	75 d0       	rcall	.+234    	; 0x28c0 <fputc>
    27d6:	b3 94       	inc	r11
    27d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    27da:	f6 cf       	rjmp	.-20     	; 0x27c8 <vfprintf+0x304>
    27dc:	b3 14       	cp	r11, r3
    27de:	10 f4       	brcc	.+4      	; 0x27e4 <vfprintf+0x320>
    27e0:	3b 18       	sub	r3, r11
    27e2:	01 c0       	rjmp	.+2      	; 0x27e6 <vfprintf+0x322>
    27e4:	31 2c       	mov	r3, r1
    27e6:	34 ff       	sbrs	r19, 4
    27e8:	11 c0       	rjmp	.+34     	; 0x280c <vfprintf+0x348>
    27ea:	b7 01       	movw	r22, r14
    27ec:	80 e3       	ldi	r24, 0x30	; 48
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	3c 87       	std	Y+12, r19	; 0x0c
    27f2:	66 d0       	rcall	.+204    	; 0x28c0 <fputc>
    27f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    27f6:	32 ff       	sbrs	r19, 2
    27f8:	16 c0       	rjmp	.+44     	; 0x2826 <vfprintf+0x362>
    27fa:	31 fd       	sbrc	r19, 1
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <vfprintf+0x340>
    27fe:	88 e7       	ldi	r24, 0x78	; 120
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <vfprintf+0x344>
    2804:	88 e5       	ldi	r24, 0x58	; 88
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	b7 01       	movw	r22, r14
    280a:	0c c0       	rjmp	.+24     	; 0x2824 <vfprintf+0x360>
    280c:	83 2f       	mov	r24, r19
    280e:	86 78       	andi	r24, 0x86	; 134
    2810:	51 f0       	breq	.+20     	; 0x2826 <vfprintf+0x362>
    2812:	31 ff       	sbrs	r19, 1
    2814:	02 c0       	rjmp	.+4      	; 0x281a <vfprintf+0x356>
    2816:	8b e2       	ldi	r24, 0x2B	; 43
    2818:	01 c0       	rjmp	.+2      	; 0x281c <vfprintf+0x358>
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	37 fd       	sbrc	r19, 7
    281e:	8d e2       	ldi	r24, 0x2D	; 45
    2820:	b7 01       	movw	r22, r14
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	4d d0       	rcall	.+154    	; 0x28c0 <fputc>
    2826:	a5 14       	cp	r10, r5
    2828:	30 f4       	brcc	.+12     	; 0x2836 <vfprintf+0x372>
    282a:	b7 01       	movw	r22, r14
    282c:	80 e3       	ldi	r24, 0x30	; 48
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	47 d0       	rcall	.+142    	; 0x28c0 <fputc>
    2832:	5a 94       	dec	r5
    2834:	f8 cf       	rjmp	.-16     	; 0x2826 <vfprintf+0x362>
    2836:	aa 94       	dec	r10
    2838:	f4 01       	movw	r30, r8
    283a:	ea 0d       	add	r30, r10
    283c:	f1 1d       	adc	r31, r1
    283e:	80 81       	ld	r24, Z
    2840:	b7 01       	movw	r22, r14
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	3d d0       	rcall	.+122    	; 0x28c0 <fputc>
    2846:	a1 10       	cpse	r10, r1
    2848:	f6 cf       	rjmp	.-20     	; 0x2836 <vfprintf+0x372>
    284a:	33 20       	and	r3, r3
    284c:	09 f4       	brne	.+2      	; 0x2850 <vfprintf+0x38c>
    284e:	5d ce       	rjmp	.-838    	; 0x250a <vfprintf+0x46>
    2850:	b7 01       	movw	r22, r14
    2852:	80 e2       	ldi	r24, 0x20	; 32
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	34 d0       	rcall	.+104    	; 0x28c0 <fputc>
    2858:	3a 94       	dec	r3
    285a:	f7 cf       	rjmp	.-18     	; 0x284a <vfprintf+0x386>
    285c:	f7 01       	movw	r30, r14
    285e:	86 81       	ldd	r24, Z+6	; 0x06
    2860:	97 81       	ldd	r25, Z+7	; 0x07
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <vfprintf+0x3a4>
    2864:	8f ef       	ldi	r24, 0xFF	; 255
    2866:	9f ef       	ldi	r25, 0xFF	; 255
    2868:	2c 96       	adiw	r28, 0x0c	; 12
    286a:	cd bf       	out	0x3d, r28	; 61
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	df 90       	pop	r13
    287c:	cf 90       	pop	r12
    287e:	bf 90       	pop	r11
    2880:	af 90       	pop	r10
    2882:	9f 90       	pop	r9
    2884:	8f 90       	pop	r8
    2886:	7f 90       	pop	r7
    2888:	6f 90       	pop	r6
    288a:	5f 90       	pop	r5
    288c:	4f 90       	pop	r4
    288e:	3f 90       	pop	r3
    2890:	2f 90       	pop	r2
    2892:	08 95       	ret

00002894 <strnlen_P>:
    2894:	fc 01       	movw	r30, r24
    2896:	05 90       	lpm	r0, Z+
    2898:	61 50       	subi	r22, 0x01	; 1
    289a:	70 40       	sbci	r23, 0x00	; 0
    289c:	01 10       	cpse	r0, r1
    289e:	d8 f7       	brcc	.-10     	; 0x2896 <strnlen_P+0x2>
    28a0:	80 95       	com	r24
    28a2:	90 95       	com	r25
    28a4:	8e 0f       	add	r24, r30
    28a6:	9f 1f       	adc	r25, r31
    28a8:	08 95       	ret

000028aa <strnlen>:
    28aa:	fc 01       	movw	r30, r24
    28ac:	61 50       	subi	r22, 0x01	; 1
    28ae:	70 40       	sbci	r23, 0x00	; 0
    28b0:	01 90       	ld	r0, Z+
    28b2:	01 10       	cpse	r0, r1
    28b4:	d8 f7       	brcc	.-10     	; 0x28ac <strnlen+0x2>
    28b6:	80 95       	com	r24
    28b8:	90 95       	com	r25
    28ba:	8e 0f       	add	r24, r30
    28bc:	9f 1f       	adc	r25, r31
    28be:	08 95       	ret

000028c0 <fputc>:
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	fb 01       	movw	r30, r22
    28ca:	23 81       	ldd	r18, Z+3	; 0x03
    28cc:	21 fd       	sbrc	r18, 1
    28ce:	03 c0       	rjmp	.+6      	; 0x28d6 <fputc+0x16>
    28d0:	8f ef       	ldi	r24, 0xFF	; 255
    28d2:	9f ef       	ldi	r25, 0xFF	; 255
    28d4:	28 c0       	rjmp	.+80     	; 0x2926 <fputc+0x66>
    28d6:	22 ff       	sbrs	r18, 2
    28d8:	16 c0       	rjmp	.+44     	; 0x2906 <fputc+0x46>
    28da:	46 81       	ldd	r20, Z+6	; 0x06
    28dc:	57 81       	ldd	r21, Z+7	; 0x07
    28de:	24 81       	ldd	r18, Z+4	; 0x04
    28e0:	35 81       	ldd	r19, Z+5	; 0x05
    28e2:	42 17       	cp	r20, r18
    28e4:	53 07       	cpc	r21, r19
    28e6:	44 f4       	brge	.+16     	; 0x28f8 <fputc+0x38>
    28e8:	a0 81       	ld	r26, Z
    28ea:	b1 81       	ldd	r27, Z+1	; 0x01
    28ec:	9d 01       	movw	r18, r26
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	20 83       	st	Z, r18
    28f4:	31 83       	std	Z+1, r19	; 0x01
    28f6:	8c 93       	st	X, r24
    28f8:	26 81       	ldd	r18, Z+6	; 0x06
    28fa:	37 81       	ldd	r19, Z+7	; 0x07
    28fc:	2f 5f       	subi	r18, 0xFF	; 255
    28fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2900:	26 83       	std	Z+6, r18	; 0x06
    2902:	37 83       	std	Z+7, r19	; 0x07
    2904:	10 c0       	rjmp	.+32     	; 0x2926 <fputc+0x66>
    2906:	eb 01       	movw	r28, r22
    2908:	09 2f       	mov	r16, r25
    290a:	18 2f       	mov	r17, r24
    290c:	00 84       	ldd	r0, Z+8	; 0x08
    290e:	f1 85       	ldd	r31, Z+9	; 0x09
    2910:	e0 2d       	mov	r30, r0
    2912:	19 95       	eicall
    2914:	89 2b       	or	r24, r25
    2916:	e1 f6       	brne	.-72     	; 0x28d0 <fputc+0x10>
    2918:	8e 81       	ldd	r24, Y+6	; 0x06
    291a:	9f 81       	ldd	r25, Y+7	; 0x07
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	8e 83       	std	Y+6, r24	; 0x06
    2920:	9f 83       	std	Y+7, r25	; 0x07
    2922:	81 2f       	mov	r24, r17
    2924:	90 2f       	mov	r25, r16
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	08 95       	ret

00002930 <__ultoa_invert>:
    2930:	fa 01       	movw	r30, r20
    2932:	aa 27       	eor	r26, r26
    2934:	28 30       	cpi	r18, 0x08	; 8
    2936:	51 f1       	breq	.+84     	; 0x298c <__ultoa_invert+0x5c>
    2938:	20 31       	cpi	r18, 0x10	; 16
    293a:	81 f1       	breq	.+96     	; 0x299c <__ultoa_invert+0x6c>
    293c:	e8 94       	clt
    293e:	6f 93       	push	r22
    2940:	6e 7f       	andi	r22, 0xFE	; 254
    2942:	6e 5f       	subi	r22, 0xFE	; 254
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	8f 4f       	sbci	r24, 0xFF	; 255
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	af 4f       	sbci	r26, 0xFF	; 255
    294c:	b1 e0       	ldi	r27, 0x01	; 1
    294e:	3e d0       	rcall	.+124    	; 0x29cc <__ultoa_invert+0x9c>
    2950:	b4 e0       	ldi	r27, 0x04	; 4
    2952:	3c d0       	rcall	.+120    	; 0x29cc <__ultoa_invert+0x9c>
    2954:	67 0f       	add	r22, r23
    2956:	78 1f       	adc	r23, r24
    2958:	89 1f       	adc	r24, r25
    295a:	9a 1f       	adc	r25, r26
    295c:	a1 1d       	adc	r26, r1
    295e:	68 0f       	add	r22, r24
    2960:	79 1f       	adc	r23, r25
    2962:	8a 1f       	adc	r24, r26
    2964:	91 1d       	adc	r25, r1
    2966:	a1 1d       	adc	r26, r1
    2968:	6a 0f       	add	r22, r26
    296a:	71 1d       	adc	r23, r1
    296c:	81 1d       	adc	r24, r1
    296e:	91 1d       	adc	r25, r1
    2970:	a1 1d       	adc	r26, r1
    2972:	20 d0       	rcall	.+64     	; 0x29b4 <__ultoa_invert+0x84>
    2974:	09 f4       	brne	.+2      	; 0x2978 <__ultoa_invert+0x48>
    2976:	68 94       	set
    2978:	3f 91       	pop	r19
    297a:	2a e0       	ldi	r18, 0x0A	; 10
    297c:	26 9f       	mul	r18, r22
    297e:	11 24       	eor	r1, r1
    2980:	30 19       	sub	r19, r0
    2982:	30 5d       	subi	r19, 0xD0	; 208
    2984:	31 93       	st	Z+, r19
    2986:	de f6       	brtc	.-74     	; 0x293e <__ultoa_invert+0xe>
    2988:	cf 01       	movw	r24, r30
    298a:	08 95       	ret
    298c:	46 2f       	mov	r20, r22
    298e:	47 70       	andi	r20, 0x07	; 7
    2990:	40 5d       	subi	r20, 0xD0	; 208
    2992:	41 93       	st	Z+, r20
    2994:	b3 e0       	ldi	r27, 0x03	; 3
    2996:	0f d0       	rcall	.+30     	; 0x29b6 <__ultoa_invert+0x86>
    2998:	c9 f7       	brne	.-14     	; 0x298c <__ultoa_invert+0x5c>
    299a:	f6 cf       	rjmp	.-20     	; 0x2988 <__ultoa_invert+0x58>
    299c:	46 2f       	mov	r20, r22
    299e:	4f 70       	andi	r20, 0x0F	; 15
    29a0:	40 5d       	subi	r20, 0xD0	; 208
    29a2:	4a 33       	cpi	r20, 0x3A	; 58
    29a4:	18 f0       	brcs	.+6      	; 0x29ac <__ultoa_invert+0x7c>
    29a6:	49 5d       	subi	r20, 0xD9	; 217
    29a8:	31 fd       	sbrc	r19, 1
    29aa:	40 52       	subi	r20, 0x20	; 32
    29ac:	41 93       	st	Z+, r20
    29ae:	02 d0       	rcall	.+4      	; 0x29b4 <__ultoa_invert+0x84>
    29b0:	a9 f7       	brne	.-22     	; 0x299c <__ultoa_invert+0x6c>
    29b2:	ea cf       	rjmp	.-44     	; 0x2988 <__ultoa_invert+0x58>
    29b4:	b4 e0       	ldi	r27, 0x04	; 4
    29b6:	a6 95       	lsr	r26
    29b8:	97 95       	ror	r25
    29ba:	87 95       	ror	r24
    29bc:	77 95       	ror	r23
    29be:	67 95       	ror	r22
    29c0:	ba 95       	dec	r27
    29c2:	c9 f7       	brne	.-14     	; 0x29b6 <__ultoa_invert+0x86>
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	61 05       	cpc	r22, r1
    29c8:	71 05       	cpc	r23, r1
    29ca:	08 95       	ret
    29cc:	9b 01       	movw	r18, r22
    29ce:	ac 01       	movw	r20, r24
    29d0:	0a 2e       	mov	r0, r26
    29d2:	06 94       	lsr	r0
    29d4:	57 95       	ror	r21
    29d6:	47 95       	ror	r20
    29d8:	37 95       	ror	r19
    29da:	27 95       	ror	r18
    29dc:	ba 95       	dec	r27
    29de:	c9 f7       	brne	.-14     	; 0x29d2 <__ultoa_invert+0xa2>
    29e0:	62 0f       	add	r22, r18
    29e2:	73 1f       	adc	r23, r19
    29e4:	84 1f       	adc	r24, r20
    29e6:	95 1f       	adc	r25, r21
    29e8:	a0 1d       	adc	r26, r0
    29ea:	08 95       	ret

000029ec <_exit>:
    29ec:	f8 94       	cli

000029ee <__stop_program>:
    29ee:	ff cf       	rjmp	.-2      	; 0x29ee <__stop_program>
